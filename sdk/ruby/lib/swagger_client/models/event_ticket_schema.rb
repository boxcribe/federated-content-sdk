=begin
#Federated Content API

#Welcome to the Federated Content API following Open API Specification (Version 3.0.0)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.57
=end

require 'date'

module SwaggerClient
  class EventTicketSchema
    # Unique identifier for the ticket.
    attr_accessor :ticket_id

    # Identifier for the ticket provided by the supplier.
    attr_accessor :supplier_ticket_id

    # Index number of the ticket for ordering.
    attr_accessor :ticket_index

    # Applicable tax on the ticket price.
    attr_accessor :ticket_tax

    # Price of the ticket.
    attr_accessor :ticket_price

    # Currency in which the ticket is priced.
    attr_accessor :ticket_currency

    # Policies regarding ticket cancellation.
    attr_accessor :ticket_cancellation_policies

    # Section of the venue where the seat is located.
    attr_accessor :ticket_section

    # Row of the section where the seat is located.
    attr_accessor :ticket_row

    # Specific seat number.
    attr_accessor :ticket_seat

    # Description of the ticket.
    attr_accessor :ticket_description

    # Available options for ticket delivery.
    attr_accessor :ticket_delivery_options

    # Quantities of tickets available for purchase.
    attr_accessor :ticket_quantities

    # Questions related to booking the event.
    attr_accessor :booking_questions

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'ticket_id' => :'ticket_id',
        :'supplier_ticket_id' => :'supplier_ticket_id',
        :'ticket_index' => :'ticket_index',
        :'ticket_tax' => :'ticket_tax',
        :'ticket_price' => :'ticket_price',
        :'ticket_currency' => :'ticket_currency',
        :'ticket_cancellation_policies' => :'ticket_cancellation_policies',
        :'ticket_section' => :'ticket_section',
        :'ticket_row' => :'ticket_row',
        :'ticket_seat' => :'ticket_seat',
        :'ticket_description' => :'ticket_description',
        :'ticket_delivery_options' => :'ticket_delivery_options',
        :'ticket_quantities' => :'ticket_quantities',
        :'booking_questions' => :'booking_questions'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'ticket_id' => :'Object',
        :'supplier_ticket_id' => :'Object',
        :'ticket_index' => :'Object',
        :'ticket_tax' => :'Object',
        :'ticket_price' => :'Object',
        :'ticket_currency' => :'Object',
        :'ticket_cancellation_policies' => :'Object',
        :'ticket_section' => :'Object',
        :'ticket_row' => :'Object',
        :'ticket_seat' => :'Object',
        :'ticket_description' => :'Object',
        :'ticket_delivery_options' => :'Object',
        :'ticket_quantities' => :'Object',
        :'booking_questions' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::EventTicketSchema` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::EventTicketSchema`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'ticket_id')
        self.ticket_id = attributes[:'ticket_id']
      end

      if attributes.key?(:'supplier_ticket_id')
        self.supplier_ticket_id = attributes[:'supplier_ticket_id']
      end

      if attributes.key?(:'ticket_index')
        self.ticket_index = attributes[:'ticket_index']
      end

      if attributes.key?(:'ticket_tax')
        self.ticket_tax = attributes[:'ticket_tax']
      end

      if attributes.key?(:'ticket_price')
        self.ticket_price = attributes[:'ticket_price']
      end

      if attributes.key?(:'ticket_currency')
        self.ticket_currency = attributes[:'ticket_currency']
      end

      if attributes.key?(:'ticket_cancellation_policies')
        self.ticket_cancellation_policies = attributes[:'ticket_cancellation_policies']
      end

      if attributes.key?(:'ticket_section')
        self.ticket_section = attributes[:'ticket_section']
      end

      if attributes.key?(:'ticket_row')
        self.ticket_row = attributes[:'ticket_row']
      end

      if attributes.key?(:'ticket_seat')
        self.ticket_seat = attributes[:'ticket_seat']
      end

      if attributes.key?(:'ticket_description')
        self.ticket_description = attributes[:'ticket_description']
      end

      if attributes.key?(:'ticket_delivery_options')
        if (value = attributes[:'ticket_delivery_options']).is_a?(Array)
          self.ticket_delivery_options = value
        end
      end

      if attributes.key?(:'ticket_quantities')
        if (value = attributes[:'ticket_quantities']).is_a?(Array)
          self.ticket_quantities = value
        end
      end

      if attributes.key?(:'booking_questions')
        if (value = attributes[:'booking_questions']).is_a?(Array)
          self.booking_questions = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          ticket_id == o.ticket_id &&
          supplier_ticket_id == o.supplier_ticket_id &&
          ticket_index == o.ticket_index &&
          ticket_tax == o.ticket_tax &&
          ticket_price == o.ticket_price &&
          ticket_currency == o.ticket_currency &&
          ticket_cancellation_policies == o.ticket_cancellation_policies &&
          ticket_section == o.ticket_section &&
          ticket_row == o.ticket_row &&
          ticket_seat == o.ticket_seat &&
          ticket_description == o.ticket_description &&
          ticket_delivery_options == o.ticket_delivery_options &&
          ticket_quantities == o.ticket_quantities &&
          booking_questions == o.booking_questions
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [ticket_id, supplier_ticket_id, ticket_index, ticket_tax, ticket_price, ticket_currency, ticket_cancellation_policies, ticket_section, ticket_row, ticket_seat, ticket_description, ticket_delivery_options, ticket_quantities, booking_questions].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
