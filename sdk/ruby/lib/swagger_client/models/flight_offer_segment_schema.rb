=begin
#Federated Content API

#Welcome to the Federated Content API following Open API Specification (Version 3.0.0)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.57
=end

require 'date'

module SwaggerClient
  class FlightOfferSegmentSchema
    # Unique identifier for the flight segment.
    attr_accessor :segment_id

    # Total duration of the flight segment in minutes.
    attr_accessor :duration

    # Name of the origin airport.
    attr_accessor :origin_name

    # IATA code of the origin airport.
    attr_accessor :origin_code

    # Latitude of the origin airport.
    attr_accessor :origin_latitude

    # Longitude of the origin airport.
    attr_accessor :origin_longitude

    # Terminal at the origin airport.
    attr_accessor :origin_terminal

    # Name of the destination airport.
    attr_accessor :destination_name

    # IATA code of the destination airport.
    attr_accessor :destination_code

    # Latitude of the destination airport.
    attr_accessor :destination_latitude

    # Longitude of the destination airport.
    attr_accessor :destination_longitude

    # Terminal at the destination airport.
    attr_accessor :destination_terminal

    # Scheduled departure date and time.
    attr_accessor :departure_date_time

    # Scheduled arrival date and time.
    attr_accessor :arrival_date_time

    # Name of the operating airline.
    attr_accessor :operating_airline_name

    # Code of the operating airline.
    attr_accessor :operating_airline_code

    # Logo of the operating airline.
    attr_accessor :operating_airline_logo

    # Name of the marketing airline.
    attr_accessor :marketing_airline_name

    # Code of the marketing airline.
    attr_accessor :marketing_airline_code

    # Logo of the marketing airline.
    attr_accessor :marketing_airline_logo

    # Name of the aircraft.
    attr_accessor :aircraft_name

    # Code of the aircraft.
    attr_accessor :aircraft_code

    # Name of the fare brand.
    attr_accessor :fare_brand_name

    # Array of FlightOfferSegmentPassengerSchema detailing passenger information.
    attr_accessor :passengers

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'segment_id' => :'segment_id',
        :'duration' => :'duration',
        :'origin_name' => :'origin_name',
        :'origin_code' => :'origin_code',
        :'origin_latitude' => :'origin_latitude',
        :'origin_longitude' => :'origin_longitude',
        :'origin_terminal' => :'origin_terminal',
        :'destination_name' => :'destination_name',
        :'destination_code' => :'destination_code',
        :'destination_latitude' => :'destination_latitude',
        :'destination_longitude' => :'destination_longitude',
        :'destination_terminal' => :'destination_terminal',
        :'departure_date_time' => :'departure_date_time',
        :'arrival_date_time' => :'arrival_date_time',
        :'operating_airline_name' => :'operating_airline_name',
        :'operating_airline_code' => :'operating_airline_code',
        :'operating_airline_logo' => :'operating_airline_logo',
        :'marketing_airline_name' => :'marketing_airline_name',
        :'marketing_airline_code' => :'marketing_airline_code',
        :'marketing_airline_logo' => :'marketing_airline_logo',
        :'aircraft_name' => :'aircraft_name',
        :'aircraft_code' => :'aircraft_code',
        :'fare_brand_name' => :'fare_brand_name',
        :'passengers' => :'passengers'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'segment_id' => :'Object',
        :'duration' => :'Object',
        :'origin_name' => :'Object',
        :'origin_code' => :'Object',
        :'origin_latitude' => :'Object',
        :'origin_longitude' => :'Object',
        :'origin_terminal' => :'Object',
        :'destination_name' => :'Object',
        :'destination_code' => :'Object',
        :'destination_latitude' => :'Object',
        :'destination_longitude' => :'Object',
        :'destination_terminal' => :'Object',
        :'departure_date_time' => :'Object',
        :'arrival_date_time' => :'Object',
        :'operating_airline_name' => :'Object',
        :'operating_airline_code' => :'Object',
        :'operating_airline_logo' => :'Object',
        :'marketing_airline_name' => :'Object',
        :'marketing_airline_code' => :'Object',
        :'marketing_airline_logo' => :'Object',
        :'aircraft_name' => :'Object',
        :'aircraft_code' => :'Object',
        :'fare_brand_name' => :'Object',
        :'passengers' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::FlightOfferSegmentSchema` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::FlightOfferSegmentSchema`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'segment_id')
        self.segment_id = attributes[:'segment_id']
      end

      if attributes.key?(:'duration')
        self.duration = attributes[:'duration']
      end

      if attributes.key?(:'origin_name')
        self.origin_name = attributes[:'origin_name']
      end

      if attributes.key?(:'origin_code')
        self.origin_code = attributes[:'origin_code']
      end

      if attributes.key?(:'origin_latitude')
        self.origin_latitude = attributes[:'origin_latitude']
      end

      if attributes.key?(:'origin_longitude')
        self.origin_longitude = attributes[:'origin_longitude']
      end

      if attributes.key?(:'origin_terminal')
        self.origin_terminal = attributes[:'origin_terminal']
      end

      if attributes.key?(:'destination_name')
        self.destination_name = attributes[:'destination_name']
      end

      if attributes.key?(:'destination_code')
        self.destination_code = attributes[:'destination_code']
      end

      if attributes.key?(:'destination_latitude')
        self.destination_latitude = attributes[:'destination_latitude']
      end

      if attributes.key?(:'destination_longitude')
        self.destination_longitude = attributes[:'destination_longitude']
      end

      if attributes.key?(:'destination_terminal')
        self.destination_terminal = attributes[:'destination_terminal']
      end

      if attributes.key?(:'departure_date_time')
        self.departure_date_time = attributes[:'departure_date_time']
      end

      if attributes.key?(:'arrival_date_time')
        self.arrival_date_time = attributes[:'arrival_date_time']
      end

      if attributes.key?(:'operating_airline_name')
        self.operating_airline_name = attributes[:'operating_airline_name']
      end

      if attributes.key?(:'operating_airline_code')
        self.operating_airline_code = attributes[:'operating_airline_code']
      end

      if attributes.key?(:'operating_airline_logo')
        self.operating_airline_logo = attributes[:'operating_airline_logo']
      end

      if attributes.key?(:'marketing_airline_name')
        self.marketing_airline_name = attributes[:'marketing_airline_name']
      end

      if attributes.key?(:'marketing_airline_code')
        self.marketing_airline_code = attributes[:'marketing_airline_code']
      end

      if attributes.key?(:'marketing_airline_logo')
        self.marketing_airline_logo = attributes[:'marketing_airline_logo']
      end

      if attributes.key?(:'aircraft_name')
        self.aircraft_name = attributes[:'aircraft_name']
      end

      if attributes.key?(:'aircraft_code')
        self.aircraft_code = attributes[:'aircraft_code']
      end

      if attributes.key?(:'fare_brand_name')
        self.fare_brand_name = attributes[:'fare_brand_name']
      end

      if attributes.key?(:'passengers')
        if (value = attributes[:'passengers']).is_a?(Array)
          self.passengers = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          segment_id == o.segment_id &&
          duration == o.duration &&
          origin_name == o.origin_name &&
          origin_code == o.origin_code &&
          origin_latitude == o.origin_latitude &&
          origin_longitude == o.origin_longitude &&
          origin_terminal == o.origin_terminal &&
          destination_name == o.destination_name &&
          destination_code == o.destination_code &&
          destination_latitude == o.destination_latitude &&
          destination_longitude == o.destination_longitude &&
          destination_terminal == o.destination_terminal &&
          departure_date_time == o.departure_date_time &&
          arrival_date_time == o.arrival_date_time &&
          operating_airline_name == o.operating_airline_name &&
          operating_airline_code == o.operating_airline_code &&
          operating_airline_logo == o.operating_airline_logo &&
          marketing_airline_name == o.marketing_airline_name &&
          marketing_airline_code == o.marketing_airline_code &&
          marketing_airline_logo == o.marketing_airline_logo &&
          aircraft_name == o.aircraft_name &&
          aircraft_code == o.aircraft_code &&
          fare_brand_name == o.fare_brand_name &&
          passengers == o.passengers
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [segment_id, duration, origin_name, origin_code, origin_latitude, origin_longitude, origin_terminal, destination_name, destination_code, destination_latitude, destination_longitude, destination_terminal, departure_date_time, arrival_date_time, operating_airline_name, operating_airline_code, operating_airline_logo, marketing_airline_name, marketing_airline_code, marketing_airline_logo, aircraft_name, aircraft_code, fare_brand_name, passengers].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
