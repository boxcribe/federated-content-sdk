=begin
#Federated Content API

#Welcome to the Federated Content API following Open API Specification (Version 3.0.0)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.57
=end

require 'date'

module SwaggerClient
  class EventOfferResponseItemSchema
    # Unique identifier for the offer.
    attr_accessor :offer_id

    # Unique identifier for the supplierâ€™s offer.
    attr_accessor :supplier_offer_id

    # Index of the offer for sorting purposes.
    attr_accessor :offer_index

    # Tax applied to the offer.
    attr_accessor :offer_tax

    # Price of the offer.
    attr_accessor :offer_price

    # Currency of the offer price.
    attr_accessor :offer_currency

    # Cancellation policies applicable to the offer.
    attr_accessor :offer_cancelation_policies

    # Date of the event.
    attr_accessor :date

    # Number of adults involved in the event.
    attr_accessor :adults

    # Number of children involved in the event.
    attr_accessor :children

    # Name of the event.
    attr_accessor :event_name

    # Description of the event.
    attr_accessor :event_description

    # Address where the event will take place.
    attr_accessor :event_address

    # Latitude of the event location.
    attr_accessor :event_latitude

    # Longitude of the event location.
    attr_accessor :event_longitude

    # Distance to the event from a reference point.
    attr_accessor :event_distance

    # Metric used to measure the distance to the event.
    attr_accessor :event_distance_metric

    # Images of the event.
    attr_accessor :event_images

    # Rating of the event.
    attr_accessor :event_rating

    # Reviews of the event.
    attr_accessor :event_reviews

    # Venue where the event will take place.
    attr_accessor :event_venue

    # Capacity of the venue.
    attr_accessor :event_venue_capacity

    # Performers at the event.
    attr_accessor :event_performers

    # Subcategories of the event.
    attr_accessor :event_subcategories

    # Questions related to booking the event.
    attr_accessor :booking_questions

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'offer_id' => :'offer_id',
        :'supplier_offer_id' => :'supplier_offer_id',
        :'offer_index' => :'offer_index',
        :'offer_tax' => :'offer_tax',
        :'offer_price' => :'offer_price',
        :'offer_currency' => :'offer_currency',
        :'offer_cancelation_policies' => :'offer_cancelation_policies',
        :'date' => :'date',
        :'adults' => :'adults',
        :'children' => :'children',
        :'event_name' => :'event_name',
        :'event_description' => :'event_description',
        :'event_address' => :'event_address',
        :'event_latitude' => :'event_latitude',
        :'event_longitude' => :'event_longitude',
        :'event_distance' => :'event_distance',
        :'event_distance_metric' => :'event_distance_metric',
        :'event_images' => :'event_images',
        :'event_rating' => :'event_rating',
        :'event_reviews' => :'event_reviews',
        :'event_venue' => :'event_venue',
        :'event_venue_capacity' => :'event_venue_capacity',
        :'event_performers' => :'event_performers',
        :'event_subcategories' => :'event_subcategories',
        :'booking_questions' => :'booking_questions'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'offer_id' => :'Object',
        :'supplier_offer_id' => :'Object',
        :'offer_index' => :'Object',
        :'offer_tax' => :'Object',
        :'offer_price' => :'Object',
        :'offer_currency' => :'Object',
        :'offer_cancelation_policies' => :'Object',
        :'date' => :'Object',
        :'adults' => :'Object',
        :'children' => :'Object',
        :'event_name' => :'Object',
        :'event_description' => :'Object',
        :'event_address' => :'Object',
        :'event_latitude' => :'Object',
        :'event_longitude' => :'Object',
        :'event_distance' => :'Object',
        :'event_distance_metric' => :'Object',
        :'event_images' => :'Object',
        :'event_rating' => :'Object',
        :'event_reviews' => :'Object',
        :'event_venue' => :'Object',
        :'event_venue_capacity' => :'Object',
        :'event_performers' => :'Object',
        :'event_subcategories' => :'Object',
        :'booking_questions' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::EventOfferResponseItemSchema` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::EventOfferResponseItemSchema`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'offer_id')
        self.offer_id = attributes[:'offer_id']
      end

      if attributes.key?(:'supplier_offer_id')
        self.supplier_offer_id = attributes[:'supplier_offer_id']
      end

      if attributes.key?(:'offer_index')
        self.offer_index = attributes[:'offer_index']
      end

      if attributes.key?(:'offer_tax')
        self.offer_tax = attributes[:'offer_tax']
      end

      if attributes.key?(:'offer_price')
        self.offer_price = attributes[:'offer_price']
      end

      if attributes.key?(:'offer_currency')
        self.offer_currency = attributes[:'offer_currency']
      end

      if attributes.key?(:'offer_cancelation_policies')
        self.offer_cancelation_policies = attributes[:'offer_cancelation_policies']
      end

      if attributes.key?(:'date')
        self.date = attributes[:'date']
      end

      if attributes.key?(:'adults')
        self.adults = attributes[:'adults']
      end

      if attributes.key?(:'children')
        self.children = attributes[:'children']
      end

      if attributes.key?(:'event_name')
        self.event_name = attributes[:'event_name']
      end

      if attributes.key?(:'event_description')
        self.event_description = attributes[:'event_description']
      end

      if attributes.key?(:'event_address')
        self.event_address = attributes[:'event_address']
      end

      if attributes.key?(:'event_latitude')
        self.event_latitude = attributes[:'event_latitude']
      end

      if attributes.key?(:'event_longitude')
        self.event_longitude = attributes[:'event_longitude']
      end

      if attributes.key?(:'event_distance')
        self.event_distance = attributes[:'event_distance']
      end

      if attributes.key?(:'event_distance_metric')
        self.event_distance_metric = attributes[:'event_distance_metric']
      end

      if attributes.key?(:'event_images')
        if (value = attributes[:'event_images']).is_a?(Array)
          self.event_images = value
        end
      end

      if attributes.key?(:'event_rating')
        self.event_rating = attributes[:'event_rating']
      end

      if attributes.key?(:'event_reviews')
        if (value = attributes[:'event_reviews']).is_a?(Array)
          self.event_reviews = value
        end
      end

      if attributes.key?(:'event_venue')
        self.event_venue = attributes[:'event_venue']
      end

      if attributes.key?(:'event_venue_capacity')
        self.event_venue_capacity = attributes[:'event_venue_capacity']
      end

      if attributes.key?(:'event_performers')
        if (value = attributes[:'event_performers']).is_a?(Array)
          self.event_performers = value
        end
      end

      if attributes.key?(:'event_subcategories')
        if (value = attributes[:'event_subcategories']).is_a?(Array)
          self.event_subcategories = value
        end
      end

      if attributes.key?(:'booking_questions')
        if (value = attributes[:'booking_questions']).is_a?(Array)
          self.booking_questions = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          offer_id == o.offer_id &&
          supplier_offer_id == o.supplier_offer_id &&
          offer_index == o.offer_index &&
          offer_tax == o.offer_tax &&
          offer_price == o.offer_price &&
          offer_currency == o.offer_currency &&
          offer_cancelation_policies == o.offer_cancelation_policies &&
          date == o.date &&
          adults == o.adults &&
          children == o.children &&
          event_name == o.event_name &&
          event_description == o.event_description &&
          event_address == o.event_address &&
          event_latitude == o.event_latitude &&
          event_longitude == o.event_longitude &&
          event_distance == o.event_distance &&
          event_distance_metric == o.event_distance_metric &&
          event_images == o.event_images &&
          event_rating == o.event_rating &&
          event_reviews == o.event_reviews &&
          event_venue == o.event_venue &&
          event_venue_capacity == o.event_venue_capacity &&
          event_performers == o.event_performers &&
          event_subcategories == o.event_subcategories &&
          booking_questions == o.booking_questions
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [offer_id, supplier_offer_id, offer_index, offer_tax, offer_price, offer_currency, offer_cancelation_policies, date, adults, children, event_name, event_description, event_address, event_latitude, event_longitude, event_distance, event_distance_metric, event_images, event_rating, event_reviews, event_venue, event_venue_capacity, event_performers, event_subcategories, booking_questions].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
