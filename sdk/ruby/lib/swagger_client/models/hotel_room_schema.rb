=begin
#Federated Content API

#Welcome to the Federated Content API following Open API Specification (Version 3.0.0)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.57
=end

require 'date'

module SwaggerClient
  class HotelRoomSchema
    # Unique identifier for each room.
    attr_accessor :room_id

    # Supplier specific identifier for the room.
    attr_accessor :supplier_room_id

    # Position of the room in the list.
    attr_accessor :room_index

    # Start date of the hotel reservation.
    attr_accessor :checkin_date

    # End date of the hotel reservation.
    attr_accessor :checkout_date

    # Number of adults that can be accommodated in the room.
    attr_accessor :adults

    # Number of children that can be accommodated in the room.
    attr_accessor :children

    # Tax rate applicable to the room price.
    attr_accessor :room_tax

    # Nightly rate for the room.
    attr_accessor :room_price

    # Currency used for the room pricing.
    attr_accessor :room_currency

    # Details about the cancellation policy for the room.
    attr_accessor :room_cancellation_policies

    # Type or name of the room.
    attr_accessor :room_name

    # Description of the room including amenities and features.
    attr_accessor :room_description

    # Images showcasing the room.
    attr_accessor :room_images

    # Maximum quantity of this room type available.
    attr_accessor :room_quantity_max

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'room_id' => :'room_id',
        :'supplier_room_id' => :'supplier_room_id',
        :'room_index' => :'room_index',
        :'checkin_date' => :'checkin_date',
        :'checkout_date' => :'checkout_date',
        :'adults' => :'adults',
        :'children' => :'children',
        :'room_tax' => :'room_tax',
        :'room_price' => :'room_price',
        :'room_currency' => :'room_currency',
        :'room_cancellation_policies' => :'room_cancellation_policies',
        :'room_name' => :'room_name',
        :'room_description' => :'room_description',
        :'room_images' => :'room_images',
        :'room_quantity_max' => :'room_quantity_max'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'room_id' => :'Object',
        :'supplier_room_id' => :'Object',
        :'room_index' => :'Object',
        :'checkin_date' => :'Object',
        :'checkout_date' => :'Object',
        :'adults' => :'Object',
        :'children' => :'Object',
        :'room_tax' => :'Object',
        :'room_price' => :'Object',
        :'room_currency' => :'Object',
        :'room_cancellation_policies' => :'Object',
        :'room_name' => :'Object',
        :'room_description' => :'Object',
        :'room_images' => :'Object',
        :'room_quantity_max' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::HotelRoomSchema` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::HotelRoomSchema`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'room_id')
        self.room_id = attributes[:'room_id']
      end

      if attributes.key?(:'supplier_room_id')
        self.supplier_room_id = attributes[:'supplier_room_id']
      end

      if attributes.key?(:'room_index')
        self.room_index = attributes[:'room_index']
      end

      if attributes.key?(:'checkin_date')
        self.checkin_date = attributes[:'checkin_date']
      end

      if attributes.key?(:'checkout_date')
        self.checkout_date = attributes[:'checkout_date']
      end

      if attributes.key?(:'adults')
        self.adults = attributes[:'adults']
      end

      if attributes.key?(:'children')
        self.children = attributes[:'children']
      end

      if attributes.key?(:'room_tax')
        self.room_tax = attributes[:'room_tax']
      end

      if attributes.key?(:'room_price')
        self.room_price = attributes[:'room_price']
      end

      if attributes.key?(:'room_currency')
        self.room_currency = attributes[:'room_currency']
      end

      if attributes.key?(:'room_cancellation_policies')
        self.room_cancellation_policies = attributes[:'room_cancellation_policies']
      end

      if attributes.key?(:'room_name')
        self.room_name = attributes[:'room_name']
      end

      if attributes.key?(:'room_description')
        self.room_description = attributes[:'room_description']
      end

      if attributes.key?(:'room_images')
        if (value = attributes[:'room_images']).is_a?(Array)
          self.room_images = value
        end
      end

      if attributes.key?(:'room_quantity_max')
        self.room_quantity_max = attributes[:'room_quantity_max']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          room_id == o.room_id &&
          supplier_room_id == o.supplier_room_id &&
          room_index == o.room_index &&
          checkin_date == o.checkin_date &&
          checkout_date == o.checkout_date &&
          adults == o.adults &&
          children == o.children &&
          room_tax == o.room_tax &&
          room_price == o.room_price &&
          room_currency == o.room_currency &&
          room_cancellation_policies == o.room_cancellation_policies &&
          room_name == o.room_name &&
          room_description == o.room_description &&
          room_images == o.room_images &&
          room_quantity_max == o.room_quantity_max
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [room_id, supplier_room_id, room_index, checkin_date, checkout_date, adults, children, room_tax, room_price, room_currency, room_cancellation_policies, room_name, room_description, room_images, room_quantity_max].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
