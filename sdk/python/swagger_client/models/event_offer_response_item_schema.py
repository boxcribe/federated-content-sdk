# coding: utf-8

"""
    Federated Content API

    Welcome to the Federated Content API following Open API Specification (Version 3.0.0)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EventOfferResponseItemSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'offer_id': 'str',
        'supplier_offer_id': 'str',
        'offer_index': 'float',
        'offer_tax': 'float',
        'offer_price': 'float',
        'offer_currency': 'str',
        'offer_cancelation_policies': 'str',
        '_date': 'date',
        'adults': 'float',
        'children': 'float',
        'event_name': 'str',
        'event_description': 'str',
        'event_address': 'str',
        'event_latitude': 'float',
        'event_longitude': 'float',
        'event_distance': 'float',
        'event_distance_metric': 'str',
        'event_images': 'list[str]',
        'event_rating': 'float',
        'event_reviews': 'list[str]',
        'event_venue': 'str',
        'event_venue_capacity': 'float',
        'event_performers': 'list[str]',
        'event_subcategories': 'list[str]',
        'booking_questions': 'list[str]'
    }

    attribute_map = {
        'offer_id': 'offer_id',
        'supplier_offer_id': 'supplier_offer_id',
        'offer_index': 'offer_index',
        'offer_tax': 'offer_tax',
        'offer_price': 'offer_price',
        'offer_currency': 'offer_currency',
        'offer_cancelation_policies': 'offer_cancelation_policies',
        '_date': 'date',
        'adults': 'adults',
        'children': 'children',
        'event_name': 'event_name',
        'event_description': 'event_description',
        'event_address': 'event_address',
        'event_latitude': 'event_latitude',
        'event_longitude': 'event_longitude',
        'event_distance': 'event_distance',
        'event_distance_metric': 'event_distance_metric',
        'event_images': 'event_images',
        'event_rating': 'event_rating',
        'event_reviews': 'event_reviews',
        'event_venue': 'event_venue',
        'event_venue_capacity': 'event_venue_capacity',
        'event_performers': 'event_performers',
        'event_subcategories': 'event_subcategories',
        'booking_questions': 'booking_questions'
    }

    def __init__(self, offer_id=None, supplier_offer_id=None, offer_index=None, offer_tax=None, offer_price=None, offer_currency=None, offer_cancelation_policies=None, _date=None, adults=None, children=None, event_name=None, event_description=None, event_address=None, event_latitude=None, event_longitude=None, event_distance=None, event_distance_metric=None, event_images=None, event_rating=None, event_reviews=None, event_venue=None, event_venue_capacity=None, event_performers=None, event_subcategories=None, booking_questions=None):  # noqa: E501
        """EventOfferResponseItemSchema - a model defined in Swagger"""  # noqa: E501
        self._offer_id = None
        self._supplier_offer_id = None
        self._offer_index = None
        self._offer_tax = None
        self._offer_price = None
        self._offer_currency = None
        self._offer_cancelation_policies = None
        self.__date = None
        self._adults = None
        self._children = None
        self._event_name = None
        self._event_description = None
        self._event_address = None
        self._event_latitude = None
        self._event_longitude = None
        self._event_distance = None
        self._event_distance_metric = None
        self._event_images = None
        self._event_rating = None
        self._event_reviews = None
        self._event_venue = None
        self._event_venue_capacity = None
        self._event_performers = None
        self._event_subcategories = None
        self._booking_questions = None
        self.discriminator = None
        if offer_id is not None:
            self.offer_id = offer_id
        if supplier_offer_id is not None:
            self.supplier_offer_id = supplier_offer_id
        if offer_index is not None:
            self.offer_index = offer_index
        if offer_tax is not None:
            self.offer_tax = offer_tax
        if offer_price is not None:
            self.offer_price = offer_price
        if offer_currency is not None:
            self.offer_currency = offer_currency
        if offer_cancelation_policies is not None:
            self.offer_cancelation_policies = offer_cancelation_policies
        if _date is not None:
            self._date = _date
        if adults is not None:
            self.adults = adults
        if children is not None:
            self.children = children
        if event_name is not None:
            self.event_name = event_name
        if event_description is not None:
            self.event_description = event_description
        if event_address is not None:
            self.event_address = event_address
        if event_latitude is not None:
            self.event_latitude = event_latitude
        if event_longitude is not None:
            self.event_longitude = event_longitude
        if event_distance is not None:
            self.event_distance = event_distance
        if event_distance_metric is not None:
            self.event_distance_metric = event_distance_metric
        if event_images is not None:
            self.event_images = event_images
        if event_rating is not None:
            self.event_rating = event_rating
        if event_reviews is not None:
            self.event_reviews = event_reviews
        if event_venue is not None:
            self.event_venue = event_venue
        if event_venue_capacity is not None:
            self.event_venue_capacity = event_venue_capacity
        if event_performers is not None:
            self.event_performers = event_performers
        if event_subcategories is not None:
            self.event_subcategories = event_subcategories
        if booking_questions is not None:
            self.booking_questions = booking_questions

    @property
    def offer_id(self):
        """Gets the offer_id of this EventOfferResponseItemSchema.  # noqa: E501

        Unique identifier for the offer.  # noqa: E501

        :return: The offer_id of this EventOfferResponseItemSchema.  # noqa: E501
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this EventOfferResponseItemSchema.

        Unique identifier for the offer.  # noqa: E501

        :param offer_id: The offer_id of this EventOfferResponseItemSchema.  # noqa: E501
        :type: str
        """

        self._offer_id = offer_id

    @property
    def supplier_offer_id(self):
        """Gets the supplier_offer_id of this EventOfferResponseItemSchema.  # noqa: E501

        Unique identifier for the supplier’s offer.  # noqa: E501

        :return: The supplier_offer_id of this EventOfferResponseItemSchema.  # noqa: E501
        :rtype: str
        """
        return self._supplier_offer_id

    @supplier_offer_id.setter
    def supplier_offer_id(self, supplier_offer_id):
        """Sets the supplier_offer_id of this EventOfferResponseItemSchema.

        Unique identifier for the supplier’s offer.  # noqa: E501

        :param supplier_offer_id: The supplier_offer_id of this EventOfferResponseItemSchema.  # noqa: E501
        :type: str
        """

        self._supplier_offer_id = supplier_offer_id

    @property
    def offer_index(self):
        """Gets the offer_index of this EventOfferResponseItemSchema.  # noqa: E501

        Index of the offer for sorting purposes.  # noqa: E501

        :return: The offer_index of this EventOfferResponseItemSchema.  # noqa: E501
        :rtype: float
        """
        return self._offer_index

    @offer_index.setter
    def offer_index(self, offer_index):
        """Sets the offer_index of this EventOfferResponseItemSchema.

        Index of the offer for sorting purposes.  # noqa: E501

        :param offer_index: The offer_index of this EventOfferResponseItemSchema.  # noqa: E501
        :type: float
        """

        self._offer_index = offer_index

    @property
    def offer_tax(self):
        """Gets the offer_tax of this EventOfferResponseItemSchema.  # noqa: E501

        Tax applied to the offer.  # noqa: E501

        :return: The offer_tax of this EventOfferResponseItemSchema.  # noqa: E501
        :rtype: float
        """
        return self._offer_tax

    @offer_tax.setter
    def offer_tax(self, offer_tax):
        """Sets the offer_tax of this EventOfferResponseItemSchema.

        Tax applied to the offer.  # noqa: E501

        :param offer_tax: The offer_tax of this EventOfferResponseItemSchema.  # noqa: E501
        :type: float
        """

        self._offer_tax = offer_tax

    @property
    def offer_price(self):
        """Gets the offer_price of this EventOfferResponseItemSchema.  # noqa: E501

        Price of the offer.  # noqa: E501

        :return: The offer_price of this EventOfferResponseItemSchema.  # noqa: E501
        :rtype: float
        """
        return self._offer_price

    @offer_price.setter
    def offer_price(self, offer_price):
        """Sets the offer_price of this EventOfferResponseItemSchema.

        Price of the offer.  # noqa: E501

        :param offer_price: The offer_price of this EventOfferResponseItemSchema.  # noqa: E501
        :type: float
        """

        self._offer_price = offer_price

    @property
    def offer_currency(self):
        """Gets the offer_currency of this EventOfferResponseItemSchema.  # noqa: E501

        Currency of the offer price.  # noqa: E501

        :return: The offer_currency of this EventOfferResponseItemSchema.  # noqa: E501
        :rtype: str
        """
        return self._offer_currency

    @offer_currency.setter
    def offer_currency(self, offer_currency):
        """Sets the offer_currency of this EventOfferResponseItemSchema.

        Currency of the offer price.  # noqa: E501

        :param offer_currency: The offer_currency of this EventOfferResponseItemSchema.  # noqa: E501
        :type: str
        """

        self._offer_currency = offer_currency

    @property
    def offer_cancelation_policies(self):
        """Gets the offer_cancelation_policies of this EventOfferResponseItemSchema.  # noqa: E501

        Cancellation policies applicable to the offer.  # noqa: E501

        :return: The offer_cancelation_policies of this EventOfferResponseItemSchema.  # noqa: E501
        :rtype: str
        """
        return self._offer_cancelation_policies

    @offer_cancelation_policies.setter
    def offer_cancelation_policies(self, offer_cancelation_policies):
        """Sets the offer_cancelation_policies of this EventOfferResponseItemSchema.

        Cancellation policies applicable to the offer.  # noqa: E501

        :param offer_cancelation_policies: The offer_cancelation_policies of this EventOfferResponseItemSchema.  # noqa: E501
        :type: str
        """

        self._offer_cancelation_policies = offer_cancelation_policies

    @property
    def _date(self):
        """Gets the _date of this EventOfferResponseItemSchema.  # noqa: E501

        Date of the event.  # noqa: E501

        :return: The _date of this EventOfferResponseItemSchema.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this EventOfferResponseItemSchema.

        Date of the event.  # noqa: E501

        :param _date: The _date of this EventOfferResponseItemSchema.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def adults(self):
        """Gets the adults of this EventOfferResponseItemSchema.  # noqa: E501

        Number of adults involved in the event.  # noqa: E501

        :return: The adults of this EventOfferResponseItemSchema.  # noqa: E501
        :rtype: float
        """
        return self._adults

    @adults.setter
    def adults(self, adults):
        """Sets the adults of this EventOfferResponseItemSchema.

        Number of adults involved in the event.  # noqa: E501

        :param adults: The adults of this EventOfferResponseItemSchema.  # noqa: E501
        :type: float
        """

        self._adults = adults

    @property
    def children(self):
        """Gets the children of this EventOfferResponseItemSchema.  # noqa: E501

        Number of children involved in the event.  # noqa: E501

        :return: The children of this EventOfferResponseItemSchema.  # noqa: E501
        :rtype: float
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this EventOfferResponseItemSchema.

        Number of children involved in the event.  # noqa: E501

        :param children: The children of this EventOfferResponseItemSchema.  # noqa: E501
        :type: float
        """

        self._children = children

    @property
    def event_name(self):
        """Gets the event_name of this EventOfferResponseItemSchema.  # noqa: E501

        Name of the event.  # noqa: E501

        :return: The event_name of this EventOfferResponseItemSchema.  # noqa: E501
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this EventOfferResponseItemSchema.

        Name of the event.  # noqa: E501

        :param event_name: The event_name of this EventOfferResponseItemSchema.  # noqa: E501
        :type: str
        """

        self._event_name = event_name

    @property
    def event_description(self):
        """Gets the event_description of this EventOfferResponseItemSchema.  # noqa: E501

        Description of the event.  # noqa: E501

        :return: The event_description of this EventOfferResponseItemSchema.  # noqa: E501
        :rtype: str
        """
        return self._event_description

    @event_description.setter
    def event_description(self, event_description):
        """Sets the event_description of this EventOfferResponseItemSchema.

        Description of the event.  # noqa: E501

        :param event_description: The event_description of this EventOfferResponseItemSchema.  # noqa: E501
        :type: str
        """

        self._event_description = event_description

    @property
    def event_address(self):
        """Gets the event_address of this EventOfferResponseItemSchema.  # noqa: E501

        Address where the event will take place.  # noqa: E501

        :return: The event_address of this EventOfferResponseItemSchema.  # noqa: E501
        :rtype: str
        """
        return self._event_address

    @event_address.setter
    def event_address(self, event_address):
        """Sets the event_address of this EventOfferResponseItemSchema.

        Address where the event will take place.  # noqa: E501

        :param event_address: The event_address of this EventOfferResponseItemSchema.  # noqa: E501
        :type: str
        """

        self._event_address = event_address

    @property
    def event_latitude(self):
        """Gets the event_latitude of this EventOfferResponseItemSchema.  # noqa: E501

        Latitude of the event location.  # noqa: E501

        :return: The event_latitude of this EventOfferResponseItemSchema.  # noqa: E501
        :rtype: float
        """
        return self._event_latitude

    @event_latitude.setter
    def event_latitude(self, event_latitude):
        """Sets the event_latitude of this EventOfferResponseItemSchema.

        Latitude of the event location.  # noqa: E501

        :param event_latitude: The event_latitude of this EventOfferResponseItemSchema.  # noqa: E501
        :type: float
        """

        self._event_latitude = event_latitude

    @property
    def event_longitude(self):
        """Gets the event_longitude of this EventOfferResponseItemSchema.  # noqa: E501

        Longitude of the event location.  # noqa: E501

        :return: The event_longitude of this EventOfferResponseItemSchema.  # noqa: E501
        :rtype: float
        """
        return self._event_longitude

    @event_longitude.setter
    def event_longitude(self, event_longitude):
        """Sets the event_longitude of this EventOfferResponseItemSchema.

        Longitude of the event location.  # noqa: E501

        :param event_longitude: The event_longitude of this EventOfferResponseItemSchema.  # noqa: E501
        :type: float
        """

        self._event_longitude = event_longitude

    @property
    def event_distance(self):
        """Gets the event_distance of this EventOfferResponseItemSchema.  # noqa: E501

        Distance to the event from a reference point.  # noqa: E501

        :return: The event_distance of this EventOfferResponseItemSchema.  # noqa: E501
        :rtype: float
        """
        return self._event_distance

    @event_distance.setter
    def event_distance(self, event_distance):
        """Sets the event_distance of this EventOfferResponseItemSchema.

        Distance to the event from a reference point.  # noqa: E501

        :param event_distance: The event_distance of this EventOfferResponseItemSchema.  # noqa: E501
        :type: float
        """

        self._event_distance = event_distance

    @property
    def event_distance_metric(self):
        """Gets the event_distance_metric of this EventOfferResponseItemSchema.  # noqa: E501

        Metric used to measure the distance to the event.  # noqa: E501

        :return: The event_distance_metric of this EventOfferResponseItemSchema.  # noqa: E501
        :rtype: str
        """
        return self._event_distance_metric

    @event_distance_metric.setter
    def event_distance_metric(self, event_distance_metric):
        """Sets the event_distance_metric of this EventOfferResponseItemSchema.

        Metric used to measure the distance to the event.  # noqa: E501

        :param event_distance_metric: The event_distance_metric of this EventOfferResponseItemSchema.  # noqa: E501
        :type: str
        """

        self._event_distance_metric = event_distance_metric

    @property
    def event_images(self):
        """Gets the event_images of this EventOfferResponseItemSchema.  # noqa: E501

        Images of the event.  # noqa: E501

        :return: The event_images of this EventOfferResponseItemSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._event_images

    @event_images.setter
    def event_images(self, event_images):
        """Sets the event_images of this EventOfferResponseItemSchema.

        Images of the event.  # noqa: E501

        :param event_images: The event_images of this EventOfferResponseItemSchema.  # noqa: E501
        :type: list[str]
        """

        self._event_images = event_images

    @property
    def event_rating(self):
        """Gets the event_rating of this EventOfferResponseItemSchema.  # noqa: E501

        Rating of the event.  # noqa: E501

        :return: The event_rating of this EventOfferResponseItemSchema.  # noqa: E501
        :rtype: float
        """
        return self._event_rating

    @event_rating.setter
    def event_rating(self, event_rating):
        """Sets the event_rating of this EventOfferResponseItemSchema.

        Rating of the event.  # noqa: E501

        :param event_rating: The event_rating of this EventOfferResponseItemSchema.  # noqa: E501
        :type: float
        """

        self._event_rating = event_rating

    @property
    def event_reviews(self):
        """Gets the event_reviews of this EventOfferResponseItemSchema.  # noqa: E501

        Reviews of the event.  # noqa: E501

        :return: The event_reviews of this EventOfferResponseItemSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._event_reviews

    @event_reviews.setter
    def event_reviews(self, event_reviews):
        """Sets the event_reviews of this EventOfferResponseItemSchema.

        Reviews of the event.  # noqa: E501

        :param event_reviews: The event_reviews of this EventOfferResponseItemSchema.  # noqa: E501
        :type: list[str]
        """

        self._event_reviews = event_reviews

    @property
    def event_venue(self):
        """Gets the event_venue of this EventOfferResponseItemSchema.  # noqa: E501

        Venue where the event will take place.  # noqa: E501

        :return: The event_venue of this EventOfferResponseItemSchema.  # noqa: E501
        :rtype: str
        """
        return self._event_venue

    @event_venue.setter
    def event_venue(self, event_venue):
        """Sets the event_venue of this EventOfferResponseItemSchema.

        Venue where the event will take place.  # noqa: E501

        :param event_venue: The event_venue of this EventOfferResponseItemSchema.  # noqa: E501
        :type: str
        """

        self._event_venue = event_venue

    @property
    def event_venue_capacity(self):
        """Gets the event_venue_capacity of this EventOfferResponseItemSchema.  # noqa: E501

        Capacity of the venue.  # noqa: E501

        :return: The event_venue_capacity of this EventOfferResponseItemSchema.  # noqa: E501
        :rtype: float
        """
        return self._event_venue_capacity

    @event_venue_capacity.setter
    def event_venue_capacity(self, event_venue_capacity):
        """Sets the event_venue_capacity of this EventOfferResponseItemSchema.

        Capacity of the venue.  # noqa: E501

        :param event_venue_capacity: The event_venue_capacity of this EventOfferResponseItemSchema.  # noqa: E501
        :type: float
        """

        self._event_venue_capacity = event_venue_capacity

    @property
    def event_performers(self):
        """Gets the event_performers of this EventOfferResponseItemSchema.  # noqa: E501

        Performers at the event.  # noqa: E501

        :return: The event_performers of this EventOfferResponseItemSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._event_performers

    @event_performers.setter
    def event_performers(self, event_performers):
        """Sets the event_performers of this EventOfferResponseItemSchema.

        Performers at the event.  # noqa: E501

        :param event_performers: The event_performers of this EventOfferResponseItemSchema.  # noqa: E501
        :type: list[str]
        """

        self._event_performers = event_performers

    @property
    def event_subcategories(self):
        """Gets the event_subcategories of this EventOfferResponseItemSchema.  # noqa: E501

        Subcategories of the event.  # noqa: E501

        :return: The event_subcategories of this EventOfferResponseItemSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._event_subcategories

    @event_subcategories.setter
    def event_subcategories(self, event_subcategories):
        """Sets the event_subcategories of this EventOfferResponseItemSchema.

        Subcategories of the event.  # noqa: E501

        :param event_subcategories: The event_subcategories of this EventOfferResponseItemSchema.  # noqa: E501
        :type: list[str]
        """

        self._event_subcategories = event_subcategories

    @property
    def booking_questions(self):
        """Gets the booking_questions of this EventOfferResponseItemSchema.  # noqa: E501

        Questions related to booking the event.  # noqa: E501

        :return: The booking_questions of this EventOfferResponseItemSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._booking_questions

    @booking_questions.setter
    def booking_questions(self, booking_questions):
        """Sets the booking_questions of this EventOfferResponseItemSchema.

        Questions related to booking the event.  # noqa: E501

        :param booking_questions: The booking_questions of this EventOfferResponseItemSchema.  # noqa: E501
        :type: list[str]
        """

        self._booking_questions = booking_questions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventOfferResponseItemSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventOfferResponseItemSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
