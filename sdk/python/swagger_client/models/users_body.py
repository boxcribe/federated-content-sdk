# coding: utf-8

"""
    Federated Content API

    Welcome to the Federated Content API following Open API Specification (Version 3.0.0)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UsersBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_id': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'password': 'str',
        'phone_number': 'str',
        'phone_prefix': 'str',
        'country': 'str',
        'image': 'str',
        'status': 'str'
    }

    attribute_map = {
        'company_id': 'company_id',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'email': 'email',
        'password': 'password',
        'phone_number': 'phone_number',
        'phone_prefix': 'phone_prefix',
        'country': 'country',
        'image': 'image',
        'status': 'status'
    }

    def __init__(self, company_id=None, first_name=None, last_name=None, email=None, password=None, phone_number=None, phone_prefix=None, country=None, image=None, status=None):  # noqa: E501
        """UsersBody - a model defined in Swagger"""  # noqa: E501
        self._company_id = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self._password = None
        self._phone_number = None
        self._phone_prefix = None
        self._country = None
        self._image = None
        self._status = None
        self.discriminator = None
        self.company_id = company_id
        self.first_name = first_name
        self.last_name = last_name
        self.email = email
        self.password = password
        if phone_number is not None:
            self.phone_number = phone_number
        if phone_prefix is not None:
            self.phone_prefix = phone_prefix
        if country is not None:
            self.country = country
        if image is not None:
            self.image = image
        if status is not None:
            self.status = status

    @property
    def company_id(self):
        """Gets the company_id of this UsersBody.  # noqa: E501


        :return: The company_id of this UsersBody.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this UsersBody.


        :param company_id: The company_id of this UsersBody.  # noqa: E501
        :type: str
        """
        if company_id is None:
            raise ValueError("Invalid value for `company_id`, must not be `None`")  # noqa: E501

        self._company_id = company_id

    @property
    def first_name(self):
        """Gets the first_name of this UsersBody.  # noqa: E501


        :return: The first_name of this UsersBody.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UsersBody.


        :param first_name: The first_name of this UsersBody.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UsersBody.  # noqa: E501


        :return: The last_name of this UsersBody.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UsersBody.


        :param last_name: The last_name of this UsersBody.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this UsersBody.  # noqa: E501

        must be unique  # noqa: E501

        :return: The email of this UsersBody.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UsersBody.

        must be unique  # noqa: E501

        :param email: The email of this UsersBody.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def password(self):
        """Gets the password of this UsersBody.  # noqa: E501

        At least one number and one letter  # noqa: E501

        :return: The password of this UsersBody.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UsersBody.

        At least one number and one letter  # noqa: E501

        :param password: The password of this UsersBody.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def phone_number(self):
        """Gets the phone_number of this UsersBody.  # noqa: E501


        :return: The phone_number of this UsersBody.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this UsersBody.


        :param phone_number: The phone_number of this UsersBody.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def phone_prefix(self):
        """Gets the phone_prefix of this UsersBody.  # noqa: E501


        :return: The phone_prefix of this UsersBody.  # noqa: E501
        :rtype: str
        """
        return self._phone_prefix

    @phone_prefix.setter
    def phone_prefix(self, phone_prefix):
        """Sets the phone_prefix of this UsersBody.


        :param phone_prefix: The phone_prefix of this UsersBody.  # noqa: E501
        :type: str
        """

        self._phone_prefix = phone_prefix

    @property
    def country(self):
        """Gets the country of this UsersBody.  # noqa: E501


        :return: The country of this UsersBody.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this UsersBody.


        :param country: The country of this UsersBody.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def image(self):
        """Gets the image of this UsersBody.  # noqa: E501


        :return: The image of this UsersBody.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this UsersBody.


        :param image: The image of this UsersBody.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def status(self):
        """Gets the status of this UsersBody.  # noqa: E501


        :return: The status of this UsersBody.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UsersBody.


        :param status: The status of this UsersBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["Active", "Inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UsersBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsersBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
