# coding: utf-8

"""
    Federated Content API

    Welcome to the Federated Content API following Open API Specification (Version 3.0.0)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SchemasBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tenant_id': 'str',
        'category_id': 'str',
        'name': 'str',
        'slug': 'str',
        'status': 'str',
        'system': 'bool',
        'endpoint': 'str',
        'endpoint_name': 'str',
        'type': 'str',
        'method': 'str',
        'headers': 'dict(str, str)',
        'query': 'dict(str, str)'
    }

    attribute_map = {
        'tenant_id': 'tenant_id',
        'category_id': 'category_id',
        'name': 'name',
        'slug': 'slug',
        'status': 'status',
        'system': 'system',
        'endpoint': 'endpoint',
        'endpoint_name': 'endpoint_name',
        'type': 'type',
        'method': 'method',
        'headers': 'headers',
        'query': 'query'
    }

    def __init__(self, tenant_id=None, category_id=None, name=None, slug=None, status=None, system=None, endpoint=None, endpoint_name=None, type=None, method=None, headers=None, query=None):  # noqa: E501
        """SchemasBody - a model defined in Swagger"""  # noqa: E501
        self._tenant_id = None
        self._category_id = None
        self._name = None
        self._slug = None
        self._status = None
        self._system = None
        self._endpoint = None
        self._endpoint_name = None
        self._type = None
        self._method = None
        self._headers = None
        self._query = None
        self.discriminator = None
        if tenant_id is not None:
            self.tenant_id = tenant_id
        self.category_id = category_id
        self.name = name
        self.slug = slug
        if status is not None:
            self.status = status
        if system is not None:
            self.system = system
        if endpoint is not None:
            self.endpoint = endpoint
        if endpoint_name is not None:
            self.endpoint_name = endpoint_name
        self.type = type
        if method is not None:
            self.method = method
        if headers is not None:
            self.headers = headers
        if query is not None:
            self.query = query

    @property
    def tenant_id(self):
        """Gets the tenant_id of this SchemasBody.  # noqa: E501

        The unique identifier of the tenant  # noqa: E501

        :return: The tenant_id of this SchemasBody.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this SchemasBody.

        The unique identifier of the tenant  # noqa: E501

        :param tenant_id: The tenant_id of this SchemasBody.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def category_id(self):
        """Gets the category_id of this SchemasBody.  # noqa: E501

        The unique identifier of the category  # noqa: E501

        :return: The category_id of this SchemasBody.  # noqa: E501
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this SchemasBody.

        The unique identifier of the category  # noqa: E501

        :param category_id: The category_id of this SchemasBody.  # noqa: E501
        :type: str
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")  # noqa: E501

        self._category_id = category_id

    @property
    def name(self):
        """Gets the name of this SchemasBody.  # noqa: E501

        Name of the schema  # noqa: E501

        :return: The name of this SchemasBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SchemasBody.

        Name of the schema  # noqa: E501

        :param name: The name of this SchemasBody.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this SchemasBody.  # noqa: E501

        Slug for the schema  # noqa: E501

        :return: The slug of this SchemasBody.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this SchemasBody.

        Slug for the schema  # noqa: E501

        :param slug: The slug of this SchemasBody.  # noqa: E501
        :type: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501

        self._slug = slug

    @property
    def status(self):
        """Gets the status of this SchemasBody.  # noqa: E501

        Status of the schema  # noqa: E501

        :return: The status of this SchemasBody.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SchemasBody.

        Status of the schema  # noqa: E501

        :param status: The status of this SchemasBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["Active", "Inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def system(self):
        """Gets the system of this SchemasBody.  # noqa: E501

        Whether the schema is a system schema  # noqa: E501

        :return: The system of this SchemasBody.  # noqa: E501
        :rtype: bool
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this SchemasBody.

        Whether the schema is a system schema  # noqa: E501

        :param system: The system of this SchemasBody.  # noqa: E501
        :type: bool
        """

        self._system = system

    @property
    def endpoint(self):
        """Gets the endpoint of this SchemasBody.  # noqa: E501

        Endpoint URL  # noqa: E501

        :return: The endpoint of this SchemasBody.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this SchemasBody.

        Endpoint URL  # noqa: E501

        :param endpoint: The endpoint of this SchemasBody.  # noqa: E501
        :type: str
        """

        self._endpoint = endpoint

    @property
    def endpoint_name(self):
        """Gets the endpoint_name of this SchemasBody.  # noqa: E501

        Endpoint name (Group name)  # noqa: E501

        :return: The endpoint_name of this SchemasBody.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_name

    @endpoint_name.setter
    def endpoint_name(self, endpoint_name):
        """Sets the endpoint_name of this SchemasBody.

        Endpoint name (Group name)  # noqa: E501

        :param endpoint_name: The endpoint_name of this SchemasBody.  # noqa: E501
        :type: str
        """

        self._endpoint_name = endpoint_name

    @property
    def type(self):
        """Gets the type of this SchemasBody.  # noqa: E501

        Type of the schema (Request or Response)  # noqa: E501

        :return: The type of this SchemasBody.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SchemasBody.

        Type of the schema (Request or Response)  # noqa: E501

        :param type: The type of this SchemasBody.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["Request", "Response"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def method(self):
        """Gets the method of this SchemasBody.  # noqa: E501

        HTTP method for Request types  # noqa: E501

        :return: The method of this SchemasBody.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this SchemasBody.

        HTTP method for Request types  # noqa: E501

        :param method: The method of this SchemasBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["GET", "POST", "PATCH", "DELETE"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def headers(self):
        """Gets the headers of this SchemasBody.  # noqa: E501

        Headers for Request type, stored in JSON format  # noqa: E501

        :return: The headers of this SchemasBody.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this SchemasBody.

        Headers for Request type, stored in JSON format  # noqa: E501

        :param headers: The headers of this SchemasBody.  # noqa: E501
        :type: dict(str, str)
        """

        self._headers = headers

    @property
    def query(self):
        """Gets the query of this SchemasBody.  # noqa: E501

        Query parameters for Request type, stored in JSON format  # noqa: E501

        :return: The query of this SchemasBody.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this SchemasBody.

        Query parameters for Request type, stored in JSON format  # noqa: E501

        :param query: The query of this SchemasBody.  # noqa: E501
        :type: dict(str, str)
        """

        self._query = query

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SchemasBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SchemasBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
