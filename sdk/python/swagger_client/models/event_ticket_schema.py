# coding: utf-8

"""
    Federated Content API

    Welcome to the Federated Content API following Open API Specification (Version 3.0.0)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EventTicketSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ticket_id': 'str',
        'supplier_ticket_id': 'str',
        'ticket_index': 'float',
        'ticket_tax': 'float',
        'ticket_price': 'float',
        'ticket_currency': 'str',
        'ticket_cancellation_policies': 'str',
        'ticket_section': 'str',
        'ticket_row': 'str',
        'ticket_seat': 'str',
        'ticket_description': 'str',
        'ticket_delivery_options': 'list[str]',
        'ticket_quantities': 'list[int]',
        'booking_questions': 'list[str]'
    }

    attribute_map = {
        'ticket_id': 'ticket_id',
        'supplier_ticket_id': 'supplier_ticket_id',
        'ticket_index': 'ticket_index',
        'ticket_tax': 'ticket_tax',
        'ticket_price': 'ticket_price',
        'ticket_currency': 'ticket_currency',
        'ticket_cancellation_policies': 'ticket_cancellation_policies',
        'ticket_section': 'ticket_section',
        'ticket_row': 'ticket_row',
        'ticket_seat': 'ticket_seat',
        'ticket_description': 'ticket_description',
        'ticket_delivery_options': 'ticket_delivery_options',
        'ticket_quantities': 'ticket_quantities',
        'booking_questions': 'booking_questions'
    }

    def __init__(self, ticket_id=None, supplier_ticket_id=None, ticket_index=None, ticket_tax=None, ticket_price=None, ticket_currency=None, ticket_cancellation_policies=None, ticket_section=None, ticket_row=None, ticket_seat=None, ticket_description=None, ticket_delivery_options=None, ticket_quantities=None, booking_questions=None):  # noqa: E501
        """EventTicketSchema - a model defined in Swagger"""  # noqa: E501
        self._ticket_id = None
        self._supplier_ticket_id = None
        self._ticket_index = None
        self._ticket_tax = None
        self._ticket_price = None
        self._ticket_currency = None
        self._ticket_cancellation_policies = None
        self._ticket_section = None
        self._ticket_row = None
        self._ticket_seat = None
        self._ticket_description = None
        self._ticket_delivery_options = None
        self._ticket_quantities = None
        self._booking_questions = None
        self.discriminator = None
        if ticket_id is not None:
            self.ticket_id = ticket_id
        if supplier_ticket_id is not None:
            self.supplier_ticket_id = supplier_ticket_id
        if ticket_index is not None:
            self.ticket_index = ticket_index
        if ticket_tax is not None:
            self.ticket_tax = ticket_tax
        if ticket_price is not None:
            self.ticket_price = ticket_price
        if ticket_currency is not None:
            self.ticket_currency = ticket_currency
        if ticket_cancellation_policies is not None:
            self.ticket_cancellation_policies = ticket_cancellation_policies
        if ticket_section is not None:
            self.ticket_section = ticket_section
        if ticket_row is not None:
            self.ticket_row = ticket_row
        if ticket_seat is not None:
            self.ticket_seat = ticket_seat
        if ticket_description is not None:
            self.ticket_description = ticket_description
        if ticket_delivery_options is not None:
            self.ticket_delivery_options = ticket_delivery_options
        if ticket_quantities is not None:
            self.ticket_quantities = ticket_quantities
        if booking_questions is not None:
            self.booking_questions = booking_questions

    @property
    def ticket_id(self):
        """Gets the ticket_id of this EventTicketSchema.  # noqa: E501

        Unique identifier for the ticket.  # noqa: E501

        :return: The ticket_id of this EventTicketSchema.  # noqa: E501
        :rtype: str
        """
        return self._ticket_id

    @ticket_id.setter
    def ticket_id(self, ticket_id):
        """Sets the ticket_id of this EventTicketSchema.

        Unique identifier for the ticket.  # noqa: E501

        :param ticket_id: The ticket_id of this EventTicketSchema.  # noqa: E501
        :type: str
        """

        self._ticket_id = ticket_id

    @property
    def supplier_ticket_id(self):
        """Gets the supplier_ticket_id of this EventTicketSchema.  # noqa: E501

        Identifier for the ticket provided by the supplier.  # noqa: E501

        :return: The supplier_ticket_id of this EventTicketSchema.  # noqa: E501
        :rtype: str
        """
        return self._supplier_ticket_id

    @supplier_ticket_id.setter
    def supplier_ticket_id(self, supplier_ticket_id):
        """Sets the supplier_ticket_id of this EventTicketSchema.

        Identifier for the ticket provided by the supplier.  # noqa: E501

        :param supplier_ticket_id: The supplier_ticket_id of this EventTicketSchema.  # noqa: E501
        :type: str
        """

        self._supplier_ticket_id = supplier_ticket_id

    @property
    def ticket_index(self):
        """Gets the ticket_index of this EventTicketSchema.  # noqa: E501

        Index number of the ticket for ordering.  # noqa: E501

        :return: The ticket_index of this EventTicketSchema.  # noqa: E501
        :rtype: float
        """
        return self._ticket_index

    @ticket_index.setter
    def ticket_index(self, ticket_index):
        """Sets the ticket_index of this EventTicketSchema.

        Index number of the ticket for ordering.  # noqa: E501

        :param ticket_index: The ticket_index of this EventTicketSchema.  # noqa: E501
        :type: float
        """

        self._ticket_index = ticket_index

    @property
    def ticket_tax(self):
        """Gets the ticket_tax of this EventTicketSchema.  # noqa: E501

        Applicable tax on the ticket price.  # noqa: E501

        :return: The ticket_tax of this EventTicketSchema.  # noqa: E501
        :rtype: float
        """
        return self._ticket_tax

    @ticket_tax.setter
    def ticket_tax(self, ticket_tax):
        """Sets the ticket_tax of this EventTicketSchema.

        Applicable tax on the ticket price.  # noqa: E501

        :param ticket_tax: The ticket_tax of this EventTicketSchema.  # noqa: E501
        :type: float
        """

        self._ticket_tax = ticket_tax

    @property
    def ticket_price(self):
        """Gets the ticket_price of this EventTicketSchema.  # noqa: E501

        Price of the ticket.  # noqa: E501

        :return: The ticket_price of this EventTicketSchema.  # noqa: E501
        :rtype: float
        """
        return self._ticket_price

    @ticket_price.setter
    def ticket_price(self, ticket_price):
        """Sets the ticket_price of this EventTicketSchema.

        Price of the ticket.  # noqa: E501

        :param ticket_price: The ticket_price of this EventTicketSchema.  # noqa: E501
        :type: float
        """

        self._ticket_price = ticket_price

    @property
    def ticket_currency(self):
        """Gets the ticket_currency of this EventTicketSchema.  # noqa: E501

        Currency in which the ticket is priced.  # noqa: E501

        :return: The ticket_currency of this EventTicketSchema.  # noqa: E501
        :rtype: str
        """
        return self._ticket_currency

    @ticket_currency.setter
    def ticket_currency(self, ticket_currency):
        """Sets the ticket_currency of this EventTicketSchema.

        Currency in which the ticket is priced.  # noqa: E501

        :param ticket_currency: The ticket_currency of this EventTicketSchema.  # noqa: E501
        :type: str
        """

        self._ticket_currency = ticket_currency

    @property
    def ticket_cancellation_policies(self):
        """Gets the ticket_cancellation_policies of this EventTicketSchema.  # noqa: E501

        Policies regarding ticket cancellation.  # noqa: E501

        :return: The ticket_cancellation_policies of this EventTicketSchema.  # noqa: E501
        :rtype: str
        """
        return self._ticket_cancellation_policies

    @ticket_cancellation_policies.setter
    def ticket_cancellation_policies(self, ticket_cancellation_policies):
        """Sets the ticket_cancellation_policies of this EventTicketSchema.

        Policies regarding ticket cancellation.  # noqa: E501

        :param ticket_cancellation_policies: The ticket_cancellation_policies of this EventTicketSchema.  # noqa: E501
        :type: str
        """

        self._ticket_cancellation_policies = ticket_cancellation_policies

    @property
    def ticket_section(self):
        """Gets the ticket_section of this EventTicketSchema.  # noqa: E501

        Section of the venue where the seat is located.  # noqa: E501

        :return: The ticket_section of this EventTicketSchema.  # noqa: E501
        :rtype: str
        """
        return self._ticket_section

    @ticket_section.setter
    def ticket_section(self, ticket_section):
        """Sets the ticket_section of this EventTicketSchema.

        Section of the venue where the seat is located.  # noqa: E501

        :param ticket_section: The ticket_section of this EventTicketSchema.  # noqa: E501
        :type: str
        """

        self._ticket_section = ticket_section

    @property
    def ticket_row(self):
        """Gets the ticket_row of this EventTicketSchema.  # noqa: E501

        Row of the section where the seat is located.  # noqa: E501

        :return: The ticket_row of this EventTicketSchema.  # noqa: E501
        :rtype: str
        """
        return self._ticket_row

    @ticket_row.setter
    def ticket_row(self, ticket_row):
        """Sets the ticket_row of this EventTicketSchema.

        Row of the section where the seat is located.  # noqa: E501

        :param ticket_row: The ticket_row of this EventTicketSchema.  # noqa: E501
        :type: str
        """

        self._ticket_row = ticket_row

    @property
    def ticket_seat(self):
        """Gets the ticket_seat of this EventTicketSchema.  # noqa: E501

        Specific seat number.  # noqa: E501

        :return: The ticket_seat of this EventTicketSchema.  # noqa: E501
        :rtype: str
        """
        return self._ticket_seat

    @ticket_seat.setter
    def ticket_seat(self, ticket_seat):
        """Sets the ticket_seat of this EventTicketSchema.

        Specific seat number.  # noqa: E501

        :param ticket_seat: The ticket_seat of this EventTicketSchema.  # noqa: E501
        :type: str
        """

        self._ticket_seat = ticket_seat

    @property
    def ticket_description(self):
        """Gets the ticket_description of this EventTicketSchema.  # noqa: E501

        Description of the ticket.  # noqa: E501

        :return: The ticket_description of this EventTicketSchema.  # noqa: E501
        :rtype: str
        """
        return self._ticket_description

    @ticket_description.setter
    def ticket_description(self, ticket_description):
        """Sets the ticket_description of this EventTicketSchema.

        Description of the ticket.  # noqa: E501

        :param ticket_description: The ticket_description of this EventTicketSchema.  # noqa: E501
        :type: str
        """

        self._ticket_description = ticket_description

    @property
    def ticket_delivery_options(self):
        """Gets the ticket_delivery_options of this EventTicketSchema.  # noqa: E501

        Available options for ticket delivery.  # noqa: E501

        :return: The ticket_delivery_options of this EventTicketSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._ticket_delivery_options

    @ticket_delivery_options.setter
    def ticket_delivery_options(self, ticket_delivery_options):
        """Sets the ticket_delivery_options of this EventTicketSchema.

        Available options for ticket delivery.  # noqa: E501

        :param ticket_delivery_options: The ticket_delivery_options of this EventTicketSchema.  # noqa: E501
        :type: list[str]
        """

        self._ticket_delivery_options = ticket_delivery_options

    @property
    def ticket_quantities(self):
        """Gets the ticket_quantities of this EventTicketSchema.  # noqa: E501

        Quantities of tickets available for purchase.  # noqa: E501

        :return: The ticket_quantities of this EventTicketSchema.  # noqa: E501
        :rtype: list[int]
        """
        return self._ticket_quantities

    @ticket_quantities.setter
    def ticket_quantities(self, ticket_quantities):
        """Sets the ticket_quantities of this EventTicketSchema.

        Quantities of tickets available for purchase.  # noqa: E501

        :param ticket_quantities: The ticket_quantities of this EventTicketSchema.  # noqa: E501
        :type: list[int]
        """

        self._ticket_quantities = ticket_quantities

    @property
    def booking_questions(self):
        """Gets the booking_questions of this EventTicketSchema.  # noqa: E501

        Questions related to booking the event.  # noqa: E501

        :return: The booking_questions of this EventTicketSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._booking_questions

    @booking_questions.setter
    def booking_questions(self, booking_questions):
        """Sets the booking_questions of this EventTicketSchema.

        Questions related to booking the event.  # noqa: E501

        :param booking_questions: The booking_questions of this EventTicketSchema.  # noqa: E501
        :type: list[str]
        """

        self._booking_questions = booking_questions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventTicketSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventTicketSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
