# coding: utf-8

"""
    Federated Content API

    Welcome to the Federated Content API following Open API Specification (Version 3.0.0)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ToursAndActivitiesOfferDetailsSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'offer_id': 'str',
        'supplier_offer_id': 'str',
        'offer_index': 'int',
        'offer_tax': 'float',
        'offer_price': 'float',
        'offer_currency': 'str',
        'offer_cancelation_policies': 'str',
        '_date': 'date',
        'adults': 'int',
        'children': 'int',
        'tour_name': 'str',
        'tour_description': 'str',
        'tour_address': 'str',
        'tour_latitude': 'float',
        'tour_longitude': 'float',
        'tour_distance': 'float',
        'tour_distance_metric': 'str',
        'tour_images': 'list[str]',
        'tour_rating': 'float',
        'tour_reviews': 'list[str]',
        'tour_subcategories': 'list[str]',
        'booking_questions': 'list[str]',
        'variants': 'list[ToursAndActivitiesVariantSchema]'
    }

    attribute_map = {
        'offer_id': 'offer_id',
        'supplier_offer_id': 'supplier_offer_id',
        'offer_index': 'offer_index',
        'offer_tax': 'offer_tax',
        'offer_price': 'offer_price',
        'offer_currency': 'offer_currency',
        'offer_cancelation_policies': 'offer_cancelation_policies',
        '_date': 'date',
        'adults': 'adults',
        'children': 'children',
        'tour_name': 'tour_name',
        'tour_description': 'tour_description',
        'tour_address': 'tour_address',
        'tour_latitude': 'tour_latitude',
        'tour_longitude': 'tour_longitude',
        'tour_distance': 'tour_distance',
        'tour_distance_metric': 'tour_distance_metric',
        'tour_images': 'tour_images',
        'tour_rating': 'tour_rating',
        'tour_reviews': 'tour_reviews',
        'tour_subcategories': 'tour_subcategories',
        'booking_questions': 'booking_questions',
        'variants': 'variants'
    }

    def __init__(self, offer_id=None, supplier_offer_id=None, offer_index=None, offer_tax=None, offer_price=None, offer_currency=None, offer_cancelation_policies=None, _date=None, adults=None, children=None, tour_name=None, tour_description=None, tour_address=None, tour_latitude=None, tour_longitude=None, tour_distance=None, tour_distance_metric=None, tour_images=None, tour_rating=None, tour_reviews=None, tour_subcategories=None, booking_questions=None, variants=None):  # noqa: E501
        """ToursAndActivitiesOfferDetailsSchema - a model defined in Swagger"""  # noqa: E501
        self._offer_id = None
        self._supplier_offer_id = None
        self._offer_index = None
        self._offer_tax = None
        self._offer_price = None
        self._offer_currency = None
        self._offer_cancelation_policies = None
        self.__date = None
        self._adults = None
        self._children = None
        self._tour_name = None
        self._tour_description = None
        self._tour_address = None
        self._tour_latitude = None
        self._tour_longitude = None
        self._tour_distance = None
        self._tour_distance_metric = None
        self._tour_images = None
        self._tour_rating = None
        self._tour_reviews = None
        self._tour_subcategories = None
        self._booking_questions = None
        self._variants = None
        self.discriminator = None
        if offer_id is not None:
            self.offer_id = offer_id
        if supplier_offer_id is not None:
            self.supplier_offer_id = supplier_offer_id
        if offer_index is not None:
            self.offer_index = offer_index
        if offer_tax is not None:
            self.offer_tax = offer_tax
        if offer_price is not None:
            self.offer_price = offer_price
        if offer_currency is not None:
            self.offer_currency = offer_currency
        if offer_cancelation_policies is not None:
            self.offer_cancelation_policies = offer_cancelation_policies
        if _date is not None:
            self._date = _date
        if adults is not None:
            self.adults = adults
        if children is not None:
            self.children = children
        if tour_name is not None:
            self.tour_name = tour_name
        if tour_description is not None:
            self.tour_description = tour_description
        if tour_address is not None:
            self.tour_address = tour_address
        if tour_latitude is not None:
            self.tour_latitude = tour_latitude
        if tour_longitude is not None:
            self.tour_longitude = tour_longitude
        if tour_distance is not None:
            self.tour_distance = tour_distance
        if tour_distance_metric is not None:
            self.tour_distance_metric = tour_distance_metric
        if tour_images is not None:
            self.tour_images = tour_images
        if tour_rating is not None:
            self.tour_rating = tour_rating
        if tour_reviews is not None:
            self.tour_reviews = tour_reviews
        if tour_subcategories is not None:
            self.tour_subcategories = tour_subcategories
        if booking_questions is not None:
            self.booking_questions = booking_questions
        if variants is not None:
            self.variants = variants

    @property
    def offer_id(self):
        """Gets the offer_id of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501

        Identifier of the individual offer.  # noqa: E501

        :return: The offer_id of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this ToursAndActivitiesOfferDetailsSchema.

        Identifier of the individual offer.  # noqa: E501

        :param offer_id: The offer_id of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :type: str
        """

        self._offer_id = offer_id

    @property
    def supplier_offer_id(self):
        """Gets the supplier_offer_id of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501

        Identifier provided by the supplier for the offer.  # noqa: E501

        :return: The supplier_offer_id of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :rtype: str
        """
        return self._supplier_offer_id

    @supplier_offer_id.setter
    def supplier_offer_id(self, supplier_offer_id):
        """Sets the supplier_offer_id of this ToursAndActivitiesOfferDetailsSchema.

        Identifier provided by the supplier for the offer.  # noqa: E501

        :param supplier_offer_id: The supplier_offer_id of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :type: str
        """

        self._supplier_offer_id = supplier_offer_id

    @property
    def offer_index(self):
        """Gets the offer_index of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501

        Index of the offer for ordering.  # noqa: E501

        :return: The offer_index of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :rtype: int
        """
        return self._offer_index

    @offer_index.setter
    def offer_index(self, offer_index):
        """Sets the offer_index of this ToursAndActivitiesOfferDetailsSchema.

        Index of the offer for ordering.  # noqa: E501

        :param offer_index: The offer_index of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :type: int
        """

        self._offer_index = offer_index

    @property
    def offer_tax(self):
        """Gets the offer_tax of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501

        Tax applied on the offer.  # noqa: E501

        :return: The offer_tax of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :rtype: float
        """
        return self._offer_tax

    @offer_tax.setter
    def offer_tax(self, offer_tax):
        """Sets the offer_tax of this ToursAndActivitiesOfferDetailsSchema.

        Tax applied on the offer.  # noqa: E501

        :param offer_tax: The offer_tax of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :type: float
        """

        self._offer_tax = offer_tax

    @property
    def offer_price(self):
        """Gets the offer_price of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501

        Price of the offer.  # noqa: E501

        :return: The offer_price of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :rtype: float
        """
        return self._offer_price

    @offer_price.setter
    def offer_price(self, offer_price):
        """Sets the offer_price of this ToursAndActivitiesOfferDetailsSchema.

        Price of the offer.  # noqa: E501

        :param offer_price: The offer_price of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :type: float
        """

        self._offer_price = offer_price

    @property
    def offer_currency(self):
        """Gets the offer_currency of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501

        Currency of the offer price.  # noqa: E501

        :return: The offer_currency of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :rtype: str
        """
        return self._offer_currency

    @offer_currency.setter
    def offer_currency(self, offer_currency):
        """Sets the offer_currency of this ToursAndActivitiesOfferDetailsSchema.

        Currency of the offer price.  # noqa: E501

        :param offer_currency: The offer_currency of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :type: str
        """

        self._offer_currency = offer_currency

    @property
    def offer_cancelation_policies(self):
        """Gets the offer_cancelation_policies of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501

        Cancellation policies applicable to the offer.  # noqa: E501

        :return: The offer_cancelation_policies of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :rtype: str
        """
        return self._offer_cancelation_policies

    @offer_cancelation_policies.setter
    def offer_cancelation_policies(self, offer_cancelation_policies):
        """Sets the offer_cancelation_policies of this ToursAndActivitiesOfferDetailsSchema.

        Cancellation policies applicable to the offer.  # noqa: E501

        :param offer_cancelation_policies: The offer_cancelation_policies of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :type: str
        """

        self._offer_cancelation_policies = offer_cancelation_policies

    @property
    def _date(self):
        """Gets the _date of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501

        Date of the tour.  # noqa: E501

        :return: The _date of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ToursAndActivitiesOfferDetailsSchema.

        Date of the tour.  # noqa: E501

        :param _date: The _date of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def adults(self):
        """Gets the adults of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501

        Number of adults attending.  # noqa: E501

        :return: The adults of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :rtype: int
        """
        return self._adults

    @adults.setter
    def adults(self, adults):
        """Sets the adults of this ToursAndActivitiesOfferDetailsSchema.

        Number of adults attending.  # noqa: E501

        :param adults: The adults of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :type: int
        """

        self._adults = adults

    @property
    def children(self):
        """Gets the children of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501

        Number of children attending.  # noqa: E501

        :return: The children of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :rtype: int
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this ToursAndActivitiesOfferDetailsSchema.

        Number of children attending.  # noqa: E501

        :param children: The children of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :type: int
        """

        self._children = children

    @property
    def tour_name(self):
        """Gets the tour_name of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501

        Name of the tour.  # noqa: E501

        :return: The tour_name of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :rtype: str
        """
        return self._tour_name

    @tour_name.setter
    def tour_name(self, tour_name):
        """Sets the tour_name of this ToursAndActivitiesOfferDetailsSchema.

        Name of the tour.  # noqa: E501

        :param tour_name: The tour_name of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :type: str
        """

        self._tour_name = tour_name

    @property
    def tour_description(self):
        """Gets the tour_description of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501

        Description of the tour.  # noqa: E501

        :return: The tour_description of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :rtype: str
        """
        return self._tour_description

    @tour_description.setter
    def tour_description(self, tour_description):
        """Sets the tour_description of this ToursAndActivitiesOfferDetailsSchema.

        Description of the tour.  # noqa: E501

        :param tour_description: The tour_description of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :type: str
        """

        self._tour_description = tour_description

    @property
    def tour_address(self):
        """Gets the tour_address of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501

        Address where the tour will take place.  # noqa: E501

        :return: The tour_address of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :rtype: str
        """
        return self._tour_address

    @tour_address.setter
    def tour_address(self, tour_address):
        """Sets the tour_address of this ToursAndActivitiesOfferDetailsSchema.

        Address where the tour will take place.  # noqa: E501

        :param tour_address: The tour_address of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :type: str
        """

        self._tour_address = tour_address

    @property
    def tour_latitude(self):
        """Gets the tour_latitude of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501

        Latitude for the tour location.  # noqa: E501

        :return: The tour_latitude of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :rtype: float
        """
        return self._tour_latitude

    @tour_latitude.setter
    def tour_latitude(self, tour_latitude):
        """Sets the tour_latitude of this ToursAndActivitiesOfferDetailsSchema.

        Latitude for the tour location.  # noqa: E501

        :param tour_latitude: The tour_latitude of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :type: float
        """

        self._tour_latitude = tour_latitude

    @property
    def tour_longitude(self):
        """Gets the tour_longitude of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501

        Longitude for the tour location.  # noqa: E501

        :return: The tour_longitude of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :rtype: float
        """
        return self._tour_longitude

    @tour_longitude.setter
    def tour_longitude(self, tour_longitude):
        """Sets the tour_longitude of this ToursAndActivitiesOfferDetailsSchema.

        Longitude for the tour location.  # noqa: E501

        :param tour_longitude: The tour_longitude of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :type: float
        """

        self._tour_longitude = tour_longitude

    @property
    def tour_distance(self):
        """Gets the tour_distance of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501

        Distance covered by the tour.  # noqa: E501

        :return: The tour_distance of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :rtype: float
        """
        return self._tour_distance

    @tour_distance.setter
    def tour_distance(self, tour_distance):
        """Sets the tour_distance of this ToursAndActivitiesOfferDetailsSchema.

        Distance covered by the tour.  # noqa: E501

        :param tour_distance: The tour_distance of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :type: float
        """

        self._tour_distance = tour_distance

    @property
    def tour_distance_metric(self):
        """Gets the tour_distance_metric of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501

        Metric for measuring distance (miles or kilometers).  # noqa: E501

        :return: The tour_distance_metric of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :rtype: str
        """
        return self._tour_distance_metric

    @tour_distance_metric.setter
    def tour_distance_metric(self, tour_distance_metric):
        """Sets the tour_distance_metric of this ToursAndActivitiesOfferDetailsSchema.

        Metric for measuring distance (miles or kilometers).  # noqa: E501

        :param tour_distance_metric: The tour_distance_metric of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :type: str
        """

        self._tour_distance_metric = tour_distance_metric

    @property
    def tour_images(self):
        """Gets the tour_images of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501

        Array of images related to the tour.  # noqa: E501

        :return: The tour_images of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._tour_images

    @tour_images.setter
    def tour_images(self, tour_images):
        """Sets the tour_images of this ToursAndActivitiesOfferDetailsSchema.

        Array of images related to the tour.  # noqa: E501

        :param tour_images: The tour_images of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :type: list[str]
        """

        self._tour_images = tour_images

    @property
    def tour_rating(self):
        """Gets the tour_rating of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501

        Rating of the tour.  # noqa: E501

        :return: The tour_rating of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :rtype: float
        """
        return self._tour_rating

    @tour_rating.setter
    def tour_rating(self, tour_rating):
        """Sets the tour_rating of this ToursAndActivitiesOfferDetailsSchema.

        Rating of the tour.  # noqa: E501

        :param tour_rating: The tour_rating of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :type: float
        """

        self._tour_rating = tour_rating

    @property
    def tour_reviews(self):
        """Gets the tour_reviews of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501

        Array of reviews for the tour.  # noqa: E501

        :return: The tour_reviews of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._tour_reviews

    @tour_reviews.setter
    def tour_reviews(self, tour_reviews):
        """Sets the tour_reviews of this ToursAndActivitiesOfferDetailsSchema.

        Array of reviews for the tour.  # noqa: E501

        :param tour_reviews: The tour_reviews of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :type: list[str]
        """

        self._tour_reviews = tour_reviews

    @property
    def tour_subcategories(self):
        """Gets the tour_subcategories of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501

        Subcategories of the tour.  # noqa: E501

        :return: The tour_subcategories of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._tour_subcategories

    @tour_subcategories.setter
    def tour_subcategories(self, tour_subcategories):
        """Sets the tour_subcategories of this ToursAndActivitiesOfferDetailsSchema.

        Subcategories of the tour.  # noqa: E501

        :param tour_subcategories: The tour_subcategories of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :type: list[str]
        """

        self._tour_subcategories = tour_subcategories

    @property
    def booking_questions(self):
        """Gets the booking_questions of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501

        Questions related to booking the tour.  # noqa: E501

        :return: The booking_questions of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._booking_questions

    @booking_questions.setter
    def booking_questions(self, booking_questions):
        """Sets the booking_questions of this ToursAndActivitiesOfferDetailsSchema.

        Questions related to booking the tour.  # noqa: E501

        :param booking_questions: The booking_questions of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :type: list[str]
        """

        self._booking_questions = booking_questions

    @property
    def variants(self):
        """Gets the variants of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501

        Array of ToursAndActivitiesVariantSchema.  # noqa: E501

        :return: The variants of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :rtype: list[ToursAndActivitiesVariantSchema]
        """
        return self._variants

    @variants.setter
    def variants(self, variants):
        """Sets the variants of this ToursAndActivitiesOfferDetailsSchema.

        Array of ToursAndActivitiesVariantSchema.  # noqa: E501

        :param variants: The variants of this ToursAndActivitiesOfferDetailsSchema.  # noqa: E501
        :type: list[ToursAndActivitiesVariantSchema]
        """

        self._variants = variants

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ToursAndActivitiesOfferDetailsSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ToursAndActivitiesOfferDetailsSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
