# coding: utf-8

"""
    Federated Content API

    Welcome to the Federated Content API following Open API Specification (Version 3.0.0)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Log(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'url': 'str',
        'headers': 'object',
        'request': 'object',
        'response': 'object',
        '_date': 'datetime',
        'integration_id': 'str',
        'tenant_id': 'str',
        'method': 'str',
        'endpoint_shortname': 'str',
        'response_time': 'int',
        'response_code': 'int'
    }

    attribute_map = {
        'id': 'id',
        'url': 'url',
        'headers': 'headers',
        'request': 'request',
        'response': 'response',
        '_date': 'date',
        'integration_id': 'integration_id',
        'tenant_id': 'tenant_id',
        'method': 'method',
        'endpoint_shortname': 'endpoint_shortname',
        'response_time': 'response_time',
        'response_code': 'response_code'
    }

    def __init__(self, id=None, url=None, headers=None, request=None, response=None, _date=None, integration_id=None, tenant_id=None, method=None, endpoint_shortname=None, response_time=None, response_code=None):  # noqa: E501
        """Log - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._url = None
        self._headers = None
        self._request = None
        self._response = None
        self.__date = None
        self._integration_id = None
        self._tenant_id = None
        self._method = None
        self._endpoint_shortname = None
        self._response_time = None
        self._response_code = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if url is not None:
            self.url = url
        if headers is not None:
            self.headers = headers
        if request is not None:
            self.request = request
        if response is not None:
            self.response = response
        if _date is not None:
            self._date = _date
        if integration_id is not None:
            self.integration_id = integration_id
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if method is not None:
            self.method = method
        if endpoint_shortname is not None:
            self.endpoint_shortname = endpoint_shortname
        if response_time is not None:
            self.response_time = response_time
        if response_code is not None:
            self.response_code = response_code

    @property
    def id(self):
        """Gets the id of this Log.  # noqa: E501


        :return: The id of this Log.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Log.


        :param id: The id of this Log.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def url(self):
        """Gets the url of this Log.  # noqa: E501


        :return: The url of this Log.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Log.


        :param url: The url of this Log.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def headers(self):
        """Gets the headers of this Log.  # noqa: E501


        :return: The headers of this Log.  # noqa: E501
        :rtype: object
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this Log.


        :param headers: The headers of this Log.  # noqa: E501
        :type: object
        """

        self._headers = headers

    @property
    def request(self):
        """Gets the request of this Log.  # noqa: E501


        :return: The request of this Log.  # noqa: E501
        :rtype: object
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this Log.


        :param request: The request of this Log.  # noqa: E501
        :type: object
        """

        self._request = request

    @property
    def response(self):
        """Gets the response of this Log.  # noqa: E501


        :return: The response of this Log.  # noqa: E501
        :rtype: object
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this Log.


        :param response: The response of this Log.  # noqa: E501
        :type: object
        """

        self._response = response

    @property
    def _date(self):
        """Gets the _date of this Log.  # noqa: E501


        :return: The _date of this Log.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Log.


        :param _date: The _date of this Log.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def integration_id(self):
        """Gets the integration_id of this Log.  # noqa: E501


        :return: The integration_id of this Log.  # noqa: E501
        :rtype: str
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this Log.


        :param integration_id: The integration_id of this Log.  # noqa: E501
        :type: str
        """

        self._integration_id = integration_id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this Log.  # noqa: E501


        :return: The tenant_id of this Log.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this Log.


        :param tenant_id: The tenant_id of this Log.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def method(self):
        """Gets the method of this Log.  # noqa: E501


        :return: The method of this Log.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this Log.


        :param method: The method of this Log.  # noqa: E501
        :type: str
        """
        allowed_values = ["GET", "POST", "PATCH", "DELETE"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def endpoint_shortname(self):
        """Gets the endpoint_shortname of this Log.  # noqa: E501


        :return: The endpoint_shortname of this Log.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_shortname

    @endpoint_shortname.setter
    def endpoint_shortname(self, endpoint_shortname):
        """Sets the endpoint_shortname of this Log.


        :param endpoint_shortname: The endpoint_shortname of this Log.  # noqa: E501
        :type: str
        """

        self._endpoint_shortname = endpoint_shortname

    @property
    def response_time(self):
        """Gets the response_time of this Log.  # noqa: E501


        :return: The response_time of this Log.  # noqa: E501
        :rtype: int
        """
        return self._response_time

    @response_time.setter
    def response_time(self, response_time):
        """Sets the response_time of this Log.


        :param response_time: The response_time of this Log.  # noqa: E501
        :type: int
        """

        self._response_time = response_time

    @property
    def response_code(self):
        """Gets the response_code of this Log.  # noqa: E501


        :return: The response_code of this Log.  # noqa: E501
        :rtype: int
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """Sets the response_code of this Log.


        :param response_code: The response_code of this Log.  # noqa: E501
        :type: int
        """

        self._response_code = response_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Log, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Log):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
