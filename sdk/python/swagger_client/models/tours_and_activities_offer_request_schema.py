# coding: utf-8

"""
    Federated Content API

    Welcome to the Federated Content API following Open API Specification (Version 3.0.0)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ToursAndActivitiesOfferRequestSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'location_latitude': 'float',
        'location_longitude': 'float',
        'location_radius': 'float',
        'start_date': 'date',
        'end_date': 'date',
        'adults': 'int',
        'children': 'int',
        'filter_by_keyword': 'str',
        'filter_by_price_min': 'float',
        'filter_by_price_max': 'float',
        'filter_by_distance_min': 'int',
        'filter_by_distance_max': 'int',
        'filter_by_rating_min': 'int',
        'filter_by_rating_max': 'int',
        'filter_by_subcategories': 'list[str]',
        'sort_by': 'str',
        'sort_order': 'str',
        'page': 'int',
        'limit': 'int',
        'language': 'str',
        'currency': 'str',
        'metric': 'str'
    }

    attribute_map = {
        'location_latitude': 'location_latitude',
        'location_longitude': 'location_longitude',
        'location_radius': 'location_radius',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'adults': 'adults',
        'children': 'children',
        'filter_by_keyword': 'filter_by_keyword',
        'filter_by_price_min': 'filter_by_price_min',
        'filter_by_price_max': 'filter_by_price_max',
        'filter_by_distance_min': 'filter_by_distance_min',
        'filter_by_distance_max': 'filter_by_distance_max',
        'filter_by_rating_min': 'filter_by_rating_min',
        'filter_by_rating_max': 'filter_by_rating_max',
        'filter_by_subcategories': 'filter_by_subcategories',
        'sort_by': 'sort_by',
        'sort_order': 'sort_order',
        'page': 'page',
        'limit': 'limit',
        'language': 'language',
        'currency': 'currency',
        'metric': 'metric'
    }

    def __init__(self, location_latitude=None, location_longitude=None, location_radius=None, start_date=None, end_date=None, adults=None, children=None, filter_by_keyword=None, filter_by_price_min=None, filter_by_price_max=None, filter_by_distance_min=None, filter_by_distance_max=None, filter_by_rating_min=None, filter_by_rating_max=None, filter_by_subcategories=None, sort_by=None, sort_order=None, page=None, limit=None, language=None, currency=None, metric=None):  # noqa: E501
        """ToursAndActivitiesOfferRequestSchema - a model defined in Swagger"""  # noqa: E501
        self._location_latitude = None
        self._location_longitude = None
        self._location_radius = None
        self._start_date = None
        self._end_date = None
        self._adults = None
        self._children = None
        self._filter_by_keyword = None
        self._filter_by_price_min = None
        self._filter_by_price_max = None
        self._filter_by_distance_min = None
        self._filter_by_distance_max = None
        self._filter_by_rating_min = None
        self._filter_by_rating_max = None
        self._filter_by_subcategories = None
        self._sort_by = None
        self._sort_order = None
        self._page = None
        self._limit = None
        self._language = None
        self._currency = None
        self._metric = None
        self.discriminator = None
        if location_latitude is not None:
            self.location_latitude = location_latitude
        if location_longitude is not None:
            self.location_longitude = location_longitude
        if location_radius is not None:
            self.location_radius = location_radius
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if adults is not None:
            self.adults = adults
        if children is not None:
            self.children = children
        if filter_by_keyword is not None:
            self.filter_by_keyword = filter_by_keyword
        if filter_by_price_min is not None:
            self.filter_by_price_min = filter_by_price_min
        if filter_by_price_max is not None:
            self.filter_by_price_max = filter_by_price_max
        if filter_by_distance_min is not None:
            self.filter_by_distance_min = filter_by_distance_min
        if filter_by_distance_max is not None:
            self.filter_by_distance_max = filter_by_distance_max
        if filter_by_rating_min is not None:
            self.filter_by_rating_min = filter_by_rating_min
        if filter_by_rating_max is not None:
            self.filter_by_rating_max = filter_by_rating_max
        if filter_by_subcategories is not None:
            self.filter_by_subcategories = filter_by_subcategories
        if sort_by is not None:
            self.sort_by = sort_by
        if sort_order is not None:
            self.sort_order = sort_order
        if page is not None:
            self.page = page
        if limit is not None:
            self.limit = limit
        if language is not None:
            self.language = language
        if currency is not None:
            self.currency = currency
        if metric is not None:
            self.metric = metric

    @property
    def location_latitude(self):
        """Gets the location_latitude of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501

        Latitude for the location.  # noqa: E501

        :return: The location_latitude of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :rtype: float
        """
        return self._location_latitude

    @location_latitude.setter
    def location_latitude(self, location_latitude):
        """Sets the location_latitude of this ToursAndActivitiesOfferRequestSchema.

        Latitude for the location.  # noqa: E501

        :param location_latitude: The location_latitude of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :type: float
        """

        self._location_latitude = location_latitude

    @property
    def location_longitude(self):
        """Gets the location_longitude of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501

        Longitude for the location.  # noqa: E501

        :return: The location_longitude of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :rtype: float
        """
        return self._location_longitude

    @location_longitude.setter
    def location_longitude(self, location_longitude):
        """Sets the location_longitude of this ToursAndActivitiesOfferRequestSchema.

        Longitude for the location.  # noqa: E501

        :param location_longitude: The location_longitude of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :type: float
        """

        self._location_longitude = location_longitude

    @property
    def location_radius(self):
        """Gets the location_radius of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501

        Radius to search for tours and activities from the specified location.  # noqa: E501

        :return: The location_radius of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :rtype: float
        """
        return self._location_radius

    @location_radius.setter
    def location_radius(self, location_radius):
        """Sets the location_radius of this ToursAndActivitiesOfferRequestSchema.

        Radius to search for tours and activities from the specified location.  # noqa: E501

        :param location_radius: The location_radius of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :type: float
        """

        self._location_radius = location_radius

    @property
    def start_date(self):
        """Gets the start_date of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501

        Starting date for tours and activities.  # noqa: E501

        :return: The start_date of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ToursAndActivitiesOfferRequestSchema.

        Starting date for tours and activities.  # noqa: E501

        :param start_date: The start_date of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501

        Ending date for tours and activities.  # noqa: E501

        :return: The end_date of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ToursAndActivitiesOfferRequestSchema.

        Ending date for tours and activities.  # noqa: E501

        :param end_date: The end_date of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def adults(self):
        """Gets the adults of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501

        Number of adults participating.  # noqa: E501

        :return: The adults of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :rtype: int
        """
        return self._adults

    @adults.setter
    def adults(self, adults):
        """Sets the adults of this ToursAndActivitiesOfferRequestSchema.

        Number of adults participating.  # noqa: E501

        :param adults: The adults of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :type: int
        """

        self._adults = adults

    @property
    def children(self):
        """Gets the children of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501

        Number of children participating.  # noqa: E501

        :return: The children of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :rtype: int
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this ToursAndActivitiesOfferRequestSchema.

        Number of children participating.  # noqa: E501

        :param children: The children of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :type: int
        """

        self._children = children

    @property
    def filter_by_keyword(self):
        """Gets the filter_by_keyword of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501

        Keyword to filter tours and activities.  # noqa: E501

        :return: The filter_by_keyword of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._filter_by_keyword

    @filter_by_keyword.setter
    def filter_by_keyword(self, filter_by_keyword):
        """Sets the filter_by_keyword of this ToursAndActivitiesOfferRequestSchema.

        Keyword to filter tours and activities.  # noqa: E501

        :param filter_by_keyword: The filter_by_keyword of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :type: str
        """

        self._filter_by_keyword = filter_by_keyword

    @property
    def filter_by_price_min(self):
        """Gets the filter_by_price_min of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501

        Minimum price filter.  # noqa: E501

        :return: The filter_by_price_min of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :rtype: float
        """
        return self._filter_by_price_min

    @filter_by_price_min.setter
    def filter_by_price_min(self, filter_by_price_min):
        """Sets the filter_by_price_min of this ToursAndActivitiesOfferRequestSchema.

        Minimum price filter.  # noqa: E501

        :param filter_by_price_min: The filter_by_price_min of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :type: float
        """

        self._filter_by_price_min = filter_by_price_min

    @property
    def filter_by_price_max(self):
        """Gets the filter_by_price_max of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501

        Maximum price filter.  # noqa: E501

        :return: The filter_by_price_max of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :rtype: float
        """
        return self._filter_by_price_max

    @filter_by_price_max.setter
    def filter_by_price_max(self, filter_by_price_max):
        """Sets the filter_by_price_max of this ToursAndActivitiesOfferRequestSchema.

        Maximum price filter.  # noqa: E501

        :param filter_by_price_max: The filter_by_price_max of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :type: float
        """

        self._filter_by_price_max = filter_by_price_max

    @property
    def filter_by_distance_min(self):
        """Gets the filter_by_distance_min of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501

        Minimum distance filter.  # noqa: E501

        :return: The filter_by_distance_min of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :rtype: int
        """
        return self._filter_by_distance_min

    @filter_by_distance_min.setter
    def filter_by_distance_min(self, filter_by_distance_min):
        """Sets the filter_by_distance_min of this ToursAndActivitiesOfferRequestSchema.

        Minimum distance filter.  # noqa: E501

        :param filter_by_distance_min: The filter_by_distance_min of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :type: int
        """

        self._filter_by_distance_min = filter_by_distance_min

    @property
    def filter_by_distance_max(self):
        """Gets the filter_by_distance_max of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501

        Maximum distance filter.  # noqa: E501

        :return: The filter_by_distance_max of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :rtype: int
        """
        return self._filter_by_distance_max

    @filter_by_distance_max.setter
    def filter_by_distance_max(self, filter_by_distance_max):
        """Sets the filter_by_distance_max of this ToursAndActivitiesOfferRequestSchema.

        Maximum distance filter.  # noqa: E501

        :param filter_by_distance_max: The filter_by_distance_max of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :type: int
        """

        self._filter_by_distance_max = filter_by_distance_max

    @property
    def filter_by_rating_min(self):
        """Gets the filter_by_rating_min of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501

        Minimum rating filter.  # noqa: E501

        :return: The filter_by_rating_min of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :rtype: int
        """
        return self._filter_by_rating_min

    @filter_by_rating_min.setter
    def filter_by_rating_min(self, filter_by_rating_min):
        """Sets the filter_by_rating_min of this ToursAndActivitiesOfferRequestSchema.

        Minimum rating filter.  # noqa: E501

        :param filter_by_rating_min: The filter_by_rating_min of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :type: int
        """

        self._filter_by_rating_min = filter_by_rating_min

    @property
    def filter_by_rating_max(self):
        """Gets the filter_by_rating_max of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501

        Maximum rating filter.  # noqa: E501

        :return: The filter_by_rating_max of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :rtype: int
        """
        return self._filter_by_rating_max

    @filter_by_rating_max.setter
    def filter_by_rating_max(self, filter_by_rating_max):
        """Sets the filter_by_rating_max of this ToursAndActivitiesOfferRequestSchema.

        Maximum rating filter.  # noqa: E501

        :param filter_by_rating_max: The filter_by_rating_max of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :type: int
        """

        self._filter_by_rating_max = filter_by_rating_max

    @property
    def filter_by_subcategories(self):
        """Gets the filter_by_subcategories of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501

        Subcategories to filter tours and activities.  # noqa: E501

        :return: The filter_by_subcategories of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._filter_by_subcategories

    @filter_by_subcategories.setter
    def filter_by_subcategories(self, filter_by_subcategories):
        """Sets the filter_by_subcategories of this ToursAndActivitiesOfferRequestSchema.

        Subcategories to filter tours and activities.  # noqa: E501

        :param filter_by_subcategories: The filter_by_subcategories of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :type: list[str]
        """

        self._filter_by_subcategories = filter_by_subcategories

    @property
    def sort_by(self):
        """Gets the sort_by of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501

        Criteria to sort the search results.  # noqa: E501

        :return: The sort_by of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this ToursAndActivitiesOfferRequestSchema.

        Criteria to sort the search results.  # noqa: E501

        :param sort_by: The sort_by of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :type: str
        """

        self._sort_by = sort_by

    @property
    def sort_order(self):
        """Gets the sort_order of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501

        Order to sort the results (ascending or descending).  # noqa: E501

        :return: The sort_order of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this ToursAndActivitiesOfferRequestSchema.

        Order to sort the results (ascending or descending).  # noqa: E501

        :param sort_order: The sort_order of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :type: str
        """

        self._sort_order = sort_order

    @property
    def page(self):
        """Gets the page of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501

        Page number for pagination.  # noqa: E501

        :return: The page of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this ToursAndActivitiesOfferRequestSchema.

        Page number for pagination.  # noqa: E501

        :param page: The page of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def limit(self):
        """Gets the limit of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501

        Number of items per page.  # noqa: E501

        :return: The limit of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ToursAndActivitiesOfferRequestSchema.

        Number of items per page.  # noqa: E501

        :param limit: The limit of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def language(self):
        """Gets the language of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501

        Language of the tour offers.  # noqa: E501

        :return: The language of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ToursAndActivitiesOfferRequestSchema.

        Language of the tour offers.  # noqa: E501

        :param language: The language of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def currency(self):
        """Gets the currency of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501

        Currency in which prices are displayed.  # noqa: E501

        :return: The currency of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ToursAndActivitiesOfferRequestSchema.

        Currency in which prices are displayed.  # noqa: E501

        :param currency: The currency of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def metric(self):
        """Gets the metric of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501

        Unit for distance measurement (mi/km) used in filters.  # noqa: E501

        :return: The metric of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this ToursAndActivitiesOfferRequestSchema.

        Unit for distance measurement (mi/km) used in filters.  # noqa: E501

        :param metric: The metric of this ToursAndActivitiesOfferRequestSchema.  # noqa: E501
        :type: str
        """

        self._metric = metric

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ToursAndActivitiesOfferRequestSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ToursAndActivitiesOfferRequestSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
