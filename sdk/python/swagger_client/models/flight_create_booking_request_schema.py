# coding: utf-8

"""
    Federated Content API

    Welcome to the Federated Content API following Open API Specification (Version 3.0.0)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FlightCreateBookingRequestSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'offer_id': 'str',
        'passengers': 'list[FlightBookingPassengerSchema]',
        'customer': 'FlightCreateBookingCustomerSchema',
        'payment': 'FlightCreateBookingPaymentSchema'
    }

    attribute_map = {
        'offer_id': 'offer_id',
        'passengers': 'passengers',
        'customer': 'customer',
        'payment': 'payment'
    }

    def __init__(self, offer_id=None, passengers=None, customer=None, payment=None):  # noqa: E501
        """FlightCreateBookingRequestSchema - a model defined in Swagger"""  # noqa: E501
        self._offer_id = None
        self._passengers = None
        self._customer = None
        self._payment = None
        self.discriminator = None
        if offer_id is not None:
            self.offer_id = offer_id
        if passengers is not None:
            self.passengers = passengers
        if customer is not None:
            self.customer = customer
        if payment is not None:
            self.payment = payment

    @property
    def offer_id(self):
        """Gets the offer_id of this FlightCreateBookingRequestSchema.  # noqa: E501

        Identifier of the offer for which booking is initiated.  # noqa: E501

        :return: The offer_id of this FlightCreateBookingRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this FlightCreateBookingRequestSchema.

        Identifier of the offer for which booking is initiated.  # noqa: E501

        :param offer_id: The offer_id of this FlightCreateBookingRequestSchema.  # noqa: E501
        :type: str
        """

        self._offer_id = offer_id

    @property
    def passengers(self):
        """Gets the passengers of this FlightCreateBookingRequestSchema.  # noqa: E501

        Array of FlightBookingPassengerSchema detailing passenger information.  # noqa: E501

        :return: The passengers of this FlightCreateBookingRequestSchema.  # noqa: E501
        :rtype: list[FlightBookingPassengerSchema]
        """
        return self._passengers

    @passengers.setter
    def passengers(self, passengers):
        """Sets the passengers of this FlightCreateBookingRequestSchema.

        Array of FlightBookingPassengerSchema detailing passenger information.  # noqa: E501

        :param passengers: The passengers of this FlightCreateBookingRequestSchema.  # noqa: E501
        :type: list[FlightBookingPassengerSchema]
        """

        self._passengers = passengers

    @property
    def customer(self):
        """Gets the customer of this FlightCreateBookingRequestSchema.  # noqa: E501


        :return: The customer of this FlightCreateBookingRequestSchema.  # noqa: E501
        :rtype: FlightCreateBookingCustomerSchema
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this FlightCreateBookingRequestSchema.


        :param customer: The customer of this FlightCreateBookingRequestSchema.  # noqa: E501
        :type: FlightCreateBookingCustomerSchema
        """

        self._customer = customer

    @property
    def payment(self):
        """Gets the payment of this FlightCreateBookingRequestSchema.  # noqa: E501


        :return: The payment of this FlightCreateBookingRequestSchema.  # noqa: E501
        :rtype: FlightCreateBookingPaymentSchema
        """
        return self._payment

    @payment.setter
    def payment(self, payment):
        """Sets the payment of this FlightCreateBookingRequestSchema.


        :param payment: The payment of this FlightCreateBookingRequestSchema.  # noqa: E501
        :type: FlightCreateBookingPaymentSchema
        """

        self._payment = payment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FlightCreateBookingRequestSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlightCreateBookingRequestSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
