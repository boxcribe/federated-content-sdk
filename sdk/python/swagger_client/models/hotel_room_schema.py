# coding: utf-8

"""
    Federated Content API

    Welcome to the Federated Content API following Open API Specification (Version 3.0.0)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HotelRoomSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'room_id': 'str',
        'supplier_room_id': 'str',
        'room_index': 'int',
        'checkin_date': 'date',
        'checkout_date': 'date',
        'adults': 'int',
        'children': 'int',
        'room_tax': 'float',
        'room_price': 'float',
        'room_currency': 'str',
        'room_cancellation_policies': 'object',
        'room_name': 'str',
        'room_description': 'str',
        'room_images': 'list[str]',
        'room_quantity_max': 'int'
    }

    attribute_map = {
        'room_id': 'room_id',
        'supplier_room_id': 'supplier_room_id',
        'room_index': 'room_index',
        'checkin_date': 'checkin_date',
        'checkout_date': 'checkout_date',
        'adults': 'adults',
        'children': 'children',
        'room_tax': 'room_tax',
        'room_price': 'room_price',
        'room_currency': 'room_currency',
        'room_cancellation_policies': 'room_cancellation_policies',
        'room_name': 'room_name',
        'room_description': 'room_description',
        'room_images': 'room_images',
        'room_quantity_max': 'room_quantity_max'
    }

    def __init__(self, room_id=None, supplier_room_id=None, room_index=None, checkin_date=None, checkout_date=None, adults=None, children=None, room_tax=None, room_price=None, room_currency=None, room_cancellation_policies=None, room_name=None, room_description=None, room_images=None, room_quantity_max=None):  # noqa: E501
        """HotelRoomSchema - a model defined in Swagger"""  # noqa: E501
        self._room_id = None
        self._supplier_room_id = None
        self._room_index = None
        self._checkin_date = None
        self._checkout_date = None
        self._adults = None
        self._children = None
        self._room_tax = None
        self._room_price = None
        self._room_currency = None
        self._room_cancellation_policies = None
        self._room_name = None
        self._room_description = None
        self._room_images = None
        self._room_quantity_max = None
        self.discriminator = None
        if room_id is not None:
            self.room_id = room_id
        if supplier_room_id is not None:
            self.supplier_room_id = supplier_room_id
        if room_index is not None:
            self.room_index = room_index
        if checkin_date is not None:
            self.checkin_date = checkin_date
        if checkout_date is not None:
            self.checkout_date = checkout_date
        if adults is not None:
            self.adults = adults
        if children is not None:
            self.children = children
        if room_tax is not None:
            self.room_tax = room_tax
        if room_price is not None:
            self.room_price = room_price
        if room_currency is not None:
            self.room_currency = room_currency
        if room_cancellation_policies is not None:
            self.room_cancellation_policies = room_cancellation_policies
        if room_name is not None:
            self.room_name = room_name
        if room_description is not None:
            self.room_description = room_description
        if room_images is not None:
            self.room_images = room_images
        if room_quantity_max is not None:
            self.room_quantity_max = room_quantity_max

    @property
    def room_id(self):
        """Gets the room_id of this HotelRoomSchema.  # noqa: E501

        Unique identifier for each room.  # noqa: E501

        :return: The room_id of this HotelRoomSchema.  # noqa: E501
        :rtype: str
        """
        return self._room_id

    @room_id.setter
    def room_id(self, room_id):
        """Sets the room_id of this HotelRoomSchema.

        Unique identifier for each room.  # noqa: E501

        :param room_id: The room_id of this HotelRoomSchema.  # noqa: E501
        :type: str
        """

        self._room_id = room_id

    @property
    def supplier_room_id(self):
        """Gets the supplier_room_id of this HotelRoomSchema.  # noqa: E501

        Supplier specific identifier for the room.  # noqa: E501

        :return: The supplier_room_id of this HotelRoomSchema.  # noqa: E501
        :rtype: str
        """
        return self._supplier_room_id

    @supplier_room_id.setter
    def supplier_room_id(self, supplier_room_id):
        """Sets the supplier_room_id of this HotelRoomSchema.

        Supplier specific identifier for the room.  # noqa: E501

        :param supplier_room_id: The supplier_room_id of this HotelRoomSchema.  # noqa: E501
        :type: str
        """

        self._supplier_room_id = supplier_room_id

    @property
    def room_index(self):
        """Gets the room_index of this HotelRoomSchema.  # noqa: E501

        Position of the room in the list.  # noqa: E501

        :return: The room_index of this HotelRoomSchema.  # noqa: E501
        :rtype: int
        """
        return self._room_index

    @room_index.setter
    def room_index(self, room_index):
        """Sets the room_index of this HotelRoomSchema.

        Position of the room in the list.  # noqa: E501

        :param room_index: The room_index of this HotelRoomSchema.  # noqa: E501
        :type: int
        """

        self._room_index = room_index

    @property
    def checkin_date(self):
        """Gets the checkin_date of this HotelRoomSchema.  # noqa: E501

        Start date of the hotel reservation.  # noqa: E501

        :return: The checkin_date of this HotelRoomSchema.  # noqa: E501
        :rtype: date
        """
        return self._checkin_date

    @checkin_date.setter
    def checkin_date(self, checkin_date):
        """Sets the checkin_date of this HotelRoomSchema.

        Start date of the hotel reservation.  # noqa: E501

        :param checkin_date: The checkin_date of this HotelRoomSchema.  # noqa: E501
        :type: date
        """

        self._checkin_date = checkin_date

    @property
    def checkout_date(self):
        """Gets the checkout_date of this HotelRoomSchema.  # noqa: E501

        End date of the hotel reservation.  # noqa: E501

        :return: The checkout_date of this HotelRoomSchema.  # noqa: E501
        :rtype: date
        """
        return self._checkout_date

    @checkout_date.setter
    def checkout_date(self, checkout_date):
        """Sets the checkout_date of this HotelRoomSchema.

        End date of the hotel reservation.  # noqa: E501

        :param checkout_date: The checkout_date of this HotelRoomSchema.  # noqa: E501
        :type: date
        """

        self._checkout_date = checkout_date

    @property
    def adults(self):
        """Gets the adults of this HotelRoomSchema.  # noqa: E501

        Number of adults that can be accommodated in the room.  # noqa: E501

        :return: The adults of this HotelRoomSchema.  # noqa: E501
        :rtype: int
        """
        return self._adults

    @adults.setter
    def adults(self, adults):
        """Sets the adults of this HotelRoomSchema.

        Number of adults that can be accommodated in the room.  # noqa: E501

        :param adults: The adults of this HotelRoomSchema.  # noqa: E501
        :type: int
        """

        self._adults = adults

    @property
    def children(self):
        """Gets the children of this HotelRoomSchema.  # noqa: E501

        Number of children that can be accommodated in the room.  # noqa: E501

        :return: The children of this HotelRoomSchema.  # noqa: E501
        :rtype: int
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this HotelRoomSchema.

        Number of children that can be accommodated in the room.  # noqa: E501

        :param children: The children of this HotelRoomSchema.  # noqa: E501
        :type: int
        """

        self._children = children

    @property
    def room_tax(self):
        """Gets the room_tax of this HotelRoomSchema.  # noqa: E501

        Tax rate applicable to the room price.  # noqa: E501

        :return: The room_tax of this HotelRoomSchema.  # noqa: E501
        :rtype: float
        """
        return self._room_tax

    @room_tax.setter
    def room_tax(self, room_tax):
        """Sets the room_tax of this HotelRoomSchema.

        Tax rate applicable to the room price.  # noqa: E501

        :param room_tax: The room_tax of this HotelRoomSchema.  # noqa: E501
        :type: float
        """

        self._room_tax = room_tax

    @property
    def room_price(self):
        """Gets the room_price of this HotelRoomSchema.  # noqa: E501

        Nightly rate for the room.  # noqa: E501

        :return: The room_price of this HotelRoomSchema.  # noqa: E501
        :rtype: float
        """
        return self._room_price

    @room_price.setter
    def room_price(self, room_price):
        """Sets the room_price of this HotelRoomSchema.

        Nightly rate for the room.  # noqa: E501

        :param room_price: The room_price of this HotelRoomSchema.  # noqa: E501
        :type: float
        """

        self._room_price = room_price

    @property
    def room_currency(self):
        """Gets the room_currency of this HotelRoomSchema.  # noqa: E501

        Currency used for the room pricing.  # noqa: E501

        :return: The room_currency of this HotelRoomSchema.  # noqa: E501
        :rtype: str
        """
        return self._room_currency

    @room_currency.setter
    def room_currency(self, room_currency):
        """Sets the room_currency of this HotelRoomSchema.

        Currency used for the room pricing.  # noqa: E501

        :param room_currency: The room_currency of this HotelRoomSchema.  # noqa: E501
        :type: str
        """

        self._room_currency = room_currency

    @property
    def room_cancellation_policies(self):
        """Gets the room_cancellation_policies of this HotelRoomSchema.  # noqa: E501

        Details about the cancellation policy for the room.  # noqa: E501

        :return: The room_cancellation_policies of this HotelRoomSchema.  # noqa: E501
        :rtype: object
        """
        return self._room_cancellation_policies

    @room_cancellation_policies.setter
    def room_cancellation_policies(self, room_cancellation_policies):
        """Sets the room_cancellation_policies of this HotelRoomSchema.

        Details about the cancellation policy for the room.  # noqa: E501

        :param room_cancellation_policies: The room_cancellation_policies of this HotelRoomSchema.  # noqa: E501
        :type: object
        """

        self._room_cancellation_policies = room_cancellation_policies

    @property
    def room_name(self):
        """Gets the room_name of this HotelRoomSchema.  # noqa: E501

        Type or name of the room.  # noqa: E501

        :return: The room_name of this HotelRoomSchema.  # noqa: E501
        :rtype: str
        """
        return self._room_name

    @room_name.setter
    def room_name(self, room_name):
        """Sets the room_name of this HotelRoomSchema.

        Type or name of the room.  # noqa: E501

        :param room_name: The room_name of this HotelRoomSchema.  # noqa: E501
        :type: str
        """

        self._room_name = room_name

    @property
    def room_description(self):
        """Gets the room_description of this HotelRoomSchema.  # noqa: E501

        Description of the room including amenities and features.  # noqa: E501

        :return: The room_description of this HotelRoomSchema.  # noqa: E501
        :rtype: str
        """
        return self._room_description

    @room_description.setter
    def room_description(self, room_description):
        """Sets the room_description of this HotelRoomSchema.

        Description of the room including amenities and features.  # noqa: E501

        :param room_description: The room_description of this HotelRoomSchema.  # noqa: E501
        :type: str
        """

        self._room_description = room_description

    @property
    def room_images(self):
        """Gets the room_images of this HotelRoomSchema.  # noqa: E501

        Images showcasing the room.  # noqa: E501

        :return: The room_images of this HotelRoomSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._room_images

    @room_images.setter
    def room_images(self, room_images):
        """Sets the room_images of this HotelRoomSchema.

        Images showcasing the room.  # noqa: E501

        :param room_images: The room_images of this HotelRoomSchema.  # noqa: E501
        :type: list[str]
        """

        self._room_images = room_images

    @property
    def room_quantity_max(self):
        """Gets the room_quantity_max of this HotelRoomSchema.  # noqa: E501

        Maximum quantity of this room type available.  # noqa: E501

        :return: The room_quantity_max of this HotelRoomSchema.  # noqa: E501
        :rtype: int
        """
        return self._room_quantity_max

    @room_quantity_max.setter
    def room_quantity_max(self, room_quantity_max):
        """Sets the room_quantity_max of this HotelRoomSchema.

        Maximum quantity of this room type available.  # noqa: E501

        :param room_quantity_max: The room_quantity_max of this HotelRoomSchema.  # noqa: E501
        :type: int
        """

        self._room_quantity_max = room_quantity_max

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HotelRoomSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HotelRoomSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
