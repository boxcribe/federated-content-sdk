# coding: utf-8

"""
    Federated Content API

    Welcome to the Federated Content API following Open API Specification (Version 3.0.0)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransportGetOfferAvailabilityRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'offer_id': 'str',
        'pickup_date': 'date',
        'pickup_time': 'str',
        'adults': 'int',
        'children': 'int',
        'return_date': 'date',
        'return_time': 'str'
    }

    attribute_map = {
        'offer_id': 'offer_id',
        'pickup_date': 'pickup_date',
        'pickup_time': 'pickup_time',
        'adults': 'adults',
        'children': 'children',
        'return_date': 'return_date',
        'return_time': 'return_time'
    }

    def __init__(self, offer_id=None, pickup_date=None, pickup_time=None, adults=None, children=None, return_date=None, return_time=None):  # noqa: E501
        """TransportGetOfferAvailabilityRequest - a model defined in Swagger"""  # noqa: E501
        self._offer_id = None
        self._pickup_date = None
        self._pickup_time = None
        self._adults = None
        self._children = None
        self._return_date = None
        self._return_time = None
        self.discriminator = None
        if offer_id is not None:
            self.offer_id = offer_id
        if pickup_date is not None:
            self.pickup_date = pickup_date
        if pickup_time is not None:
            self.pickup_time = pickup_time
        if adults is not None:
            self.adults = adults
        if children is not None:
            self.children = children
        if return_date is not None:
            self.return_date = return_date
        if return_time is not None:
            self.return_time = return_time

    @property
    def offer_id(self):
        """Gets the offer_id of this TransportGetOfferAvailabilityRequest.  # noqa: E501

        Unique identifier of the transport offer.  # noqa: E501

        :return: The offer_id of this TransportGetOfferAvailabilityRequest.  # noqa: E501
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this TransportGetOfferAvailabilityRequest.

        Unique identifier of the transport offer.  # noqa: E501

        :param offer_id: The offer_id of this TransportGetOfferAvailabilityRequest.  # noqa: E501
        :type: str
        """

        self._offer_id = offer_id

    @property
    def pickup_date(self):
        """Gets the pickup_date of this TransportGetOfferAvailabilityRequest.  # noqa: E501

        Date of the pickup.  # noqa: E501

        :return: The pickup_date of this TransportGetOfferAvailabilityRequest.  # noqa: E501
        :rtype: date
        """
        return self._pickup_date

    @pickup_date.setter
    def pickup_date(self, pickup_date):
        """Sets the pickup_date of this TransportGetOfferAvailabilityRequest.

        Date of the pickup.  # noqa: E501

        :param pickup_date: The pickup_date of this TransportGetOfferAvailabilityRequest.  # noqa: E501
        :type: date
        """

        self._pickup_date = pickup_date

    @property
    def pickup_time(self):
        """Gets the pickup_time of this TransportGetOfferAvailabilityRequest.  # noqa: E501

        Time of the pickup.  # noqa: E501

        :return: The pickup_time of this TransportGetOfferAvailabilityRequest.  # noqa: E501
        :rtype: str
        """
        return self._pickup_time

    @pickup_time.setter
    def pickup_time(self, pickup_time):
        """Sets the pickup_time of this TransportGetOfferAvailabilityRequest.

        Time of the pickup.  # noqa: E501

        :param pickup_time: The pickup_time of this TransportGetOfferAvailabilityRequest.  # noqa: E501
        :type: str
        """

        self._pickup_time = pickup_time

    @property
    def adults(self):
        """Gets the adults of this TransportGetOfferAvailabilityRequest.  # noqa: E501

        Number of adults.  # noqa: E501

        :return: The adults of this TransportGetOfferAvailabilityRequest.  # noqa: E501
        :rtype: int
        """
        return self._adults

    @adults.setter
    def adults(self, adults):
        """Sets the adults of this TransportGetOfferAvailabilityRequest.

        Number of adults.  # noqa: E501

        :param adults: The adults of this TransportGetOfferAvailabilityRequest.  # noqa: E501
        :type: int
        """

        self._adults = adults

    @property
    def children(self):
        """Gets the children of this TransportGetOfferAvailabilityRequest.  # noqa: E501

        Number of children.  # noqa: E501

        :return: The children of this TransportGetOfferAvailabilityRequest.  # noqa: E501
        :rtype: int
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this TransportGetOfferAvailabilityRequest.

        Number of children.  # noqa: E501

        :param children: The children of this TransportGetOfferAvailabilityRequest.  # noqa: E501
        :type: int
        """

        self._children = children

    @property
    def return_date(self):
        """Gets the return_date of this TransportGetOfferAvailabilityRequest.  # noqa: E501

        Date of the return.  # noqa: E501

        :return: The return_date of this TransportGetOfferAvailabilityRequest.  # noqa: E501
        :rtype: date
        """
        return self._return_date

    @return_date.setter
    def return_date(self, return_date):
        """Sets the return_date of this TransportGetOfferAvailabilityRequest.

        Date of the return.  # noqa: E501

        :param return_date: The return_date of this TransportGetOfferAvailabilityRequest.  # noqa: E501
        :type: date
        """

        self._return_date = return_date

    @property
    def return_time(self):
        """Gets the return_time of this TransportGetOfferAvailabilityRequest.  # noqa: E501

        Time of the return.  # noqa: E501

        :return: The return_time of this TransportGetOfferAvailabilityRequest.  # noqa: E501
        :rtype: str
        """
        return self._return_time

    @return_time.setter
    def return_time(self, return_time):
        """Sets the return_time of this TransportGetOfferAvailabilityRequest.

        Time of the return.  # noqa: E501

        :param return_time: The return_time of this TransportGetOfferAvailabilityRequest.  # noqa: E501
        :type: str
        """

        self._return_time = return_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransportGetOfferAvailabilityRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransportGetOfferAvailabilityRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
