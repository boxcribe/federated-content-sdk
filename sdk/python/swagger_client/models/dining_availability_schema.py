# coding: utf-8

"""
    Federated Content API

    Welcome to the Federated Content API following Open API Specification (Version 3.0.0)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DiningAvailabilitySchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'availability_id': 'str',
        'supplier_availability_id': 'str',
        'availability_index': 'float',
        '_date': 'date',
        'time': 'str',
        'adults': 'float'
    }

    attribute_map = {
        'availability_id': 'availability_id',
        'supplier_availability_id': 'supplier_availability_id',
        'availability_index': 'availability_index',
        '_date': 'date',
        'time': 'time',
        'adults': 'adults'
    }

    def __init__(self, availability_id=None, supplier_availability_id=None, availability_index=None, _date=None, time=None, adults=None):  # noqa: E501
        """DiningAvailabilitySchema - a model defined in Swagger"""  # noqa: E501
        self._availability_id = None
        self._supplier_availability_id = None
        self._availability_index = None
        self.__date = None
        self._time = None
        self._adults = None
        self.discriminator = None
        if availability_id is not None:
            self.availability_id = availability_id
        if supplier_availability_id is not None:
            self.supplier_availability_id = supplier_availability_id
        if availability_index is not None:
            self.availability_index = availability_index
        if _date is not None:
            self._date = _date
        if time is not None:
            self.time = time
        if adults is not None:
            self.adults = adults

    @property
    def availability_id(self):
        """Gets the availability_id of this DiningAvailabilitySchema.  # noqa: E501

        Unique identifier for the dining availability.  # noqa: E501

        :return: The availability_id of this DiningAvailabilitySchema.  # noqa: E501
        :rtype: str
        """
        return self._availability_id

    @availability_id.setter
    def availability_id(self, availability_id):
        """Sets the availability_id of this DiningAvailabilitySchema.

        Unique identifier for the dining availability.  # noqa: E501

        :param availability_id: The availability_id of this DiningAvailabilitySchema.  # noqa: E501
        :type: str
        """

        self._availability_id = availability_id

    @property
    def supplier_availability_id(self):
        """Gets the supplier_availability_id of this DiningAvailabilitySchema.  # noqa: E501

        Identifier for the availability provided by the supplier.  # noqa: E501

        :return: The supplier_availability_id of this DiningAvailabilitySchema.  # noqa: E501
        :rtype: str
        """
        return self._supplier_availability_id

    @supplier_availability_id.setter
    def supplier_availability_id(self, supplier_availability_id):
        """Sets the supplier_availability_id of this DiningAvailabilitySchema.

        Identifier for the availability provided by the supplier.  # noqa: E501

        :param supplier_availability_id: The supplier_availability_id of this DiningAvailabilitySchema.  # noqa: E501
        :type: str
        """

        self._supplier_availability_id = supplier_availability_id

    @property
    def availability_index(self):
        """Gets the availability_index of this DiningAvailabilitySchema.  # noqa: E501

        Index of the availability for sorting and reference.  # noqa: E501

        :return: The availability_index of this DiningAvailabilitySchema.  # noqa: E501
        :rtype: float
        """
        return self._availability_index

    @availability_index.setter
    def availability_index(self, availability_index):
        """Sets the availability_index of this DiningAvailabilitySchema.

        Index of the availability for sorting and reference.  # noqa: E501

        :param availability_index: The availability_index of this DiningAvailabilitySchema.  # noqa: E501
        :type: float
        """

        self._availability_index = availability_index

    @property
    def _date(self):
        """Gets the _date of this DiningAvailabilitySchema.  # noqa: E501

        Date of availability for dining.  # noqa: E501

        :return: The _date of this DiningAvailabilitySchema.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this DiningAvailabilitySchema.

        Date of availability for dining.  # noqa: E501

        :param _date: The _date of this DiningAvailabilitySchema.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def time(self):
        """Gets the time of this DiningAvailabilitySchema.  # noqa: E501

        Time of availability for dining.  # noqa: E501

        :return: The time of this DiningAvailabilitySchema.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this DiningAvailabilitySchema.

        Time of availability for dining.  # noqa: E501

        :param time: The time of this DiningAvailabilitySchema.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def adults(self):
        """Gets the adults of this DiningAvailabilitySchema.  # noqa: E501

        Number of adults for the dining reservation.  # noqa: E501

        :return: The adults of this DiningAvailabilitySchema.  # noqa: E501
        :rtype: float
        """
        return self._adults

    @adults.setter
    def adults(self, adults):
        """Sets the adults of this DiningAvailabilitySchema.

        Number of adults for the dining reservation.  # noqa: E501

        :param adults: The adults of this DiningAvailabilitySchema.  # noqa: E501
        :type: float
        """

        self._adults = adults

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiningAvailabilitySchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiningAvailabilitySchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
