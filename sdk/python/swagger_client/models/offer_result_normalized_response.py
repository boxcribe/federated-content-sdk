# coding: utf-8

"""
    Federated Content API

    Welcome to the Federated Content API following Open API Specification (Version 3.0.0)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OfferResultNormalizedResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ids': 'str',
        'category': 'str',
        'index': 'int',
        'name': 'str',
        'description': 'str',
        'address': 'str',
        'latitude': 'float',
        'longitude': 'float',
        'distance': 'float',
        'distance_unit_of_measure': 'str',
        'pictures': 'list[str]',
        'tax': 'float',
        'price': 'float',
        'currency': 'str',
        'price_description': 'str',
        'free_cancellation': 'bool',
        'rating': 'float',
        'status': 'str',
        'ohter_attributes': 'object',
        'offer_rooms': 'list',
        'offer_variants': 'list'
    }

    attribute_map = {
        'ids': 'ids',
        'category': 'category',
        'index': 'index',
        'name': 'name',
        'description': 'description',
        'address': 'address',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'distance': 'distance',
        'distance_unit_of_measure': 'distanceUnitOfMeasure',
        'pictures': 'pictures',
        'tax': 'tax',
        'price': 'price',
        'currency': 'currency',
        'price_description': 'priceDescription',
        'free_cancellation': 'freeCancellation',
        'rating': 'rating',
        'status': 'status',
        'ohter_attributes': 'ohter_attributes',
        'offer_rooms': 'offer_rooms',
        'offer_variants': 'offer_variants'
    }

    def __init__(self, ids=None, category=None, index=None, name=None, description=None, address=None, latitude=None, longitude=None, distance=None, distance_unit_of_measure=None, pictures=None, tax=None, price=None, currency=None, price_description=None, free_cancellation=None, rating=None, status=None, ohter_attributes=None, offer_rooms=None, offer_variants=None):  # noqa: E501
        """OfferResultNormalizedResponse - a model defined in Swagger"""  # noqa: E501
        self._ids = None
        self._category = None
        self._index = None
        self._name = None
        self._description = None
        self._address = None
        self._latitude = None
        self._longitude = None
        self._distance = None
        self._distance_unit_of_measure = None
        self._pictures = None
        self._tax = None
        self._price = None
        self._currency = None
        self._price_description = None
        self._free_cancellation = None
        self._rating = None
        self._status = None
        self._ohter_attributes = None
        self._offer_rooms = None
        self._offer_variants = None
        self.discriminator = None
        if ids is not None:
            self.ids = ids
        if category is not None:
            self.category = category
        if index is not None:
            self.index = index
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if address is not None:
            self.address = address
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if distance is not None:
            self.distance = distance
        if distance_unit_of_measure is not None:
            self.distance_unit_of_measure = distance_unit_of_measure
        if pictures is not None:
            self.pictures = pictures
        if tax is not None:
            self.tax = tax
        if price is not None:
            self.price = price
        if currency is not None:
            self.currency = currency
        if price_description is not None:
            self.price_description = price_description
        if free_cancellation is not None:
            self.free_cancellation = free_cancellation
        if rating is not None:
            self.rating = rating
        if status is not None:
            self.status = status
        if ohter_attributes is not None:
            self.ohter_attributes = ohter_attributes
        if offer_rooms is not None:
            self.offer_rooms = offer_rooms
        if offer_variants is not None:
            self.offer_variants = offer_variants

    @property
    def ids(self):
        """Gets the ids of this OfferResultNormalizedResponse.  # noqa: E501


        :return: The ids of this OfferResultNormalizedResponse.  # noqa: E501
        :rtype: str
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this OfferResultNormalizedResponse.


        :param ids: The ids of this OfferResultNormalizedResponse.  # noqa: E501
        :type: str
        """

        self._ids = ids

    @property
    def category(self):
        """Gets the category of this OfferResultNormalizedResponse.  # noqa: E501


        :return: The category of this OfferResultNormalizedResponse.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this OfferResultNormalizedResponse.


        :param category: The category of this OfferResultNormalizedResponse.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def index(self):
        """Gets the index of this OfferResultNormalizedResponse.  # noqa: E501


        :return: The index of this OfferResultNormalizedResponse.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this OfferResultNormalizedResponse.


        :param index: The index of this OfferResultNormalizedResponse.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def name(self):
        """Gets the name of this OfferResultNormalizedResponse.  # noqa: E501


        :return: The name of this OfferResultNormalizedResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OfferResultNormalizedResponse.


        :param name: The name of this OfferResultNormalizedResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this OfferResultNormalizedResponse.  # noqa: E501


        :return: The description of this OfferResultNormalizedResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OfferResultNormalizedResponse.


        :param description: The description of this OfferResultNormalizedResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def address(self):
        """Gets the address of this OfferResultNormalizedResponse.  # noqa: E501


        :return: The address of this OfferResultNormalizedResponse.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this OfferResultNormalizedResponse.


        :param address: The address of this OfferResultNormalizedResponse.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def latitude(self):
        """Gets the latitude of this OfferResultNormalizedResponse.  # noqa: E501


        :return: The latitude of this OfferResultNormalizedResponse.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this OfferResultNormalizedResponse.


        :param latitude: The latitude of this OfferResultNormalizedResponse.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this OfferResultNormalizedResponse.  # noqa: E501


        :return: The longitude of this OfferResultNormalizedResponse.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this OfferResultNormalizedResponse.


        :param longitude: The longitude of this OfferResultNormalizedResponse.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def distance(self):
        """Gets the distance of this OfferResultNormalizedResponse.  # noqa: E501


        :return: The distance of this OfferResultNormalizedResponse.  # noqa: E501
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this OfferResultNormalizedResponse.


        :param distance: The distance of this OfferResultNormalizedResponse.  # noqa: E501
        :type: float
        """

        self._distance = distance

    @property
    def distance_unit_of_measure(self):
        """Gets the distance_unit_of_measure of this OfferResultNormalizedResponse.  # noqa: E501


        :return: The distance_unit_of_measure of this OfferResultNormalizedResponse.  # noqa: E501
        :rtype: str
        """
        return self._distance_unit_of_measure

    @distance_unit_of_measure.setter
    def distance_unit_of_measure(self, distance_unit_of_measure):
        """Sets the distance_unit_of_measure of this OfferResultNormalizedResponse.


        :param distance_unit_of_measure: The distance_unit_of_measure of this OfferResultNormalizedResponse.  # noqa: E501
        :type: str
        """

        self._distance_unit_of_measure = distance_unit_of_measure

    @property
    def pictures(self):
        """Gets the pictures of this OfferResultNormalizedResponse.  # noqa: E501


        :return: The pictures of this OfferResultNormalizedResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._pictures

    @pictures.setter
    def pictures(self, pictures):
        """Sets the pictures of this OfferResultNormalizedResponse.


        :param pictures: The pictures of this OfferResultNormalizedResponse.  # noqa: E501
        :type: list[str]
        """

        self._pictures = pictures

    @property
    def tax(self):
        """Gets the tax of this OfferResultNormalizedResponse.  # noqa: E501


        :return: The tax of this OfferResultNormalizedResponse.  # noqa: E501
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this OfferResultNormalizedResponse.


        :param tax: The tax of this OfferResultNormalizedResponse.  # noqa: E501
        :type: float
        """

        self._tax = tax

    @property
    def price(self):
        """Gets the price of this OfferResultNormalizedResponse.  # noqa: E501


        :return: The price of this OfferResultNormalizedResponse.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this OfferResultNormalizedResponse.


        :param price: The price of this OfferResultNormalizedResponse.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def currency(self):
        """Gets the currency of this OfferResultNormalizedResponse.  # noqa: E501


        :return: The currency of this OfferResultNormalizedResponse.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this OfferResultNormalizedResponse.


        :param currency: The currency of this OfferResultNormalizedResponse.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def price_description(self):
        """Gets the price_description of this OfferResultNormalizedResponse.  # noqa: E501


        :return: The price_description of this OfferResultNormalizedResponse.  # noqa: E501
        :rtype: str
        """
        return self._price_description

    @price_description.setter
    def price_description(self, price_description):
        """Sets the price_description of this OfferResultNormalizedResponse.


        :param price_description: The price_description of this OfferResultNormalizedResponse.  # noqa: E501
        :type: str
        """

        self._price_description = price_description

    @property
    def free_cancellation(self):
        """Gets the free_cancellation of this OfferResultNormalizedResponse.  # noqa: E501


        :return: The free_cancellation of this OfferResultNormalizedResponse.  # noqa: E501
        :rtype: bool
        """
        return self._free_cancellation

    @free_cancellation.setter
    def free_cancellation(self, free_cancellation):
        """Sets the free_cancellation of this OfferResultNormalizedResponse.


        :param free_cancellation: The free_cancellation of this OfferResultNormalizedResponse.  # noqa: E501
        :type: bool
        """

        self._free_cancellation = free_cancellation

    @property
    def rating(self):
        """Gets the rating of this OfferResultNormalizedResponse.  # noqa: E501


        :return: The rating of this OfferResultNormalizedResponse.  # noqa: E501
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this OfferResultNormalizedResponse.


        :param rating: The rating of this OfferResultNormalizedResponse.  # noqa: E501
        :type: float
        """

        self._rating = rating

    @property
    def status(self):
        """Gets the status of this OfferResultNormalizedResponse.  # noqa: E501


        :return: The status of this OfferResultNormalizedResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OfferResultNormalizedResponse.


        :param status: The status of this OfferResultNormalizedResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def ohter_attributes(self):
        """Gets the ohter_attributes of this OfferResultNormalizedResponse.  # noqa: E501


        :return: The ohter_attributes of this OfferResultNormalizedResponse.  # noqa: E501
        :rtype: object
        """
        return self._ohter_attributes

    @ohter_attributes.setter
    def ohter_attributes(self, ohter_attributes):
        """Sets the ohter_attributes of this OfferResultNormalizedResponse.


        :param ohter_attributes: The ohter_attributes of this OfferResultNormalizedResponse.  # noqa: E501
        :type: object
        """

        self._ohter_attributes = ohter_attributes

    @property
    def offer_rooms(self):
        """Gets the offer_rooms of this OfferResultNormalizedResponse.  # noqa: E501


        :return: The offer_rooms of this OfferResultNormalizedResponse.  # noqa: E501
        :rtype: list
        """
        return self._offer_rooms

    @offer_rooms.setter
    def offer_rooms(self, offer_rooms):
        """Sets the offer_rooms of this OfferResultNormalizedResponse.


        :param offer_rooms: The offer_rooms of this OfferResultNormalizedResponse.  # noqa: E501
        :type: list
        """

        self._offer_rooms = offer_rooms

    @property
    def offer_variants(self):
        """Gets the offer_variants of this OfferResultNormalizedResponse.  # noqa: E501


        :return: The offer_variants of this OfferResultNormalizedResponse.  # noqa: E501
        :rtype: list
        """
        return self._offer_variants

    @offer_variants.setter
    def offer_variants(self, offer_variants):
        """Sets the offer_variants of this OfferResultNormalizedResponse.


        :param offer_variants: The offer_variants of this OfferResultNormalizedResponse.  # noqa: E501
        :type: list
        """

        self._offer_variants = offer_variants

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OfferResultNormalizedResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OfferResultNormalizedResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
