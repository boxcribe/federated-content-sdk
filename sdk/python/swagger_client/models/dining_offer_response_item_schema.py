# coding: utf-8

"""
    Federated Content API

    Welcome to the Federated Content API following Open API Specification (Version 3.0.0)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DiningOfferResponseItemSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'offer_id': 'str',
        'supplier_offer_id': 'str',
        'offer_index': 'float',
        'offer_tax': 'float',
        'offer_price': 'float',
        'offer_currency': 'str',
        'offer_cancellation_policies': 'str',
        'dining_name': 'str',
        'dining_description': 'str',
        'dining_address': 'str',
        'dining_latitude': 'float',
        'dining_longitude': 'float',
        'dining_distance': 'float',
        'dining_distance_metric': 'str',
        'dining_images': 'list[str]',
        'dining_rating': 'float',
        'dining_reviews': 'list[str]',
        'dining_subcategories': 'list[str]',
        'dining_hours': 'list[str]'
    }

    attribute_map = {
        'offer_id': 'offer_id',
        'supplier_offer_id': 'supplier_offer_id',
        'offer_index': 'offer_index',
        'offer_tax': 'offer_tax',
        'offer_price': 'offer_price',
        'offer_currency': 'offer_currency',
        'offer_cancellation_policies': 'offer_cancellation_policies',
        'dining_name': 'dining_name',
        'dining_description': 'dining_description',
        'dining_address': 'dining_address',
        'dining_latitude': 'dining_latitude',
        'dining_longitude': 'dining_longitude',
        'dining_distance': 'dining_distance',
        'dining_distance_metric': 'dining_distance_metric',
        'dining_images': 'dining_images',
        'dining_rating': 'dining_rating',
        'dining_reviews': 'dining_reviews',
        'dining_subcategories': 'dining_subcategories',
        'dining_hours': 'dining_hours'
    }

    def __init__(self, offer_id=None, supplier_offer_id=None, offer_index=None, offer_tax=None, offer_price=None, offer_currency=None, offer_cancellation_policies=None, dining_name=None, dining_description=None, dining_address=None, dining_latitude=None, dining_longitude=None, dining_distance=None, dining_distance_metric=None, dining_images=None, dining_rating=None, dining_reviews=None, dining_subcategories=None, dining_hours=None):  # noqa: E501
        """DiningOfferResponseItemSchema - a model defined in Swagger"""  # noqa: E501
        self._offer_id = None
        self._supplier_offer_id = None
        self._offer_index = None
        self._offer_tax = None
        self._offer_price = None
        self._offer_currency = None
        self._offer_cancellation_policies = None
        self._dining_name = None
        self._dining_description = None
        self._dining_address = None
        self._dining_latitude = None
        self._dining_longitude = None
        self._dining_distance = None
        self._dining_distance_metric = None
        self._dining_images = None
        self._dining_rating = None
        self._dining_reviews = None
        self._dining_subcategories = None
        self._dining_hours = None
        self.discriminator = None
        if offer_id is not None:
            self.offer_id = offer_id
        if supplier_offer_id is not None:
            self.supplier_offer_id = supplier_offer_id
        if offer_index is not None:
            self.offer_index = offer_index
        if offer_tax is not None:
            self.offer_tax = offer_tax
        if offer_price is not None:
            self.offer_price = offer_price
        if offer_currency is not None:
            self.offer_currency = offer_currency
        if offer_cancellation_policies is not None:
            self.offer_cancellation_policies = offer_cancellation_policies
        if dining_name is not None:
            self.dining_name = dining_name
        if dining_description is not None:
            self.dining_description = dining_description
        if dining_address is not None:
            self.dining_address = dining_address
        if dining_latitude is not None:
            self.dining_latitude = dining_latitude
        if dining_longitude is not None:
            self.dining_longitude = dining_longitude
        if dining_distance is not None:
            self.dining_distance = dining_distance
        if dining_distance_metric is not None:
            self.dining_distance_metric = dining_distance_metric
        if dining_images is not None:
            self.dining_images = dining_images
        if dining_rating is not None:
            self.dining_rating = dining_rating
        if dining_reviews is not None:
            self.dining_reviews = dining_reviews
        if dining_subcategories is not None:
            self.dining_subcategories = dining_subcategories
        if dining_hours is not None:
            self.dining_hours = dining_hours

    @property
    def offer_id(self):
        """Gets the offer_id of this DiningOfferResponseItemSchema.  # noqa: E501

        Unique identifier for the dining offer.  # noqa: E501

        :return: The offer_id of this DiningOfferResponseItemSchema.  # noqa: E501
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this DiningOfferResponseItemSchema.

        Unique identifier for the dining offer.  # noqa: E501

        :param offer_id: The offer_id of this DiningOfferResponseItemSchema.  # noqa: E501
        :type: str
        """

        self._offer_id = offer_id

    @property
    def supplier_offer_id(self):
        """Gets the supplier_offer_id of this DiningOfferResponseItemSchema.  # noqa: E501

        Identifier for the offer provided by the supplier.  # noqa: E501

        :return: The supplier_offer_id of this DiningOfferResponseItemSchema.  # noqa: E501
        :rtype: str
        """
        return self._supplier_offer_id

    @supplier_offer_id.setter
    def supplier_offer_id(self, supplier_offer_id):
        """Sets the supplier_offer_id of this DiningOfferResponseItemSchema.

        Identifier for the offer provided by the supplier.  # noqa: E501

        :param supplier_offer_id: The supplier_offer_id of this DiningOfferResponseItemSchema.  # noqa: E501
        :type: str
        """

        self._supplier_offer_id = supplier_offer_id

    @property
    def offer_index(self):
        """Gets the offer_index of this DiningOfferResponseItemSchema.  # noqa: E501

        Index of the offer for sorting and reference.  # noqa: E501

        :return: The offer_index of this DiningOfferResponseItemSchema.  # noqa: E501
        :rtype: float
        """
        return self._offer_index

    @offer_index.setter
    def offer_index(self, offer_index):
        """Sets the offer_index of this DiningOfferResponseItemSchema.

        Index of the offer for sorting and reference.  # noqa: E501

        :param offer_index: The offer_index of this DiningOfferResponseItemSchema.  # noqa: E501
        :type: float
        """

        self._offer_index = offer_index

    @property
    def offer_tax(self):
        """Gets the offer_tax of this DiningOfferResponseItemSchema.  # noqa: E501

        Tax applied to the dining offer.  # noqa: E501

        :return: The offer_tax of this DiningOfferResponseItemSchema.  # noqa: E501
        :rtype: float
        """
        return self._offer_tax

    @offer_tax.setter
    def offer_tax(self, offer_tax):
        """Sets the offer_tax of this DiningOfferResponseItemSchema.

        Tax applied to the dining offer.  # noqa: E501

        :param offer_tax: The offer_tax of this DiningOfferResponseItemSchema.  # noqa: E501
        :type: float
        """

        self._offer_tax = offer_tax

    @property
    def offer_price(self):
        """Gets the offer_price of this DiningOfferResponseItemSchema.  # noqa: E501

        Price of the dining experience.  # noqa: E501

        :return: The offer_price of this DiningOfferResponseItemSchema.  # noqa: E501
        :rtype: float
        """
        return self._offer_price

    @offer_price.setter
    def offer_price(self, offer_price):
        """Sets the offer_price of this DiningOfferResponseItemSchema.

        Price of the dining experience.  # noqa: E501

        :param offer_price: The offer_price of this DiningOfferResponseItemSchema.  # noqa: E501
        :type: float
        """

        self._offer_price = offer_price

    @property
    def offer_currency(self):
        """Gets the offer_currency of this DiningOfferResponseItemSchema.  # noqa: E501

        Currency in which the offer is priced.  # noqa: E501

        :return: The offer_currency of this DiningOfferResponseItemSchema.  # noqa: E501
        :rtype: str
        """
        return self._offer_currency

    @offer_currency.setter
    def offer_currency(self, offer_currency):
        """Sets the offer_currency of this DiningOfferResponseItemSchema.

        Currency in which the offer is priced.  # noqa: E501

        :param offer_currency: The offer_currency of this DiningOfferResponseItemSchema.  # noqa: E501
        :type: str
        """

        self._offer_currency = offer_currency

    @property
    def offer_cancellation_policies(self):
        """Gets the offer_cancellation_policies of this DiningOfferResponseItemSchema.  # noqa: E501

        Cancellation policies applicable to the dining offer.  # noqa: E501

        :return: The offer_cancellation_policies of this DiningOfferResponseItemSchema.  # noqa: E501
        :rtype: str
        """
        return self._offer_cancellation_policies

    @offer_cancellation_policies.setter
    def offer_cancellation_policies(self, offer_cancellation_policies):
        """Sets the offer_cancellation_policies of this DiningOfferResponseItemSchema.

        Cancellation policies applicable to the dining offer.  # noqa: E501

        :param offer_cancellation_policies: The offer_cancellation_policies of this DiningOfferResponseItemSchema.  # noqa: E501
        :type: str
        """

        self._offer_cancellation_policies = offer_cancellation_policies

    @property
    def dining_name(self):
        """Gets the dining_name of this DiningOfferResponseItemSchema.  # noqa: E501

        Name of the dining establishment.  # noqa: E501

        :return: The dining_name of this DiningOfferResponseItemSchema.  # noqa: E501
        :rtype: str
        """
        return self._dining_name

    @dining_name.setter
    def dining_name(self, dining_name):
        """Sets the dining_name of this DiningOfferResponseItemSchema.

        Name of the dining establishment.  # noqa: E501

        :param dining_name: The dining_name of this DiningOfferResponseItemSchema.  # noqa: E501
        :type: str
        """

        self._dining_name = dining_name

    @property
    def dining_description(self):
        """Gets the dining_description of this DiningOfferResponseItemSchema.  # noqa: E501

        Description of the dining establishment and the dining experience.  # noqa: E501

        :return: The dining_description of this DiningOfferResponseItemSchema.  # noqa: E501
        :rtype: str
        """
        return self._dining_description

    @dining_description.setter
    def dining_description(self, dining_description):
        """Sets the dining_description of this DiningOfferResponseItemSchema.

        Description of the dining establishment and the dining experience.  # noqa: E501

        :param dining_description: The dining_description of this DiningOfferResponseItemSchema.  # noqa: E501
        :type: str
        """

        self._dining_description = dining_description

    @property
    def dining_address(self):
        """Gets the dining_address of this DiningOfferResponseItemSchema.  # noqa: E501

        Physical address of the dining establishment.  # noqa: E501

        :return: The dining_address of this DiningOfferResponseItemSchema.  # noqa: E501
        :rtype: str
        """
        return self._dining_address

    @dining_address.setter
    def dining_address(self, dining_address):
        """Sets the dining_address of this DiningOfferResponseItemSchema.

        Physical address of the dining establishment.  # noqa: E501

        :param dining_address: The dining_address of this DiningOfferResponseItemSchema.  # noqa: E501
        :type: str
        """

        self._dining_address = dining_address

    @property
    def dining_latitude(self):
        """Gets the dining_latitude of this DiningOfferResponseItemSchema.  # noqa: E501

        Latitude coordinate of the dining location.  # noqa: E501

        :return: The dining_latitude of this DiningOfferResponseItemSchema.  # noqa: E501
        :rtype: float
        """
        return self._dining_latitude

    @dining_latitude.setter
    def dining_latitude(self, dining_latitude):
        """Sets the dining_latitude of this DiningOfferResponseItemSchema.

        Latitude coordinate of the dining location.  # noqa: E501

        :param dining_latitude: The dining_latitude of this DiningOfferResponseItemSchema.  # noqa: E501
        :type: float
        """

        self._dining_latitude = dining_latitude

    @property
    def dining_longitude(self):
        """Gets the dining_longitude of this DiningOfferResponseItemSchema.  # noqa: E501

        Longitude coordinate of the dining location.  # noqa: E501

        :return: The dining_longitude of this DiningOfferResponseItemSchema.  # noqa: E501
        :rtype: float
        """
        return self._dining_longitude

    @dining_longitude.setter
    def dining_longitude(self, dining_longitude):
        """Sets the dining_longitude of this DiningOfferResponseItemSchema.

        Longitude coordinate of the dining location.  # noqa: E501

        :param dining_longitude: The dining_longitude of this DiningOfferResponseItemSchema.  # noqa: E501
        :type: float
        """

        self._dining_longitude = dining_longitude

    @property
    def dining_distance(self):
        """Gets the dining_distance of this DiningOfferResponseItemSchema.  # noqa: E501

        Distance to the dining location from a reference point, if applicable.  # noqa: E501

        :return: The dining_distance of this DiningOfferResponseItemSchema.  # noqa: E501
        :rtype: float
        """
        return self._dining_distance

    @dining_distance.setter
    def dining_distance(self, dining_distance):
        """Sets the dining_distance of this DiningOfferResponseItemSchema.

        Distance to the dining location from a reference point, if applicable.  # noqa: E501

        :param dining_distance: The dining_distance of this DiningOfferResponseItemSchema.  # noqa: E501
        :type: float
        """

        self._dining_distance = dining_distance

    @property
    def dining_distance_metric(self):
        """Gets the dining_distance_metric of this DiningOfferResponseItemSchema.  # noqa: E501

        Metric used to measure the distance (e.g., miles, kilometers).  # noqa: E501

        :return: The dining_distance_metric of this DiningOfferResponseItemSchema.  # noqa: E501
        :rtype: str
        """
        return self._dining_distance_metric

    @dining_distance_metric.setter
    def dining_distance_metric(self, dining_distance_metric):
        """Sets the dining_distance_metric of this DiningOfferResponseItemSchema.

        Metric used to measure the distance (e.g., miles, kilometers).  # noqa: E501

        :param dining_distance_metric: The dining_distance_metric of this DiningOfferResponseItemSchema.  # noqa: E501
        :type: str
        """

        self._dining_distance_metric = dining_distance_metric

    @property
    def dining_images(self):
        """Gets the dining_images of this DiningOfferResponseItemSchema.  # noqa: E501

        Collection of images of the dining establishment and dishes.  # noqa: E501

        :return: The dining_images of this DiningOfferResponseItemSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._dining_images

    @dining_images.setter
    def dining_images(self, dining_images):
        """Sets the dining_images of this DiningOfferResponseItemSchema.

        Collection of images of the dining establishment and dishes.  # noqa: E501

        :param dining_images: The dining_images of this DiningOfferResponseItemSchema.  # noqa: E501
        :type: list[str]
        """

        self._dining_images = dining_images

    @property
    def dining_rating(self):
        """Gets the dining_rating of this DiningOfferResponseItemSchema.  # noqa: E501

        Rating of the dining establishment based on customer reviews.  # noqa: E501

        :return: The dining_rating of this DiningOfferResponseItemSchema.  # noqa: E501
        :rtype: float
        """
        return self._dining_rating

    @dining_rating.setter
    def dining_rating(self, dining_rating):
        """Sets the dining_rating of this DiningOfferResponseItemSchema.

        Rating of the dining establishment based on customer reviews.  # noqa: E501

        :param dining_rating: The dining_rating of this DiningOfferResponseItemSchema.  # noqa: E501
        :type: float
        """

        self._dining_rating = dining_rating

    @property
    def dining_reviews(self):
        """Gets the dining_reviews of this DiningOfferResponseItemSchema.  # noqa: E501

        Customer reviews for the dining establishment.  # noqa: E501

        :return: The dining_reviews of this DiningOfferResponseItemSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._dining_reviews

    @dining_reviews.setter
    def dining_reviews(self, dining_reviews):
        """Sets the dining_reviews of this DiningOfferResponseItemSchema.

        Customer reviews for the dining establishment.  # noqa: E501

        :param dining_reviews: The dining_reviews of this DiningOfferResponseItemSchema.  # noqa: E501
        :type: list[str]
        """

        self._dining_reviews = dining_reviews

    @property
    def dining_subcategories(self):
        """Gets the dining_subcategories of this DiningOfferResponseItemSchema.  # noqa: E501

        List of subcategories the dining offer belongs to (e.g., Italian, Seafood, Fine Dining).  # noqa: E501

        :return: The dining_subcategories of this DiningOfferResponseItemSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._dining_subcategories

    @dining_subcategories.setter
    def dining_subcategories(self, dining_subcategories):
        """Sets the dining_subcategories of this DiningOfferResponseItemSchema.

        List of subcategories the dining offer belongs to (e.g., Italian, Seafood, Fine Dining).  # noqa: E501

        :param dining_subcategories: The dining_subcategories of this DiningOfferResponseItemSchema.  # noqa: E501
        :type: list[str]
        """

        self._dining_subcategories = dining_subcategories

    @property
    def dining_hours(self):
        """Gets the dining_hours of this DiningOfferResponseItemSchema.  # noqa: E501

        Operating hours of the dining establishment.  # noqa: E501

        :return: The dining_hours of this DiningOfferResponseItemSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._dining_hours

    @dining_hours.setter
    def dining_hours(self, dining_hours):
        """Sets the dining_hours of this DiningOfferResponseItemSchema.

        Operating hours of the dining establishment.  # noqa: E501

        :param dining_hours: The dining_hours of this DiningOfferResponseItemSchema.  # noqa: E501
        :type: list[str]
        """

        self._dining_hours = dining_hours

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiningOfferResponseItemSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiningOfferResponseItemSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
