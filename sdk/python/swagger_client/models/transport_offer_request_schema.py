# coding: utf-8

"""
    Federated Content API

    Welcome to the Federated Content API following Open API Specification (Version 3.0.0)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransportOfferRequestSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pickup_location_latitude': 'float',
        'pickup_location_longitude': 'float',
        'pickup_date': 'date',
        'pickup_time': 'str',
        'adults': 'int',
        'children': 'int',
        'return_location_latitude': 'float',
        'return_location_longitude': 'float',
        'return_date': 'date',
        'return_time': 'str',
        'filter_by_keyword': 'str',
        'filter_by_price_min': 'float',
        'filter_by_price_max': 'float',
        'filter_by_distance_min': 'int',
        'filter_by_distance_max': 'int',
        'filter_by_rating_min': 'int',
        'filter_by_rating_max': 'int',
        'filter_by_stars': 'list[str]',
        'filter_by_facilities': 'list[str]',
        'filter_by_amenities': 'list[str]',
        'filter_by_passengers_min': 'int',
        'filter_by_passengers_max': 'int',
        'filter_by_bags_min': 'int',
        'filter_by_bags_max': 'int',
        'filter_by_type': 'list[str]',
        'filter_by_company': 'list[str]',
        'filter_by_class': 'list[str]',
        'sort_by': 'str',
        'sort_order': 'str',
        'page': 'int',
        'limit': 'int',
        'language': 'str',
        'currency': 'str',
        'metric': 'str'
    }

    attribute_map = {
        'pickup_location_latitude': 'pickup_location_latitude',
        'pickup_location_longitude': 'pickup_location_longitude',
        'pickup_date': 'pickup_date',
        'pickup_time': 'pickup_time',
        'adults': 'adults',
        'children': 'children',
        'return_location_latitude': 'return_location_latitude',
        'return_location_longitude': 'return_location_longitude',
        'return_date': 'return_date',
        'return_time': 'return_time',
        'filter_by_keyword': 'filter_by_keyword',
        'filter_by_price_min': 'filter_by_price_min',
        'filter_by_price_max': 'filter_by_price_max',
        'filter_by_distance_min': 'filter_by_distance_min',
        'filter_by_distance_max': 'filter_by_distance_max',
        'filter_by_rating_min': 'filter_by_rating_min',
        'filter_by_rating_max': 'filter_by_rating_max',
        'filter_by_stars': 'filter_by_stars',
        'filter_by_facilities': 'filter_by_facilities',
        'filter_by_amenities': 'filter_by_amenities',
        'filter_by_passengers_min': 'filter_by_passengers_min',
        'filter_by_passengers_max': 'filter_by_passengers_max',
        'filter_by_bags_min': 'filter_by_bags_min',
        'filter_by_bags_max': 'filter_by_bags_max',
        'filter_by_type': 'filter_by_type',
        'filter_by_company': 'filter_by_company',
        'filter_by_class': 'filter_by_class',
        'sort_by': 'sort_by',
        'sort_order': 'sort_order',
        'page': 'page',
        'limit': 'limit',
        'language': 'language',
        'currency': 'currency',
        'metric': 'metric'
    }

    def __init__(self, pickup_location_latitude=None, pickup_location_longitude=None, pickup_date=None, pickup_time=None, adults=None, children=None, return_location_latitude=None, return_location_longitude=None, return_date=None, return_time=None, filter_by_keyword=None, filter_by_price_min=None, filter_by_price_max=None, filter_by_distance_min=None, filter_by_distance_max=None, filter_by_rating_min=None, filter_by_rating_max=None, filter_by_stars=None, filter_by_facilities=None, filter_by_amenities=None, filter_by_passengers_min=None, filter_by_passengers_max=None, filter_by_bags_min=None, filter_by_bags_max=None, filter_by_type=None, filter_by_company=None, filter_by_class=None, sort_by=None, sort_order=None, page=None, limit=None, language=None, currency=None, metric=None):  # noqa: E501
        """TransportOfferRequestSchema - a model defined in Swagger"""  # noqa: E501
        self._pickup_location_latitude = None
        self._pickup_location_longitude = None
        self._pickup_date = None
        self._pickup_time = None
        self._adults = None
        self._children = None
        self._return_location_latitude = None
        self._return_location_longitude = None
        self._return_date = None
        self._return_time = None
        self._filter_by_keyword = None
        self._filter_by_price_min = None
        self._filter_by_price_max = None
        self._filter_by_distance_min = None
        self._filter_by_distance_max = None
        self._filter_by_rating_min = None
        self._filter_by_rating_max = None
        self._filter_by_stars = None
        self._filter_by_facilities = None
        self._filter_by_amenities = None
        self._filter_by_passengers_min = None
        self._filter_by_passengers_max = None
        self._filter_by_bags_min = None
        self._filter_by_bags_max = None
        self._filter_by_type = None
        self._filter_by_company = None
        self._filter_by_class = None
        self._sort_by = None
        self._sort_order = None
        self._page = None
        self._limit = None
        self._language = None
        self._currency = None
        self._metric = None
        self.discriminator = None
        if pickup_location_latitude is not None:
            self.pickup_location_latitude = pickup_location_latitude
        if pickup_location_longitude is not None:
            self.pickup_location_longitude = pickup_location_longitude
        if pickup_date is not None:
            self.pickup_date = pickup_date
        if pickup_time is not None:
            self.pickup_time = pickup_time
        if adults is not None:
            self.adults = adults
        if children is not None:
            self.children = children
        if return_location_latitude is not None:
            self.return_location_latitude = return_location_latitude
        if return_location_longitude is not None:
            self.return_location_longitude = return_location_longitude
        if return_date is not None:
            self.return_date = return_date
        if return_time is not None:
            self.return_time = return_time
        if filter_by_keyword is not None:
            self.filter_by_keyword = filter_by_keyword
        if filter_by_price_min is not None:
            self.filter_by_price_min = filter_by_price_min
        if filter_by_price_max is not None:
            self.filter_by_price_max = filter_by_price_max
        if filter_by_distance_min is not None:
            self.filter_by_distance_min = filter_by_distance_min
        if filter_by_distance_max is not None:
            self.filter_by_distance_max = filter_by_distance_max
        if filter_by_rating_min is not None:
            self.filter_by_rating_min = filter_by_rating_min
        if filter_by_rating_max is not None:
            self.filter_by_rating_max = filter_by_rating_max
        if filter_by_stars is not None:
            self.filter_by_stars = filter_by_stars
        if filter_by_facilities is not None:
            self.filter_by_facilities = filter_by_facilities
        if filter_by_amenities is not None:
            self.filter_by_amenities = filter_by_amenities
        if filter_by_passengers_min is not None:
            self.filter_by_passengers_min = filter_by_passengers_min
        if filter_by_passengers_max is not None:
            self.filter_by_passengers_max = filter_by_passengers_max
        if filter_by_bags_min is not None:
            self.filter_by_bags_min = filter_by_bags_min
        if filter_by_bags_max is not None:
            self.filter_by_bags_max = filter_by_bags_max
        if filter_by_type is not None:
            self.filter_by_type = filter_by_type
        if filter_by_company is not None:
            self.filter_by_company = filter_by_company
        if filter_by_class is not None:
            self.filter_by_class = filter_by_class
        if sort_by is not None:
            self.sort_by = sort_by
        if sort_order is not None:
            self.sort_order = sort_order
        if page is not None:
            self.page = page
        if limit is not None:
            self.limit = limit
        if language is not None:
            self.language = language
        if currency is not None:
            self.currency = currency
        if metric is not None:
            self.metric = metric

    @property
    def pickup_location_latitude(self):
        """Gets the pickup_location_latitude of this TransportOfferRequestSchema.  # noqa: E501

        Latitude for the pickup location.  # noqa: E501

        :return: The pickup_location_latitude of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: float
        """
        return self._pickup_location_latitude

    @pickup_location_latitude.setter
    def pickup_location_latitude(self, pickup_location_latitude):
        """Sets the pickup_location_latitude of this TransportOfferRequestSchema.

        Latitude for the pickup location.  # noqa: E501

        :param pickup_location_latitude: The pickup_location_latitude of this TransportOfferRequestSchema.  # noqa: E501
        :type: float
        """

        self._pickup_location_latitude = pickup_location_latitude

    @property
    def pickup_location_longitude(self):
        """Gets the pickup_location_longitude of this TransportOfferRequestSchema.  # noqa: E501

        Longitude for the pickup location.  # noqa: E501

        :return: The pickup_location_longitude of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: float
        """
        return self._pickup_location_longitude

    @pickup_location_longitude.setter
    def pickup_location_longitude(self, pickup_location_longitude):
        """Sets the pickup_location_longitude of this TransportOfferRequestSchema.

        Longitude for the pickup location.  # noqa: E501

        :param pickup_location_longitude: The pickup_location_longitude of this TransportOfferRequestSchema.  # noqa: E501
        :type: float
        """

        self._pickup_location_longitude = pickup_location_longitude

    @property
    def pickup_date(self):
        """Gets the pickup_date of this TransportOfferRequestSchema.  # noqa: E501

        Date of the pickup.  # noqa: E501

        :return: The pickup_date of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: date
        """
        return self._pickup_date

    @pickup_date.setter
    def pickup_date(self, pickup_date):
        """Sets the pickup_date of this TransportOfferRequestSchema.

        Date of the pickup.  # noqa: E501

        :param pickup_date: The pickup_date of this TransportOfferRequestSchema.  # noqa: E501
        :type: date
        """

        self._pickup_date = pickup_date

    @property
    def pickup_time(self):
        """Gets the pickup_time of this TransportOfferRequestSchema.  # noqa: E501

        Time of the pickup.  # noqa: E501

        :return: The pickup_time of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._pickup_time

    @pickup_time.setter
    def pickup_time(self, pickup_time):
        """Sets the pickup_time of this TransportOfferRequestSchema.

        Time of the pickup.  # noqa: E501

        :param pickup_time: The pickup_time of this TransportOfferRequestSchema.  # noqa: E501
        :type: str
        """

        self._pickup_time = pickup_time

    @property
    def adults(self):
        """Gets the adults of this TransportOfferRequestSchema.  # noqa: E501

        Number of adults.  # noqa: E501

        :return: The adults of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: int
        """
        return self._adults

    @adults.setter
    def adults(self, adults):
        """Sets the adults of this TransportOfferRequestSchema.

        Number of adults.  # noqa: E501

        :param adults: The adults of this TransportOfferRequestSchema.  # noqa: E501
        :type: int
        """

        self._adults = adults

    @property
    def children(self):
        """Gets the children of this TransportOfferRequestSchema.  # noqa: E501

        Number of children.  # noqa: E501

        :return: The children of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: int
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this TransportOfferRequestSchema.

        Number of children.  # noqa: E501

        :param children: The children of this TransportOfferRequestSchema.  # noqa: E501
        :type: int
        """

        self._children = children

    @property
    def return_location_latitude(self):
        """Gets the return_location_latitude of this TransportOfferRequestSchema.  # noqa: E501

        Latitude for the return location.  # noqa: E501

        :return: The return_location_latitude of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: float
        """
        return self._return_location_latitude

    @return_location_latitude.setter
    def return_location_latitude(self, return_location_latitude):
        """Sets the return_location_latitude of this TransportOfferRequestSchema.

        Latitude for the return location.  # noqa: E501

        :param return_location_latitude: The return_location_latitude of this TransportOfferRequestSchema.  # noqa: E501
        :type: float
        """

        self._return_location_latitude = return_location_latitude

    @property
    def return_location_longitude(self):
        """Gets the return_location_longitude of this TransportOfferRequestSchema.  # noqa: E501

        Longitude for the return location.  # noqa: E501

        :return: The return_location_longitude of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: float
        """
        return self._return_location_longitude

    @return_location_longitude.setter
    def return_location_longitude(self, return_location_longitude):
        """Sets the return_location_longitude of this TransportOfferRequestSchema.

        Longitude for the return location.  # noqa: E501

        :param return_location_longitude: The return_location_longitude of this TransportOfferRequestSchema.  # noqa: E501
        :type: float
        """

        self._return_location_longitude = return_location_longitude

    @property
    def return_date(self):
        """Gets the return_date of this TransportOfferRequestSchema.  # noqa: E501

        Date of the return.  # noqa: E501

        :return: The return_date of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: date
        """
        return self._return_date

    @return_date.setter
    def return_date(self, return_date):
        """Sets the return_date of this TransportOfferRequestSchema.

        Date of the return.  # noqa: E501

        :param return_date: The return_date of this TransportOfferRequestSchema.  # noqa: E501
        :type: date
        """

        self._return_date = return_date

    @property
    def return_time(self):
        """Gets the return_time of this TransportOfferRequestSchema.  # noqa: E501

        Time of the return.  # noqa: E501

        :return: The return_time of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._return_time

    @return_time.setter
    def return_time(self, return_time):
        """Sets the return_time of this TransportOfferRequestSchema.

        Time of the return.  # noqa: E501

        :param return_time: The return_time of this TransportOfferRequestSchema.  # noqa: E501
        :type: str
        """

        self._return_time = return_time

    @property
    def filter_by_keyword(self):
        """Gets the filter_by_keyword of this TransportOfferRequestSchema.  # noqa: E501

        Keyword filter.  # noqa: E501

        :return: The filter_by_keyword of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._filter_by_keyword

    @filter_by_keyword.setter
    def filter_by_keyword(self, filter_by_keyword):
        """Sets the filter_by_keyword of this TransportOfferRequestSchema.

        Keyword filter.  # noqa: E501

        :param filter_by_keyword: The filter_by_keyword of this TransportOfferRequestSchema.  # noqa: E501
        :type: str
        """

        self._filter_by_keyword = filter_by_keyword

    @property
    def filter_by_price_min(self):
        """Gets the filter_by_price_min of this TransportOfferRequestSchema.  # noqa: E501

        Minimum price filter.  # noqa: E501

        :return: The filter_by_price_min of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: float
        """
        return self._filter_by_price_min

    @filter_by_price_min.setter
    def filter_by_price_min(self, filter_by_price_min):
        """Sets the filter_by_price_min of this TransportOfferRequestSchema.

        Minimum price filter.  # noqa: E501

        :param filter_by_price_min: The filter_by_price_min of this TransportOfferRequestSchema.  # noqa: E501
        :type: float
        """

        self._filter_by_price_min = filter_by_price_min

    @property
    def filter_by_price_max(self):
        """Gets the filter_by_price_max of this TransportOfferRequestSchema.  # noqa: E501

        Maximum price filter.  # noqa: E501

        :return: The filter_by_price_max of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: float
        """
        return self._filter_by_price_max

    @filter_by_price_max.setter
    def filter_by_price_max(self, filter_by_price_max):
        """Sets the filter_by_price_max of this TransportOfferRequestSchema.

        Maximum price filter.  # noqa: E501

        :param filter_by_price_max: The filter_by_price_max of this TransportOfferRequestSchema.  # noqa: E501
        :type: float
        """

        self._filter_by_price_max = filter_by_price_max

    @property
    def filter_by_distance_min(self):
        """Gets the filter_by_distance_min of this TransportOfferRequestSchema.  # noqa: E501

        Minimum distance filter.  # noqa: E501

        :return: The filter_by_distance_min of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: int
        """
        return self._filter_by_distance_min

    @filter_by_distance_min.setter
    def filter_by_distance_min(self, filter_by_distance_min):
        """Sets the filter_by_distance_min of this TransportOfferRequestSchema.

        Minimum distance filter.  # noqa: E501

        :param filter_by_distance_min: The filter_by_distance_min of this TransportOfferRequestSchema.  # noqa: E501
        :type: int
        """

        self._filter_by_distance_min = filter_by_distance_min

    @property
    def filter_by_distance_max(self):
        """Gets the filter_by_distance_max of this TransportOfferRequestSchema.  # noqa: E501

        Maximum distance filter.  # noqa: E501

        :return: The filter_by_distance_max of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: int
        """
        return self._filter_by_distance_max

    @filter_by_distance_max.setter
    def filter_by_distance_max(self, filter_by_distance_max):
        """Sets the filter_by_distance_max of this TransportOfferRequestSchema.

        Maximum distance filter.  # noqa: E501

        :param filter_by_distance_max: The filter_by_distance_max of this TransportOfferRequestSchema.  # noqa: E501
        :type: int
        """

        self._filter_by_distance_max = filter_by_distance_max

    @property
    def filter_by_rating_min(self):
        """Gets the filter_by_rating_min of this TransportOfferRequestSchema.  # noqa: E501

        Minimum rating filter.  # noqa: E501

        :return: The filter_by_rating_min of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: int
        """
        return self._filter_by_rating_min

    @filter_by_rating_min.setter
    def filter_by_rating_min(self, filter_by_rating_min):
        """Sets the filter_by_rating_min of this TransportOfferRequestSchema.

        Minimum rating filter.  # noqa: E501

        :param filter_by_rating_min: The filter_by_rating_min of this TransportOfferRequestSchema.  # noqa: E501
        :type: int
        """

        self._filter_by_rating_min = filter_by_rating_min

    @property
    def filter_by_rating_max(self):
        """Gets the filter_by_rating_max of this TransportOfferRequestSchema.  # noqa: E501

        Maximum rating filter.  # noqa: E501

        :return: The filter_by_rating_max of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: int
        """
        return self._filter_by_rating_max

    @filter_by_rating_max.setter
    def filter_by_rating_max(self, filter_by_rating_max):
        """Sets the filter_by_rating_max of this TransportOfferRequestSchema.

        Maximum rating filter.  # noqa: E501

        :param filter_by_rating_max: The filter_by_rating_max of this TransportOfferRequestSchema.  # noqa: E501
        :type: int
        """

        self._filter_by_rating_max = filter_by_rating_max

    @property
    def filter_by_stars(self):
        """Gets the filter_by_stars of this TransportOfferRequestSchema.  # noqa: E501

        Filter by star rating.  # noqa: E501

        :return: The filter_by_stars of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._filter_by_stars

    @filter_by_stars.setter
    def filter_by_stars(self, filter_by_stars):
        """Sets the filter_by_stars of this TransportOfferRequestSchema.

        Filter by star rating.  # noqa: E501

        :param filter_by_stars: The filter_by_stars of this TransportOfferRequestSchema.  # noqa: E501
        :type: list[str]
        """

        self._filter_by_stars = filter_by_stars

    @property
    def filter_by_facilities(self):
        """Gets the filter_by_facilities of this TransportOfferRequestSchema.  # noqa: E501

        Facilities filter.  # noqa: E501

        :return: The filter_by_facilities of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._filter_by_facilities

    @filter_by_facilities.setter
    def filter_by_facilities(self, filter_by_facilities):
        """Sets the filter_by_facilities of this TransportOfferRequestSchema.

        Facilities filter.  # noqa: E501

        :param filter_by_facilities: The filter_by_facilities of this TransportOfferRequestSchema.  # noqa: E501
        :type: list[str]
        """

        self._filter_by_facilities = filter_by_facilities

    @property
    def filter_by_amenities(self):
        """Gets the filter_by_amenities of this TransportOfferRequestSchema.  # noqa: E501

        Amenities filter.  # noqa: E501

        :return: The filter_by_amenities of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._filter_by_amenities

    @filter_by_amenities.setter
    def filter_by_amenities(self, filter_by_amenities):
        """Sets the filter_by_amenities of this TransportOfferRequestSchema.

        Amenities filter.  # noqa: E501

        :param filter_by_amenities: The filter_by_amenities of this TransportOfferRequestSchema.  # noqa: E501
        :type: list[str]
        """

        self._filter_by_amenities = filter_by_amenities

    @property
    def filter_by_passengers_min(self):
        """Gets the filter_by_passengers_min of this TransportOfferRequestSchema.  # noqa: E501

        Minimum passengers filter.  # noqa: E501

        :return: The filter_by_passengers_min of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: int
        """
        return self._filter_by_passengers_min

    @filter_by_passengers_min.setter
    def filter_by_passengers_min(self, filter_by_passengers_min):
        """Sets the filter_by_passengers_min of this TransportOfferRequestSchema.

        Minimum passengers filter.  # noqa: E501

        :param filter_by_passengers_min: The filter_by_passengers_min of this TransportOfferRequestSchema.  # noqa: E501
        :type: int
        """

        self._filter_by_passengers_min = filter_by_passengers_min

    @property
    def filter_by_passengers_max(self):
        """Gets the filter_by_passengers_max of this TransportOfferRequestSchema.  # noqa: E501

        Maximum passengers filter.  # noqa: E501

        :return: The filter_by_passengers_max of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: int
        """
        return self._filter_by_passengers_max

    @filter_by_passengers_max.setter
    def filter_by_passengers_max(self, filter_by_passengers_max):
        """Sets the filter_by_passengers_max of this TransportOfferRequestSchema.

        Maximum passengers filter.  # noqa: E501

        :param filter_by_passengers_max: The filter_by_passengers_max of this TransportOfferRequestSchema.  # noqa: E501
        :type: int
        """

        self._filter_by_passengers_max = filter_by_passengers_max

    @property
    def filter_by_bags_min(self):
        """Gets the filter_by_bags_min of this TransportOfferRequestSchema.  # noqa: E501

        Minimum bags filter.  # noqa: E501

        :return: The filter_by_bags_min of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: int
        """
        return self._filter_by_bags_min

    @filter_by_bags_min.setter
    def filter_by_bags_min(self, filter_by_bags_min):
        """Sets the filter_by_bags_min of this TransportOfferRequestSchema.

        Minimum bags filter.  # noqa: E501

        :param filter_by_bags_min: The filter_by_bags_min of this TransportOfferRequestSchema.  # noqa: E501
        :type: int
        """

        self._filter_by_bags_min = filter_by_bags_min

    @property
    def filter_by_bags_max(self):
        """Gets the filter_by_bags_max of this TransportOfferRequestSchema.  # noqa: E501

        Maximum bags filter.  # noqa: E501

        :return: The filter_by_bags_max of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: int
        """
        return self._filter_by_bags_max

    @filter_by_bags_max.setter
    def filter_by_bags_max(self, filter_by_bags_max):
        """Sets the filter_by_bags_max of this TransportOfferRequestSchema.

        Maximum bags filter.  # noqa: E501

        :param filter_by_bags_max: The filter_by_bags_max of this TransportOfferRequestSchema.  # noqa: E501
        :type: int
        """

        self._filter_by_bags_max = filter_by_bags_max

    @property
    def filter_by_type(self):
        """Gets the filter_by_type of this TransportOfferRequestSchema.  # noqa: E501

        Type filter.  # noqa: E501

        :return: The filter_by_type of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._filter_by_type

    @filter_by_type.setter
    def filter_by_type(self, filter_by_type):
        """Sets the filter_by_type of this TransportOfferRequestSchema.

        Type filter.  # noqa: E501

        :param filter_by_type: The filter_by_type of this TransportOfferRequestSchema.  # noqa: E501
        :type: list[str]
        """

        self._filter_by_type = filter_by_type

    @property
    def filter_by_company(self):
        """Gets the filter_by_company of this TransportOfferRequestSchema.  # noqa: E501

        Company filter.  # noqa: E501

        :return: The filter_by_company of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._filter_by_company

    @filter_by_company.setter
    def filter_by_company(self, filter_by_company):
        """Sets the filter_by_company of this TransportOfferRequestSchema.

        Company filter.  # noqa: E501

        :param filter_by_company: The filter_by_company of this TransportOfferRequestSchema.  # noqa: E501
        :type: list[str]
        """

        self._filter_by_company = filter_by_company

    @property
    def filter_by_class(self):
        """Gets the filter_by_class of this TransportOfferRequestSchema.  # noqa: E501

        Class filter.  # noqa: E501

        :return: The filter_by_class of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._filter_by_class

    @filter_by_class.setter
    def filter_by_class(self, filter_by_class):
        """Sets the filter_by_class of this TransportOfferRequestSchema.

        Class filter.  # noqa: E501

        :param filter_by_class: The filter_by_class of this TransportOfferRequestSchema.  # noqa: E501
        :type: list[str]
        """

        self._filter_by_class = filter_by_class

    @property
    def sort_by(self):
        """Gets the sort_by of this TransportOfferRequestSchema.  # noqa: E501

        Sorting parameter.  # noqa: E501

        :return: The sort_by of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this TransportOfferRequestSchema.

        Sorting parameter.  # noqa: E501

        :param sort_by: The sort_by of this TransportOfferRequestSchema.  # noqa: E501
        :type: str
        """

        self._sort_by = sort_by

    @property
    def sort_order(self):
        """Gets the sort_order of this TransportOfferRequestSchema.  # noqa: E501

        Sort order (asc/desc).  # noqa: E501

        :return: The sort_order of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this TransportOfferRequestSchema.

        Sort order (asc/desc).  # noqa: E501

        :param sort_order: The sort_order of this TransportOfferRequestSchema.  # noqa: E501
        :type: str
        """

        self._sort_order = sort_order

    @property
    def page(self):
        """Gets the page of this TransportOfferRequestSchema.  # noqa: E501

        Page number for pagination.  # noqa: E501

        :return: The page of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this TransportOfferRequestSchema.

        Page number for pagination.  # noqa: E501

        :param page: The page of this TransportOfferRequestSchema.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def limit(self):
        """Gets the limit of this TransportOfferRequestSchema.  # noqa: E501

        Limit of results per page.  # noqa: E501

        :return: The limit of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this TransportOfferRequestSchema.

        Limit of results per page.  # noqa: E501

        :param limit: The limit of this TransportOfferRequestSchema.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def language(self):
        """Gets the language of this TransportOfferRequestSchema.  # noqa: E501

        Language for the results.  # noqa: E501

        :return: The language of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this TransportOfferRequestSchema.

        Language for the results.  # noqa: E501

        :param language: The language of this TransportOfferRequestSchema.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def currency(self):
        """Gets the currency of this TransportOfferRequestSchema.  # noqa: E501

        Currency for pricing.  # noqa: E501

        :return: The currency of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this TransportOfferRequestSchema.

        Currency for pricing.  # noqa: E501

        :param currency: The currency of this TransportOfferRequestSchema.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def metric(self):
        """Gets the metric of this TransportOfferRequestSchema.  # noqa: E501

        Unit of measurement for distances.  # noqa: E501

        :return: The metric of this TransportOfferRequestSchema.  # noqa: E501
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this TransportOfferRequestSchema.

        Unit of measurement for distances.  # noqa: E501

        :param metric: The metric of this TransportOfferRequestSchema.  # noqa: E501
        :type: str
        """

        self._metric = metric

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransportOfferRequestSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransportOfferRequestSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
