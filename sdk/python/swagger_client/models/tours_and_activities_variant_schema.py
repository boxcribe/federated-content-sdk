# coding: utf-8

"""
    Federated Content API

    Welcome to the Federated Content API following Open API Specification (Version 3.0.0)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ToursAndActivitiesVariantSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'variant_id': 'str',
        'supplier_variant_id': 'str',
        'variant_index': 'int',
        'variant_tax': 'float',
        'variant_price': 'float',
        'variant_currency': 'str',
        'variant_cancellation_policies': 'str',
        '_date': 'date',
        'start_time': 'str',
        'adults': 'int',
        'children': 'int',
        'variant_name': 'str',
        'variant_description': 'str',
        'variant_address': 'str',
        'variant_latitude': 'float',
        'variant_longitude': 'float',
        'variant_distance': 'float',
        'variant_distance_metric': 'str',
        'variant_images': 'list[str]',
        'variant_rating': 'float',
        'variant_reviews': 'list[str]',
        'variant_subcategories': 'list[str]',
        'booking_questions': 'list[str]'
    }

    attribute_map = {
        'variant_id': 'variant_id',
        'supplier_variant_id': 'supplier_variant_id',
        'variant_index': 'variant_index',
        'variant_tax': 'variant_tax',
        'variant_price': 'variant_price',
        'variant_currency': 'variant_currency',
        'variant_cancellation_policies': 'variant_cancellation_policies',
        '_date': 'date',
        'start_time': 'startTime',
        'adults': 'adults',
        'children': 'children',
        'variant_name': 'variant_name',
        'variant_description': 'variant_description',
        'variant_address': 'variant_address',
        'variant_latitude': 'variant_latitude',
        'variant_longitude': 'variant_longitude',
        'variant_distance': 'variant_distance',
        'variant_distance_metric': 'variant_distance_metric',
        'variant_images': 'variant_images',
        'variant_rating': 'variant_rating',
        'variant_reviews': 'variant_reviews',
        'variant_subcategories': 'variant_subcategories',
        'booking_questions': 'booking_questions'
    }

    def __init__(self, variant_id=None, supplier_variant_id=None, variant_index=None, variant_tax=None, variant_price=None, variant_currency=None, variant_cancellation_policies=None, _date=None, start_time=None, adults=None, children=None, variant_name=None, variant_description=None, variant_address=None, variant_latitude=None, variant_longitude=None, variant_distance=None, variant_distance_metric=None, variant_images=None, variant_rating=None, variant_reviews=None, variant_subcategories=None, booking_questions=None):  # noqa: E501
        """ToursAndActivitiesVariantSchema - a model defined in Swagger"""  # noqa: E501
        self._variant_id = None
        self._supplier_variant_id = None
        self._variant_index = None
        self._variant_tax = None
        self._variant_price = None
        self._variant_currency = None
        self._variant_cancellation_policies = None
        self.__date = None
        self._start_time = None
        self._adults = None
        self._children = None
        self._variant_name = None
        self._variant_description = None
        self._variant_address = None
        self._variant_latitude = None
        self._variant_longitude = None
        self._variant_distance = None
        self._variant_distance_metric = None
        self._variant_images = None
        self._variant_rating = None
        self._variant_reviews = None
        self._variant_subcategories = None
        self._booking_questions = None
        self.discriminator = None
        if variant_id is not None:
            self.variant_id = variant_id
        if supplier_variant_id is not None:
            self.supplier_variant_id = supplier_variant_id
        if variant_index is not None:
            self.variant_index = variant_index
        if variant_tax is not None:
            self.variant_tax = variant_tax
        if variant_price is not None:
            self.variant_price = variant_price
        if variant_currency is not None:
            self.variant_currency = variant_currency
        if variant_cancellation_policies is not None:
            self.variant_cancellation_policies = variant_cancellation_policies
        if _date is not None:
            self._date = _date
        if start_time is not None:
            self.start_time = start_time
        if adults is not None:
            self.adults = adults
        if children is not None:
            self.children = children
        if variant_name is not None:
            self.variant_name = variant_name
        if variant_description is not None:
            self.variant_description = variant_description
        if variant_address is not None:
            self.variant_address = variant_address
        if variant_latitude is not None:
            self.variant_latitude = variant_latitude
        if variant_longitude is not None:
            self.variant_longitude = variant_longitude
        if variant_distance is not None:
            self.variant_distance = variant_distance
        if variant_distance_metric is not None:
            self.variant_distance_metric = variant_distance_metric
        if variant_images is not None:
            self.variant_images = variant_images
        if variant_rating is not None:
            self.variant_rating = variant_rating
        if variant_reviews is not None:
            self.variant_reviews = variant_reviews
        if variant_subcategories is not None:
            self.variant_subcategories = variant_subcategories
        if booking_questions is not None:
            self.booking_questions = booking_questions

    @property
    def variant_id(self):
        """Gets the variant_id of this ToursAndActivitiesVariantSchema.  # noqa: E501

        Unique identifier for the tour variant.  # noqa: E501

        :return: The variant_id of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :rtype: str
        """
        return self._variant_id

    @variant_id.setter
    def variant_id(self, variant_id):
        """Sets the variant_id of this ToursAndActivitiesVariantSchema.

        Unique identifier for the tour variant.  # noqa: E501

        :param variant_id: The variant_id of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :type: str
        """

        self._variant_id = variant_id

    @property
    def supplier_variant_id(self):
        """Gets the supplier_variant_id of this ToursAndActivitiesVariantSchema.  # noqa: E501

        Identifier given by the supplier for the variant.  # noqa: E501

        :return: The supplier_variant_id of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :rtype: str
        """
        return self._supplier_variant_id

    @supplier_variant_id.setter
    def supplier_variant_id(self, supplier_variant_id):
        """Sets the supplier_variant_id of this ToursAndActivitiesVariantSchema.

        Identifier given by the supplier for the variant.  # noqa: E501

        :param supplier_variant_id: The supplier_variant_id of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :type: str
        """

        self._supplier_variant_id = supplier_variant_id

    @property
    def variant_index(self):
        """Gets the variant_index of this ToursAndActivitiesVariantSchema.  # noqa: E501

        Index of the variant for ordering.  # noqa: E501

        :return: The variant_index of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :rtype: int
        """
        return self._variant_index

    @variant_index.setter
    def variant_index(self, variant_index):
        """Sets the variant_index of this ToursAndActivitiesVariantSchema.

        Index of the variant for ordering.  # noqa: E501

        :param variant_index: The variant_index of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :type: int
        """

        self._variant_index = variant_index

    @property
    def variant_tax(self):
        """Gets the variant_tax of this ToursAndActivitiesVariantSchema.  # noqa: E501

        Tax applied to the variant price.  # noqa: E501

        :return: The variant_tax of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :rtype: float
        """
        return self._variant_tax

    @variant_tax.setter
    def variant_tax(self, variant_tax):
        """Sets the variant_tax of this ToursAndActivitiesVariantSchema.

        Tax applied to the variant price.  # noqa: E501

        :param variant_tax: The variant_tax of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :type: float
        """

        self._variant_tax = variant_tax

    @property
    def variant_price(self):
        """Gets the variant_price of this ToursAndActivitiesVariantSchema.  # noqa: E501

        Price of the tour variant.  # noqa: E501

        :return: The variant_price of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :rtype: float
        """
        return self._variant_price

    @variant_price.setter
    def variant_price(self, variant_price):
        """Sets the variant_price of this ToursAndActivitiesVariantSchema.

        Price of the tour variant.  # noqa: E501

        :param variant_price: The variant_price of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :type: float
        """

        self._variant_price = variant_price

    @property
    def variant_currency(self):
        """Gets the variant_currency of this ToursAndActivitiesVariantSchema.  # noqa: E501

        Currency of the variant price.  # noqa: E501

        :return: The variant_currency of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :rtype: str
        """
        return self._variant_currency

    @variant_currency.setter
    def variant_currency(self, variant_currency):
        """Sets the variant_currency of this ToursAndActivitiesVariantSchema.

        Currency of the variant price.  # noqa: E501

        :param variant_currency: The variant_currency of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :type: str
        """

        self._variant_currency = variant_currency

    @property
    def variant_cancellation_policies(self):
        """Gets the variant_cancellation_policies of this ToursAndActivitiesVariantSchema.  # noqa: E501

        Cancellation policies applicable to the tour variant.  # noqa: E501

        :return: The variant_cancellation_policies of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :rtype: str
        """
        return self._variant_cancellation_policies

    @variant_cancellation_policies.setter
    def variant_cancellation_policies(self, variant_cancellation_policies):
        """Sets the variant_cancellation_policies of this ToursAndActivitiesVariantSchema.

        Cancellation policies applicable to the tour variant.  # noqa: E501

        :param variant_cancellation_policies: The variant_cancellation_policies of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :type: str
        """

        self._variant_cancellation_policies = variant_cancellation_policies

    @property
    def _date(self):
        """Gets the _date of this ToursAndActivitiesVariantSchema.  # noqa: E501

        Date of the tour.  # noqa: E501

        :return: The _date of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ToursAndActivitiesVariantSchema.

        Date of the tour.  # noqa: E501

        :param _date: The _date of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def start_time(self):
        """Gets the start_time of this ToursAndActivitiesVariantSchema.  # noqa: E501

        Start time of the tour.  # noqa: E501

        :return: The start_time of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ToursAndActivitiesVariantSchema.

        Start time of the tour.  # noqa: E501

        :param start_time: The start_time of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def adults(self):
        """Gets the adults of this ToursAndActivitiesVariantSchema.  # noqa: E501

        Number of adults for the tour.  # noqa: E501

        :return: The adults of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :rtype: int
        """
        return self._adults

    @adults.setter
    def adults(self, adults):
        """Sets the adults of this ToursAndActivitiesVariantSchema.

        Number of adults for the tour.  # noqa: E501

        :param adults: The adults of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :type: int
        """

        self._adults = adults

    @property
    def children(self):
        """Gets the children of this ToursAndActivitiesVariantSchema.  # noqa: E501

        Number of children for the tour.  # noqa: E501

        :return: The children of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :rtype: int
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this ToursAndActivitiesVariantSchema.

        Number of children for the tour.  # noqa: E501

        :param children: The children of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :type: int
        """

        self._children = children

    @property
    def variant_name(self):
        """Gets the variant_name of this ToursAndActivitiesVariantSchema.  # noqa: E501

        Name of the tour variant.  # noqa: E501

        :return: The variant_name of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :rtype: str
        """
        return self._variant_name

    @variant_name.setter
    def variant_name(self, variant_name):
        """Sets the variant_name of this ToursAndActivitiesVariantSchema.

        Name of the tour variant.  # noqa: E501

        :param variant_name: The variant_name of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :type: str
        """

        self._variant_name = variant_name

    @property
    def variant_description(self):
        """Gets the variant_description of this ToursAndActivitiesVariantSchema.  # noqa: E501

        Description of the tour variant.  # noqa: E501

        :return: The variant_description of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :rtype: str
        """
        return self._variant_description

    @variant_description.setter
    def variant_description(self, variant_description):
        """Sets the variant_description of this ToursAndActivitiesVariantSchema.

        Description of the tour variant.  # noqa: E501

        :param variant_description: The variant_description of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :type: str
        """

        self._variant_description = variant_description

    @property
    def variant_address(self):
        """Gets the variant_address of this ToursAndActivitiesVariantSchema.  # noqa: E501

        Address where the tour variant takes place.  # noqa: E501

        :return: The variant_address of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :rtype: str
        """
        return self._variant_address

    @variant_address.setter
    def variant_address(self, variant_address):
        """Sets the variant_address of this ToursAndActivitiesVariantSchema.

        Address where the tour variant takes place.  # noqa: E501

        :param variant_address: The variant_address of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :type: str
        """

        self._variant_address = variant_address

    @property
    def variant_latitude(self):
        """Gets the variant_latitude of this ToursAndActivitiesVariantSchema.  # noqa: E501

        Latitude coordinate of the tour location.  # noqa: E501

        :return: The variant_latitude of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :rtype: float
        """
        return self._variant_latitude

    @variant_latitude.setter
    def variant_latitude(self, variant_latitude):
        """Sets the variant_latitude of this ToursAndActivitiesVariantSchema.

        Latitude coordinate of the tour location.  # noqa: E501

        :param variant_latitude: The variant_latitude of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :type: float
        """

        self._variant_latitude = variant_latitude

    @property
    def variant_longitude(self):
        """Gets the variant_longitude of this ToursAndActivitiesVariantSchema.  # noqa: E501

        Longitude coordinate of the tour location.  # noqa: E501

        :return: The variant_longitude of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :rtype: float
        """
        return self._variant_longitude

    @variant_longitude.setter
    def variant_longitude(self, variant_longitude):
        """Sets the variant_longitude of this ToursAndActivitiesVariantSchema.

        Longitude coordinate of the tour location.  # noqa: E501

        :param variant_longitude: The variant_longitude of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :type: float
        """

        self._variant_longitude = variant_longitude

    @property
    def variant_distance(self):
        """Gets the variant_distance of this ToursAndActivitiesVariantSchema.  # noqa: E501

        Distance covered during the tour.  # noqa: E501

        :return: The variant_distance of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :rtype: float
        """
        return self._variant_distance

    @variant_distance.setter
    def variant_distance(self, variant_distance):
        """Sets the variant_distance of this ToursAndActivitiesVariantSchema.

        Distance covered during the tour.  # noqa: E501

        :param variant_distance: The variant_distance of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :type: float
        """

        self._variant_distance = variant_distance

    @property
    def variant_distance_metric(self):
        """Gets the variant_distance_metric of this ToursAndActivitiesVariantSchema.  # noqa: E501

        Metric used for distance measurement (miles or kilometers).  # noqa: E501

        :return: The variant_distance_metric of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :rtype: str
        """
        return self._variant_distance_metric

    @variant_distance_metric.setter
    def variant_distance_metric(self, variant_distance_metric):
        """Sets the variant_distance_metric of this ToursAndActivitiesVariantSchema.

        Metric used for distance measurement (miles or kilometers).  # noqa: E501

        :param variant_distance_metric: The variant_distance_metric of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :type: str
        """

        self._variant_distance_metric = variant_distance_metric

    @property
    def variant_images(self):
        """Gets the variant_images of this ToursAndActivitiesVariantSchema.  # noqa: E501

        Array of images related to the tour variant.  # noqa: E501

        :return: The variant_images of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._variant_images

    @variant_images.setter
    def variant_images(self, variant_images):
        """Sets the variant_images of this ToursAndActivitiesVariantSchema.

        Array of images related to the tour variant.  # noqa: E501

        :param variant_images: The variant_images of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :type: list[str]
        """

        self._variant_images = variant_images

    @property
    def variant_rating(self):
        """Gets the variant_rating of this ToursAndActivitiesVariantSchema.  # noqa: E501

        Rating of the tour variant.  # noqa: E501

        :return: The variant_rating of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :rtype: float
        """
        return self._variant_rating

    @variant_rating.setter
    def variant_rating(self, variant_rating):
        """Sets the variant_rating of this ToursAndActivitiesVariantSchema.

        Rating of the tour variant.  # noqa: E501

        :param variant_rating: The variant_rating of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :type: float
        """

        self._variant_rating = variant_rating

    @property
    def variant_reviews(self):
        """Gets the variant_reviews of this ToursAndActivitiesVariantSchema.  # noqa: E501

        Collection of reviews for the tour variant.  # noqa: E501

        :return: The variant_reviews of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._variant_reviews

    @variant_reviews.setter
    def variant_reviews(self, variant_reviews):
        """Sets the variant_reviews of this ToursAndActivitiesVariantSchema.

        Collection of reviews for the tour variant.  # noqa: E501

        :param variant_reviews: The variant_reviews of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :type: list[str]
        """

        self._variant_reviews = variant_reviews

    @property
    def variant_subcategories(self):
        """Gets the variant_subcategories of this ToursAndActivitiesVariantSchema.  # noqa: E501

        Subcategories of the tour variant.  # noqa: E501

        :return: The variant_subcategories of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._variant_subcategories

    @variant_subcategories.setter
    def variant_subcategories(self, variant_subcategories):
        """Sets the variant_subcategories of this ToursAndActivitiesVariantSchema.

        Subcategories of the tour variant.  # noqa: E501

        :param variant_subcategories: The variant_subcategories of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :type: list[str]
        """

        self._variant_subcategories = variant_subcategories

    @property
    def booking_questions(self):
        """Gets the booking_questions of this ToursAndActivitiesVariantSchema.  # noqa: E501

        Questions related to booking the tour variant.  # noqa: E501

        :return: The booking_questions of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._booking_questions

    @booking_questions.setter
    def booking_questions(self, booking_questions):
        """Sets the booking_questions of this ToursAndActivitiesVariantSchema.

        Questions related to booking the tour variant.  # noqa: E501

        :param booking_questions: The booking_questions of this ToursAndActivitiesVariantSchema.  # noqa: E501
        :type: list[str]
        """

        self._booking_questions = booking_questions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ToursAndActivitiesVariantSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ToursAndActivitiesVariantSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
