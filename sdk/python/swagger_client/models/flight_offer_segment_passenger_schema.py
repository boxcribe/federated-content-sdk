# coding: utf-8

"""
    Federated Content API

    Welcome to the Federated Content API following Open API Specification (Version 3.0.0)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FlightOfferSegmentPassengerSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'passenger_id': 'str',
        'cabin': 'str',
        'bags': 'list[FlightOfferSegmentPassengerSchemaBags]',
        'seat_number': 'str'
    }

    attribute_map = {
        'passenger_id': 'passenger_id',
        'cabin': 'cabin',
        'bags': 'bags',
        'seat_number': 'seat_number'
    }

    def __init__(self, passenger_id=None, cabin=None, bags=None, seat_number=None):  # noqa: E501
        """FlightOfferSegmentPassengerSchema - a model defined in Swagger"""  # noqa: E501
        self._passenger_id = None
        self._cabin = None
        self._bags = None
        self._seat_number = None
        self.discriminator = None
        if passenger_id is not None:
            self.passenger_id = passenger_id
        if cabin is not None:
            self.cabin = cabin
        if bags is not None:
            self.bags = bags
        if seat_number is not None:
            self.seat_number = seat_number

    @property
    def passenger_id(self):
        """Gets the passenger_id of this FlightOfferSegmentPassengerSchema.  # noqa: E501

        Unique identifier for a passenger.  # noqa: E501

        :return: The passenger_id of this FlightOfferSegmentPassengerSchema.  # noqa: E501
        :rtype: str
        """
        return self._passenger_id

    @passenger_id.setter
    def passenger_id(self, passenger_id):
        """Sets the passenger_id of this FlightOfferSegmentPassengerSchema.

        Unique identifier for a passenger.  # noqa: E501

        :param passenger_id: The passenger_id of this FlightOfferSegmentPassengerSchema.  # noqa: E501
        :type: str
        """

        self._passenger_id = passenger_id

    @property
    def cabin(self):
        """Gets the cabin of this FlightOfferSegmentPassengerSchema.  # noqa: E501

        Class options: first, business, premium economy, economy.  # noqa: E501

        :return: The cabin of this FlightOfferSegmentPassengerSchema.  # noqa: E501
        :rtype: str
        """
        return self._cabin

    @cabin.setter
    def cabin(self, cabin):
        """Sets the cabin of this FlightOfferSegmentPassengerSchema.

        Class options: first, business, premium economy, economy.  # noqa: E501

        :param cabin: The cabin of this FlightOfferSegmentPassengerSchema.  # noqa: E501
        :type: str
        """

        self._cabin = cabin

    @property
    def bags(self):
        """Gets the bags of this FlightOfferSegmentPassengerSchema.  # noqa: E501

        Array of extra baggage, detailing type and qty.  # noqa: E501

        :return: The bags of this FlightOfferSegmentPassengerSchema.  # noqa: E501
        :rtype: list[FlightOfferSegmentPassengerSchemaBags]
        """
        return self._bags

    @bags.setter
    def bags(self, bags):
        """Sets the bags of this FlightOfferSegmentPassengerSchema.

        Array of extra baggage, detailing type and qty.  # noqa: E501

        :param bags: The bags of this FlightOfferSegmentPassengerSchema.  # noqa: E501
        :type: list[FlightOfferSegmentPassengerSchemaBags]
        """

        self._bags = bags

    @property
    def seat_number(self):
        """Gets the seat_number of this FlightOfferSegmentPassengerSchema.  # noqa: E501

        Seat number assigned to the passenger, returned only on reprice with seat selection.  # noqa: E501

        :return: The seat_number of this FlightOfferSegmentPassengerSchema.  # noqa: E501
        :rtype: str
        """
        return self._seat_number

    @seat_number.setter
    def seat_number(self, seat_number):
        """Sets the seat_number of this FlightOfferSegmentPassengerSchema.

        Seat number assigned to the passenger, returned only on reprice with seat selection.  # noqa: E501

        :param seat_number: The seat_number of this FlightOfferSegmentPassengerSchema.  # noqa: E501
        :type: str
        """

        self._seat_number = seat_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FlightOfferSegmentPassengerSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlightOfferSegmentPassengerSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
