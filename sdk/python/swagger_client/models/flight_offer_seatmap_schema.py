# coding: utf-8

"""
    Federated Content API

    Welcome to the Federated Content API following Open API Specification (Version 3.0.0)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FlightOfferSeatmapSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'seatmap_id': 'str',
        'leg_id': 'str',
        'segment_id': 'str',
        'seatmap_data': 'object'
    }

    attribute_map = {
        'seatmap_id': 'seatmap_id',
        'leg_id': 'leg_id',
        'segment_id': 'segment_id',
        'seatmap_data': 'seatmap_data'
    }

    def __init__(self, seatmap_id=None, leg_id=None, segment_id=None, seatmap_data=None):  # noqa: E501
        """FlightOfferSeatmapSchema - a model defined in Swagger"""  # noqa: E501
        self._seatmap_id = None
        self._leg_id = None
        self._segment_id = None
        self._seatmap_data = None
        self.discriminator = None
        if seatmap_id is not None:
            self.seatmap_id = seatmap_id
        if leg_id is not None:
            self.leg_id = leg_id
        if segment_id is not None:
            self.segment_id = segment_id
        if seatmap_data is not None:
            self.seatmap_data = seatmap_data

    @property
    def seatmap_id(self):
        """Gets the seatmap_id of this FlightOfferSeatmapSchema.  # noqa: E501

        Unique identifier for a specific seatmap.  # noqa: E501

        :return: The seatmap_id of this FlightOfferSeatmapSchema.  # noqa: E501
        :rtype: str
        """
        return self._seatmap_id

    @seatmap_id.setter
    def seatmap_id(self, seatmap_id):
        """Sets the seatmap_id of this FlightOfferSeatmapSchema.

        Unique identifier for a specific seatmap.  # noqa: E501

        :param seatmap_id: The seatmap_id of this FlightOfferSeatmapSchema.  # noqa: E501
        :type: str
        """

        self._seatmap_id = seatmap_id

    @property
    def leg_id(self):
        """Gets the leg_id of this FlightOfferSeatmapSchema.  # noqa: E501

        Identifier for a specific leg of the journey related to the seatmap.  # noqa: E501

        :return: The leg_id of this FlightOfferSeatmapSchema.  # noqa: E501
        :rtype: str
        """
        return self._leg_id

    @leg_id.setter
    def leg_id(self, leg_id):
        """Sets the leg_id of this FlightOfferSeatmapSchema.

        Identifier for a specific leg of the journey related to the seatmap.  # noqa: E501

        :param leg_id: The leg_id of this FlightOfferSeatmapSchema.  # noqa: E501
        :type: str
        """

        self._leg_id = leg_id

    @property
    def segment_id(self):
        """Gets the segment_id of this FlightOfferSeatmapSchema.  # noqa: E501

        Identifier for a specific segment of the journey related to the seatmap.  # noqa: E501

        :return: The segment_id of this FlightOfferSeatmapSchema.  # noqa: E501
        :rtype: str
        """
        return self._segment_id

    @segment_id.setter
    def segment_id(self, segment_id):
        """Sets the segment_id of this FlightOfferSeatmapSchema.

        Identifier for a specific segment of the journey related to the seatmap.  # noqa: E501

        :param segment_id: The segment_id of this FlightOfferSeatmapSchema.  # noqa: E501
        :type: str
        """

        self._segment_id = segment_id

    @property
    def seatmap_data(self):
        """Gets the seatmap_data of this FlightOfferSeatmapSchema.  # noqa: E501

        Json data containing detailed seatmap information including layout and availability.  # noqa: E501

        :return: The seatmap_data of this FlightOfferSeatmapSchema.  # noqa: E501
        :rtype: object
        """
        return self._seatmap_data

    @seatmap_data.setter
    def seatmap_data(self, seatmap_data):
        """Sets the seatmap_data of this FlightOfferSeatmapSchema.

        Json data containing detailed seatmap information including layout and availability.  # noqa: E501

        :param seatmap_data: The seatmap_data of this FlightOfferSeatmapSchema.  # noqa: E501
        :type: object
        """

        self._seatmap_data = seatmap_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FlightOfferSeatmapSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlightOfferSeatmapSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
