# coding: utf-8

"""
    Federated Content API

    Welcome to the Federated Content API following Open API Specification (Version 3.0.0)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FieldsIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tenant_id': 'str',
        'schema_id': 'str',
        'name': 'str',
        'type': 'str',
        'slug': 'str',
        'description': 'str',
        'status': 'str',
        'is_searchable': 'bool',
        'is_sortable': 'bool',
        'system': 'bool'
    }

    attribute_map = {
        'tenant_id': 'tenant_id',
        'schema_id': 'schema_id',
        'name': 'name',
        'type': 'type',
        'slug': 'slug',
        'description': 'description',
        'status': 'status',
        'is_searchable': 'is_searchable',
        'is_sortable': 'is_sortable',
        'system': 'system'
    }

    def __init__(self, tenant_id=None, schema_id=None, name=None, type=None, slug=None, description=None, status=None, is_searchable=None, is_sortable=None, system=None):  # noqa: E501
        """FieldsIdBody - a model defined in Swagger"""  # noqa: E501
        self._tenant_id = None
        self._schema_id = None
        self._name = None
        self._type = None
        self._slug = None
        self._description = None
        self._status = None
        self._is_searchable = None
        self._is_sortable = None
        self._system = None
        self.discriminator = None
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if schema_id is not None:
            self.schema_id = schema_id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if slug is not None:
            self.slug = slug
        if description is not None:
            self.description = description
        if status is not None:
            self.status = status
        if is_searchable is not None:
            self.is_searchable = is_searchable
        if is_sortable is not None:
            self.is_sortable = is_sortable
        if system is not None:
            self.system = system

    @property
    def tenant_id(self):
        """Gets the tenant_id of this FieldsIdBody.  # noqa: E501


        :return: The tenant_id of this FieldsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this FieldsIdBody.


        :param tenant_id: The tenant_id of this FieldsIdBody.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def schema_id(self):
        """Gets the schema_id of this FieldsIdBody.  # noqa: E501


        :return: The schema_id of this FieldsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._schema_id

    @schema_id.setter
    def schema_id(self, schema_id):
        """Sets the schema_id of this FieldsIdBody.


        :param schema_id: The schema_id of this FieldsIdBody.  # noqa: E501
        :type: str
        """

        self._schema_id = schema_id

    @property
    def name(self):
        """Gets the name of this FieldsIdBody.  # noqa: E501


        :return: The name of this FieldsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FieldsIdBody.


        :param name: The name of this FieldsIdBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this FieldsIdBody.  # noqa: E501


        :return: The type of this FieldsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FieldsIdBody.


        :param type: The type of this FieldsIdBody.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def slug(self):
        """Gets the slug of this FieldsIdBody.  # noqa: E501


        :return: The slug of this FieldsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this FieldsIdBody.


        :param slug: The slug of this FieldsIdBody.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def description(self):
        """Gets the description of this FieldsIdBody.  # noqa: E501

        Description of the field  # noqa: E501

        :return: The description of this FieldsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FieldsIdBody.

        Description of the field  # noqa: E501

        :param description: The description of this FieldsIdBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def status(self):
        """Gets the status of this FieldsIdBody.  # noqa: E501


        :return: The status of this FieldsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FieldsIdBody.


        :param status: The status of this FieldsIdBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["Active", "Inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def is_searchable(self):
        """Gets the is_searchable of this FieldsIdBody.  # noqa: E501


        :return: The is_searchable of this FieldsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_searchable

    @is_searchable.setter
    def is_searchable(self, is_searchable):
        """Sets the is_searchable of this FieldsIdBody.


        :param is_searchable: The is_searchable of this FieldsIdBody.  # noqa: E501
        :type: bool
        """

        self._is_searchable = is_searchable

    @property
    def is_sortable(self):
        """Gets the is_sortable of this FieldsIdBody.  # noqa: E501


        :return: The is_sortable of this FieldsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_sortable

    @is_sortable.setter
    def is_sortable(self, is_sortable):
        """Sets the is_sortable of this FieldsIdBody.


        :param is_sortable: The is_sortable of this FieldsIdBody.  # noqa: E501
        :type: bool
        """

        self._is_sortable = is_sortable

    @property
    def system(self):
        """Gets the system of this FieldsIdBody.  # noqa: E501


        :return: The system of this FieldsIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this FieldsIdBody.


        :param system: The system of this FieldsIdBody.  # noqa: E501
        :type: bool
        """

        self._system = system

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FieldsIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldsIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
