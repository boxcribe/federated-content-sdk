<?php
/**
 * FlightBookingPassengerSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Federated Content API
 *
 * Welcome to the Federated Content API following Open API Specification (Version 3.0.0)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.57
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FlightBookingPassengerSchema Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FlightBookingPassengerSchema implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FlightBookingPassengerSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'passenger_id' => 'string',
        'type' => 'string',
        'title' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'gender' => 'string',
        'date_of_birth' => '\DateTime',
        'country' => 'string',
        'phone_prefix' => 'string',
        'phone_number' => 'string',
        'passport_type' => 'string',
        'passport_number' => 'string',
        'passport_expiration_date' => '\DateTime',
        'passport_country' => 'string',
        'loyalty_airline' => 'string',
        'loyalty_number' => 'string',
        'known_traveler_number' => 'string',
        'passenger_redress_number' => 'string',
        'associated_infant_passenger_id' => 'string',
        'seats' => '\Swagger\Client\Model\BookingPassengerSelectedSeatSchema[]',
        'bags' => '\Swagger\Client\Model\BookingPassengerExtraBagSchema[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'passenger_id' => 'uuid',
        'type' => null,
        'title' => null,
        'first_name' => null,
        'last_name' => null,
        'gender' => null,
        'date_of_birth' => 'date',
        'country' => null,
        'phone_prefix' => null,
        'phone_number' => null,
        'passport_type' => null,
        'passport_number' => null,
        'passport_expiration_date' => 'date',
        'passport_country' => null,
        'loyalty_airline' => null,
        'loyalty_number' => null,
        'known_traveler_number' => null,
        'passenger_redress_number' => null,
        'associated_infant_passenger_id' => 'uuid',
        'seats' => null,
        'bags' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'passenger_id' => 'passenger_id',
        'type' => 'type',
        'title' => 'title',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'gender' => 'gender',
        'date_of_birth' => 'date_of_birth',
        'country' => 'country',
        'phone_prefix' => 'phone_prefix',
        'phone_number' => 'phone_number',
        'passport_type' => 'passport_type',
        'passport_number' => 'passport_number',
        'passport_expiration_date' => 'passport_expiration_date',
        'passport_country' => 'passport_country',
        'loyalty_airline' => 'loyalty_airline',
        'loyalty_number' => 'loyalty_number',
        'known_traveler_number' => 'known_traveler_number',
        'passenger_redress_number' => 'passenger_redress_number',
        'associated_infant_passenger_id' => 'associated_infant_passenger_id',
        'seats' => 'seats',
        'bags' => 'bags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'passenger_id' => 'setPassengerId',
        'type' => 'setType',
        'title' => 'setTitle',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'gender' => 'setGender',
        'date_of_birth' => 'setDateOfBirth',
        'country' => 'setCountry',
        'phone_prefix' => 'setPhonePrefix',
        'phone_number' => 'setPhoneNumber',
        'passport_type' => 'setPassportType',
        'passport_number' => 'setPassportNumber',
        'passport_expiration_date' => 'setPassportExpirationDate',
        'passport_country' => 'setPassportCountry',
        'loyalty_airline' => 'setLoyaltyAirline',
        'loyalty_number' => 'setLoyaltyNumber',
        'known_traveler_number' => 'setKnownTravelerNumber',
        'passenger_redress_number' => 'setPassengerRedressNumber',
        'associated_infant_passenger_id' => 'setAssociatedInfantPassengerId',
        'seats' => 'setSeats',
        'bags' => 'setBags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'passenger_id' => 'getPassengerId',
        'type' => 'getType',
        'title' => 'getTitle',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'gender' => 'getGender',
        'date_of_birth' => 'getDateOfBirth',
        'country' => 'getCountry',
        'phone_prefix' => 'getPhonePrefix',
        'phone_number' => 'getPhoneNumber',
        'passport_type' => 'getPassportType',
        'passport_number' => 'getPassportNumber',
        'passport_expiration_date' => 'getPassportExpirationDate',
        'passport_country' => 'getPassportCountry',
        'loyalty_airline' => 'getLoyaltyAirline',
        'loyalty_number' => 'getLoyaltyNumber',
        'known_traveler_number' => 'getKnownTravelerNumber',
        'passenger_redress_number' => 'getPassengerRedressNumber',
        'associated_infant_passenger_id' => 'getAssociatedInfantPassengerId',
        'seats' => 'getSeats',
        'bags' => 'getBags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['passenger_id'] = isset($data['passenger_id']) ? $data['passenger_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['date_of_birth'] = isset($data['date_of_birth']) ? $data['date_of_birth'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['phone_prefix'] = isset($data['phone_prefix']) ? $data['phone_prefix'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['passport_type'] = isset($data['passport_type']) ? $data['passport_type'] : null;
        $this->container['passport_number'] = isset($data['passport_number']) ? $data['passport_number'] : null;
        $this->container['passport_expiration_date'] = isset($data['passport_expiration_date']) ? $data['passport_expiration_date'] : null;
        $this->container['passport_country'] = isset($data['passport_country']) ? $data['passport_country'] : null;
        $this->container['loyalty_airline'] = isset($data['loyalty_airline']) ? $data['loyalty_airline'] : null;
        $this->container['loyalty_number'] = isset($data['loyalty_number']) ? $data['loyalty_number'] : null;
        $this->container['known_traveler_number'] = isset($data['known_traveler_number']) ? $data['known_traveler_number'] : null;
        $this->container['passenger_redress_number'] = isset($data['passenger_redress_number']) ? $data['passenger_redress_number'] : null;
        $this->container['associated_infant_passenger_id'] = isset($data['associated_infant_passenger_id']) ? $data['associated_infant_passenger_id'] : null;
        $this->container['seats'] = isset($data['seats']) ? $data['seats'] : null;
        $this->container['bags'] = isset($data['bags']) ? $data['bags'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets passenger_id
     *
     * @return string
     */
    public function getPassengerId()
    {
        return $this->container['passenger_id'];
    }

    /**
     * Sets passenger_id
     *
     * @param string $passenger_id Unique identifier for the passenger.
     *
     * @return $this
     */
    public function setPassengerId($passenger_id)
    {
        $this->container['passenger_id'] = $passenger_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of passenger (adult, child, infant, infant with seat).
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Title of the passenger (e.g., Mr., Mrs.).
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name First name of the passenger.
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name Last name of the passenger.
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender Gender of the passenger.
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return \DateTime
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param \DateTime $date_of_birth Date of birth of the passenger.
     *
     * @return $this
     */
    public function setDateOfBirth($date_of_birth)
    {
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country Country of the passenger.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets phone_prefix
     *
     * @return string
     */
    public function getPhonePrefix()
    {
        return $this->container['phone_prefix'];
    }

    /**
     * Sets phone_prefix
     *
     * @param string $phone_prefix International dialing prefix for phone number.
     *
     * @return $this
     */
    public function setPhonePrefix($phone_prefix)
    {
        $this->container['phone_prefix'] = $phone_prefix;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number Phone number of the passenger.
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets passport_type
     *
     * @return string
     */
    public function getPassportType()
    {
        return $this->container['passport_type'];
    }

    /**
     * Sets passport_type
     *
     * @param string $passport_type Type of passport.
     *
     * @return $this
     */
    public function setPassportType($passport_type)
    {
        $this->container['passport_type'] = $passport_type;

        return $this;
    }

    /**
     * Gets passport_number
     *
     * @return string
     */
    public function getPassportNumber()
    {
        return $this->container['passport_number'];
    }

    /**
     * Sets passport_number
     *
     * @param string $passport_number Passport number of the passenger.
     *
     * @return $this
     */
    public function setPassportNumber($passport_number)
    {
        $this->container['passport_number'] = $passport_number;

        return $this;
    }

    /**
     * Gets passport_expiration_date
     *
     * @return \DateTime
     */
    public function getPassportExpirationDate()
    {
        return $this->container['passport_expiration_date'];
    }

    /**
     * Sets passport_expiration_date
     *
     * @param \DateTime $passport_expiration_date Expiration date of the passport.
     *
     * @return $this
     */
    public function setPassportExpirationDate($passport_expiration_date)
    {
        $this->container['passport_expiration_date'] = $passport_expiration_date;

        return $this;
    }

    /**
     * Gets passport_country
     *
     * @return string
     */
    public function getPassportCountry()
    {
        return $this->container['passport_country'];
    }

    /**
     * Sets passport_country
     *
     * @param string $passport_country Country of issue of the passport.
     *
     * @return $this
     */
    public function setPassportCountry($passport_country)
    {
        $this->container['passport_country'] = $passport_country;

        return $this;
    }

    /**
     * Gets loyalty_airline
     *
     * @return string
     */
    public function getLoyaltyAirline()
    {
        return $this->container['loyalty_airline'];
    }

    /**
     * Sets loyalty_airline
     *
     * @param string $loyalty_airline Airline with which the passenger has loyalty membership.
     *
     * @return $this
     */
    public function setLoyaltyAirline($loyalty_airline)
    {
        $this->container['loyalty_airline'] = $loyalty_airline;

        return $this;
    }

    /**
     * Gets loyalty_number
     *
     * @return string
     */
    public function getLoyaltyNumber()
    {
        return $this->container['loyalty_number'];
    }

    /**
     * Sets loyalty_number
     *
     * @param string $loyalty_number Loyalty membership number.
     *
     * @return $this
     */
    public function setLoyaltyNumber($loyalty_number)
    {
        $this->container['loyalty_number'] = $loyalty_number;

        return $this;
    }

    /**
     * Gets known_traveler_number
     *
     * @return string
     */
    public function getKnownTravelerNumber()
    {
        return $this->container['known_traveler_number'];
    }

    /**
     * Sets known_traveler_number
     *
     * @param string $known_traveler_number Known traveler number.
     *
     * @return $this
     */
    public function setKnownTravelerNumber($known_traveler_number)
    {
        $this->container['known_traveler_number'] = $known_traveler_number;

        return $this;
    }

    /**
     * Gets passenger_redress_number
     *
     * @return string
     */
    public function getPassengerRedressNumber()
    {
        return $this->container['passenger_redress_number'];
    }

    /**
     * Sets passenger_redress_number
     *
     * @param string $passenger_redress_number Redress number of the passenger.
     *
     * @return $this
     */
    public function setPassengerRedressNumber($passenger_redress_number)
    {
        $this->container['passenger_redress_number'] = $passenger_redress_number;

        return $this;
    }

    /**
     * Gets associated_infant_passenger_id
     *
     * @return string
     */
    public function getAssociatedInfantPassengerId()
    {
        return $this->container['associated_infant_passenger_id'];
    }

    /**
     * Sets associated_infant_passenger_id
     *
     * @param string $associated_infant_passenger_id Identifier for any associated infant passenger.
     *
     * @return $this
     */
    public function setAssociatedInfantPassengerId($associated_infant_passenger_id)
    {
        $this->container['associated_infant_passenger_id'] = $associated_infant_passenger_id;

        return $this;
    }

    /**
     * Gets seats
     *
     * @return \Swagger\Client\Model\BookingPassengerSelectedSeatSchema[]
     */
    public function getSeats()
    {
        return $this->container['seats'];
    }

    /**
     * Sets seats
     *
     * @param \Swagger\Client\Model\BookingPassengerSelectedSeatSchema[] $seats Array of selected seats, each defined in BookingPassengerSelectedSeatSchema.
     *
     * @return $this
     */
    public function setSeats($seats)
    {
        $this->container['seats'] = $seats;

        return $this;
    }

    /**
     * Gets bags
     *
     * @return \Swagger\Client\Model\BookingPassengerExtraBagSchema[]
     */
    public function getBags()
    {
        return $this->container['bags'];
    }

    /**
     * Sets bags
     *
     * @param \Swagger\Client\Model\BookingPassengerExtraBagSchema[] $bags Array of extra bags, each defined in BookingPassengerExtraBagSchema.
     *
     * @return $this
     */
    public function setBags($bags)
    {
        $this->container['bags'] = $bags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
