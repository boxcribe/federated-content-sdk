<?php
/**
 * ToursAndActivitiesOfferResponseItemSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Federated Content API
 *
 * Welcome to the Federated Content API following Open API Specification (Version 3.0.0)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.57
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ToursAndActivitiesOfferResponseItemSchema Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ToursAndActivitiesOfferResponseItemSchema implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ToursAndActivitiesOfferResponseItemSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'offer_id' => 'string',
        'supplier_offer_id' => 'string',
        'offer_index' => 'int',
        'offer_tax' => 'float',
        'offer_price' => 'float',
        'offer_currency' => 'string',
        'offer_cancelation_policies' => 'string',
        'date' => '\DateTime',
        'adults' => 'int',
        'children' => 'int',
        'tour_name' => 'string',
        'tour_description' => 'string',
        'tour_address' => 'string',
        'tour_latitude' => 'float',
        'tour_longitude' => 'float',
        'tour_distance' => 'float',
        'tour_distance_metric' => 'string',
        'tour_images' => 'string[]',
        'tour_rating' => 'float',
        'tour_reviews' => 'string[]',
        'tour_subcategories' => 'string[]',
        'booking_questions' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'offer_id' => 'uuid',
        'supplier_offer_id' => 'uuid',
        'offer_index' => null,
        'offer_tax' => 'decimal',
        'offer_price' => 'decimal',
        'offer_currency' => null,
        'offer_cancelation_policies' => null,
        'date' => 'date',
        'adults' => null,
        'children' => null,
        'tour_name' => null,
        'tour_description' => null,
        'tour_address' => null,
        'tour_latitude' => 'float',
        'tour_longitude' => 'float',
        'tour_distance' => 'float',
        'tour_distance_metric' => null,
        'tour_images' => null,
        'tour_rating' => 'float',
        'tour_reviews' => null,
        'tour_subcategories' => null,
        'booking_questions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'offer_id' => 'offer_id',
        'supplier_offer_id' => 'supplier_offer_id',
        'offer_index' => 'offer_index',
        'offer_tax' => 'offer_tax',
        'offer_price' => 'offer_price',
        'offer_currency' => 'offer_currency',
        'offer_cancelation_policies' => 'offer_cancelation_policies',
        'date' => 'date',
        'adults' => 'adults',
        'children' => 'children',
        'tour_name' => 'tour_name',
        'tour_description' => 'tour_description',
        'tour_address' => 'tour_address',
        'tour_latitude' => 'tour_latitude',
        'tour_longitude' => 'tour_longitude',
        'tour_distance' => 'tour_distance',
        'tour_distance_metric' => 'tour_distance_metric',
        'tour_images' => 'tour_images',
        'tour_rating' => 'tour_rating',
        'tour_reviews' => 'tour_reviews',
        'tour_subcategories' => 'tour_subcategories',
        'booking_questions' => 'booking_questions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'offer_id' => 'setOfferId',
        'supplier_offer_id' => 'setSupplierOfferId',
        'offer_index' => 'setOfferIndex',
        'offer_tax' => 'setOfferTax',
        'offer_price' => 'setOfferPrice',
        'offer_currency' => 'setOfferCurrency',
        'offer_cancelation_policies' => 'setOfferCancelationPolicies',
        'date' => 'setDate',
        'adults' => 'setAdults',
        'children' => 'setChildren',
        'tour_name' => 'setTourName',
        'tour_description' => 'setTourDescription',
        'tour_address' => 'setTourAddress',
        'tour_latitude' => 'setTourLatitude',
        'tour_longitude' => 'setTourLongitude',
        'tour_distance' => 'setTourDistance',
        'tour_distance_metric' => 'setTourDistanceMetric',
        'tour_images' => 'setTourImages',
        'tour_rating' => 'setTourRating',
        'tour_reviews' => 'setTourReviews',
        'tour_subcategories' => 'setTourSubcategories',
        'booking_questions' => 'setBookingQuestions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'offer_id' => 'getOfferId',
        'supplier_offer_id' => 'getSupplierOfferId',
        'offer_index' => 'getOfferIndex',
        'offer_tax' => 'getOfferTax',
        'offer_price' => 'getOfferPrice',
        'offer_currency' => 'getOfferCurrency',
        'offer_cancelation_policies' => 'getOfferCancelationPolicies',
        'date' => 'getDate',
        'adults' => 'getAdults',
        'children' => 'getChildren',
        'tour_name' => 'getTourName',
        'tour_description' => 'getTourDescription',
        'tour_address' => 'getTourAddress',
        'tour_latitude' => 'getTourLatitude',
        'tour_longitude' => 'getTourLongitude',
        'tour_distance' => 'getTourDistance',
        'tour_distance_metric' => 'getTourDistanceMetric',
        'tour_images' => 'getTourImages',
        'tour_rating' => 'getTourRating',
        'tour_reviews' => 'getTourReviews',
        'tour_subcategories' => 'getTourSubcategories',
        'booking_questions' => 'getBookingQuestions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['offer_id'] = isset($data['offer_id']) ? $data['offer_id'] : null;
        $this->container['supplier_offer_id'] = isset($data['supplier_offer_id']) ? $data['supplier_offer_id'] : null;
        $this->container['offer_index'] = isset($data['offer_index']) ? $data['offer_index'] : null;
        $this->container['offer_tax'] = isset($data['offer_tax']) ? $data['offer_tax'] : null;
        $this->container['offer_price'] = isset($data['offer_price']) ? $data['offer_price'] : null;
        $this->container['offer_currency'] = isset($data['offer_currency']) ? $data['offer_currency'] : null;
        $this->container['offer_cancelation_policies'] = isset($data['offer_cancelation_policies']) ? $data['offer_cancelation_policies'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['adults'] = isset($data['adults']) ? $data['adults'] : null;
        $this->container['children'] = isset($data['children']) ? $data['children'] : null;
        $this->container['tour_name'] = isset($data['tour_name']) ? $data['tour_name'] : null;
        $this->container['tour_description'] = isset($data['tour_description']) ? $data['tour_description'] : null;
        $this->container['tour_address'] = isset($data['tour_address']) ? $data['tour_address'] : null;
        $this->container['tour_latitude'] = isset($data['tour_latitude']) ? $data['tour_latitude'] : null;
        $this->container['tour_longitude'] = isset($data['tour_longitude']) ? $data['tour_longitude'] : null;
        $this->container['tour_distance'] = isset($data['tour_distance']) ? $data['tour_distance'] : null;
        $this->container['tour_distance_metric'] = isset($data['tour_distance_metric']) ? $data['tour_distance_metric'] : null;
        $this->container['tour_images'] = isset($data['tour_images']) ? $data['tour_images'] : null;
        $this->container['tour_rating'] = isset($data['tour_rating']) ? $data['tour_rating'] : null;
        $this->container['tour_reviews'] = isset($data['tour_reviews']) ? $data['tour_reviews'] : null;
        $this->container['tour_subcategories'] = isset($data['tour_subcategories']) ? $data['tour_subcategories'] : null;
        $this->container['booking_questions'] = isset($data['booking_questions']) ? $data['booking_questions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets offer_id
     *
     * @return string
     */
    public function getOfferId()
    {
        return $this->container['offer_id'];
    }

    /**
     * Sets offer_id
     *
     * @param string $offer_id Identifier of the individual offer.
     *
     * @return $this
     */
    public function setOfferId($offer_id)
    {
        $this->container['offer_id'] = $offer_id;

        return $this;
    }

    /**
     * Gets supplier_offer_id
     *
     * @return string
     */
    public function getSupplierOfferId()
    {
        return $this->container['supplier_offer_id'];
    }

    /**
     * Sets supplier_offer_id
     *
     * @param string $supplier_offer_id Identifier provided by the supplier for the offer.
     *
     * @return $this
     */
    public function setSupplierOfferId($supplier_offer_id)
    {
        $this->container['supplier_offer_id'] = $supplier_offer_id;

        return $this;
    }

    /**
     * Gets offer_index
     *
     * @return int
     */
    public function getOfferIndex()
    {
        return $this->container['offer_index'];
    }

    /**
     * Sets offer_index
     *
     * @param int $offer_index Index of the offer for ordering.
     *
     * @return $this
     */
    public function setOfferIndex($offer_index)
    {
        $this->container['offer_index'] = $offer_index;

        return $this;
    }

    /**
     * Gets offer_tax
     *
     * @return float
     */
    public function getOfferTax()
    {
        return $this->container['offer_tax'];
    }

    /**
     * Sets offer_tax
     *
     * @param float $offer_tax Tax applied on the offer.
     *
     * @return $this
     */
    public function setOfferTax($offer_tax)
    {
        $this->container['offer_tax'] = $offer_tax;

        return $this;
    }

    /**
     * Gets offer_price
     *
     * @return float
     */
    public function getOfferPrice()
    {
        return $this->container['offer_price'];
    }

    /**
     * Sets offer_price
     *
     * @param float $offer_price Price of the offer.
     *
     * @return $this
     */
    public function setOfferPrice($offer_price)
    {
        $this->container['offer_price'] = $offer_price;

        return $this;
    }

    /**
     * Gets offer_currency
     *
     * @return string
     */
    public function getOfferCurrency()
    {
        return $this->container['offer_currency'];
    }

    /**
     * Sets offer_currency
     *
     * @param string $offer_currency Currency of the offer price.
     *
     * @return $this
     */
    public function setOfferCurrency($offer_currency)
    {
        $this->container['offer_currency'] = $offer_currency;

        return $this;
    }

    /**
     * Gets offer_cancelation_policies
     *
     * @return string
     */
    public function getOfferCancelationPolicies()
    {
        return $this->container['offer_cancelation_policies'];
    }

    /**
     * Sets offer_cancelation_policies
     *
     * @param string $offer_cancelation_policies Cancellation policies applicable to the offer.
     *
     * @return $this
     */
    public function setOfferCancelationPolicies($offer_cancelation_policies)
    {
        $this->container['offer_cancelation_policies'] = $offer_cancelation_policies;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Date of the tour.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets adults
     *
     * @return int
     */
    public function getAdults()
    {
        return $this->container['adults'];
    }

    /**
     * Sets adults
     *
     * @param int $adults Number of adults attending.
     *
     * @return $this
     */
    public function setAdults($adults)
    {
        $this->container['adults'] = $adults;

        return $this;
    }

    /**
     * Gets children
     *
     * @return int
     */
    public function getChildren()
    {
        return $this->container['children'];
    }

    /**
     * Sets children
     *
     * @param int $children Number of children attending.
     *
     * @return $this
     */
    public function setChildren($children)
    {
        $this->container['children'] = $children;

        return $this;
    }

    /**
     * Gets tour_name
     *
     * @return string
     */
    public function getTourName()
    {
        return $this->container['tour_name'];
    }

    /**
     * Sets tour_name
     *
     * @param string $tour_name Name of the tour.
     *
     * @return $this
     */
    public function setTourName($tour_name)
    {
        $this->container['tour_name'] = $tour_name;

        return $this;
    }

    /**
     * Gets tour_description
     *
     * @return string
     */
    public function getTourDescription()
    {
        return $this->container['tour_description'];
    }

    /**
     * Sets tour_description
     *
     * @param string $tour_description Description of the tour.
     *
     * @return $this
     */
    public function setTourDescription($tour_description)
    {
        $this->container['tour_description'] = $tour_description;

        return $this;
    }

    /**
     * Gets tour_address
     *
     * @return string
     */
    public function getTourAddress()
    {
        return $this->container['tour_address'];
    }

    /**
     * Sets tour_address
     *
     * @param string $tour_address Address where the tour will take place.
     *
     * @return $this
     */
    public function setTourAddress($tour_address)
    {
        $this->container['tour_address'] = $tour_address;

        return $this;
    }

    /**
     * Gets tour_latitude
     *
     * @return float
     */
    public function getTourLatitude()
    {
        return $this->container['tour_latitude'];
    }

    /**
     * Sets tour_latitude
     *
     * @param float $tour_latitude Latitude for the tour location.
     *
     * @return $this
     */
    public function setTourLatitude($tour_latitude)
    {
        $this->container['tour_latitude'] = $tour_latitude;

        return $this;
    }

    /**
     * Gets tour_longitude
     *
     * @return float
     */
    public function getTourLongitude()
    {
        return $this->container['tour_longitude'];
    }

    /**
     * Sets tour_longitude
     *
     * @param float $tour_longitude Longitude for the tour location.
     *
     * @return $this
     */
    public function setTourLongitude($tour_longitude)
    {
        $this->container['tour_longitude'] = $tour_longitude;

        return $this;
    }

    /**
     * Gets tour_distance
     *
     * @return float
     */
    public function getTourDistance()
    {
        return $this->container['tour_distance'];
    }

    /**
     * Sets tour_distance
     *
     * @param float $tour_distance Distance covered by the tour.
     *
     * @return $this
     */
    public function setTourDistance($tour_distance)
    {
        $this->container['tour_distance'] = $tour_distance;

        return $this;
    }

    /**
     * Gets tour_distance_metric
     *
     * @return string
     */
    public function getTourDistanceMetric()
    {
        return $this->container['tour_distance_metric'];
    }

    /**
     * Sets tour_distance_metric
     *
     * @param string $tour_distance_metric Metric for measuring distance (miles or kilometers).
     *
     * @return $this
     */
    public function setTourDistanceMetric($tour_distance_metric)
    {
        $this->container['tour_distance_metric'] = $tour_distance_metric;

        return $this;
    }

    /**
     * Gets tour_images
     *
     * @return string[]
     */
    public function getTourImages()
    {
        return $this->container['tour_images'];
    }

    /**
     * Sets tour_images
     *
     * @param string[] $tour_images Array of images related to the tour.
     *
     * @return $this
     */
    public function setTourImages($tour_images)
    {
        $this->container['tour_images'] = $tour_images;

        return $this;
    }

    /**
     * Gets tour_rating
     *
     * @return float
     */
    public function getTourRating()
    {
        return $this->container['tour_rating'];
    }

    /**
     * Sets tour_rating
     *
     * @param float $tour_rating Rating of the tour.
     *
     * @return $this
     */
    public function setTourRating($tour_rating)
    {
        $this->container['tour_rating'] = $tour_rating;

        return $this;
    }

    /**
     * Gets tour_reviews
     *
     * @return string[]
     */
    public function getTourReviews()
    {
        return $this->container['tour_reviews'];
    }

    /**
     * Sets tour_reviews
     *
     * @param string[] $tour_reviews Array of reviews for the tour.
     *
     * @return $this
     */
    public function setTourReviews($tour_reviews)
    {
        $this->container['tour_reviews'] = $tour_reviews;

        return $this;
    }

    /**
     * Gets tour_subcategories
     *
     * @return string[]
     */
    public function getTourSubcategories()
    {
        return $this->container['tour_subcategories'];
    }

    /**
     * Sets tour_subcategories
     *
     * @param string[] $tour_subcategories Subcategories of the tour.
     *
     * @return $this
     */
    public function setTourSubcategories($tour_subcategories)
    {
        $this->container['tour_subcategories'] = $tour_subcategories;

        return $this;
    }

    /**
     * Gets booking_questions
     *
     * @return string[]
     */
    public function getBookingQuestions()
    {
        return $this->container['booking_questions'];
    }

    /**
     * Sets booking_questions
     *
     * @param string[] $booking_questions Questions related to booking the tour.
     *
     * @return $this
     */
    public function setBookingQuestions($booking_questions)
    {
        $this->container['booking_questions'] = $booking_questions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
