<?php
/**
 * CarOfferRequestSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Federated Content API
 *
 * Welcome to the Federated Content API following Open API Specification (Version 3.0.0)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.57
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CarOfferRequestSchema Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CarOfferRequestSchema implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CarOfferRequestSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'pickup_location_latitude' => 'float',
        'pickup_location_longitude' => 'float',
        'pickup_date' => '\DateTime',
        'pickup_time' => 'string',
        'dropoff_location_latitude' => 'float',
        'dropoff_location_longitude' => 'float',
        'dropoff_date' => '\DateTime',
        'dropoff_time' => 'string',
        'filter_by_keyword' => 'string',
        'filter_by_price_min' => 'float',
        'filter_by_price_max' => 'float',
        'filter_by_distance_min' => 'int',
        'filter_by_distance_max' => 'int',
        'filter_by_rating_min' => 'int',
        'filter_by_rating_max' => 'int',
        'filter_by_passengers_min' => 'int',
        'filter_by_passengers_max' => 'int',
        'filter_by_type' => 'string[]',
        'filter_by_company' => 'string[]',
        'sort_by' => 'string',
        'sort_order' => 'string',
        'page' => 'int',
        'limit' => 'int',
        'language' => 'string',
        'currency' => 'string',
        'metric' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'pickup_location_latitude' => 'float',
        'pickup_location_longitude' => 'float',
        'pickup_date' => 'date',
        'pickup_time' => 'time',
        'dropoff_location_latitude' => 'float',
        'dropoff_location_longitude' => 'float',
        'dropoff_date' => 'date',
        'dropoff_time' => 'time',
        'filter_by_keyword' => null,
        'filter_by_price_min' => 'decimal',
        'filter_by_price_max' => 'decimal',
        'filter_by_distance_min' => null,
        'filter_by_distance_max' => null,
        'filter_by_rating_min' => null,
        'filter_by_rating_max' => null,
        'filter_by_passengers_min' => null,
        'filter_by_passengers_max' => null,
        'filter_by_type' => null,
        'filter_by_company' => null,
        'sort_by' => null,
        'sort_order' => null,
        'page' => null,
        'limit' => null,
        'language' => null,
        'currency' => null,
        'metric' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pickup_location_latitude' => 'pickup_location_latitude',
        'pickup_location_longitude' => 'pickup_location_longitude',
        'pickup_date' => 'pickup_date',
        'pickup_time' => 'pickup_time',
        'dropoff_location_latitude' => 'dropoff_location_latitude',
        'dropoff_location_longitude' => 'dropoff_location_longitude',
        'dropoff_date' => 'dropoff_date',
        'dropoff_time' => 'dropoff_time',
        'filter_by_keyword' => 'filter_by_keyword',
        'filter_by_price_min' => 'filter_by_price_min',
        'filter_by_price_max' => 'filter_by_price_max',
        'filter_by_distance_min' => 'filter_by_distance_min',
        'filter_by_distance_max' => 'filter_by_distance_max',
        'filter_by_rating_min' => 'filter_by_rating_min',
        'filter_by_rating_max' => 'filter_by_rating_max',
        'filter_by_passengers_min' => 'filter_by_passengers_min',
        'filter_by_passengers_max' => 'filter_by_passengers_max',
        'filter_by_type' => 'filter_by_type',
        'filter_by_company' => 'filter_by_company',
        'sort_by' => 'sort_by',
        'sort_order' => 'sort_order',
        'page' => 'page',
        'limit' => 'limit',
        'language' => 'language',
        'currency' => 'currency',
        'metric' => 'metric'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pickup_location_latitude' => 'setPickupLocationLatitude',
        'pickup_location_longitude' => 'setPickupLocationLongitude',
        'pickup_date' => 'setPickupDate',
        'pickup_time' => 'setPickupTime',
        'dropoff_location_latitude' => 'setDropoffLocationLatitude',
        'dropoff_location_longitude' => 'setDropoffLocationLongitude',
        'dropoff_date' => 'setDropoffDate',
        'dropoff_time' => 'setDropoffTime',
        'filter_by_keyword' => 'setFilterByKeyword',
        'filter_by_price_min' => 'setFilterByPriceMin',
        'filter_by_price_max' => 'setFilterByPriceMax',
        'filter_by_distance_min' => 'setFilterByDistanceMin',
        'filter_by_distance_max' => 'setFilterByDistanceMax',
        'filter_by_rating_min' => 'setFilterByRatingMin',
        'filter_by_rating_max' => 'setFilterByRatingMax',
        'filter_by_passengers_min' => 'setFilterByPassengersMin',
        'filter_by_passengers_max' => 'setFilterByPassengersMax',
        'filter_by_type' => 'setFilterByType',
        'filter_by_company' => 'setFilterByCompany',
        'sort_by' => 'setSortBy',
        'sort_order' => 'setSortOrder',
        'page' => 'setPage',
        'limit' => 'setLimit',
        'language' => 'setLanguage',
        'currency' => 'setCurrency',
        'metric' => 'setMetric'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pickup_location_latitude' => 'getPickupLocationLatitude',
        'pickup_location_longitude' => 'getPickupLocationLongitude',
        'pickup_date' => 'getPickupDate',
        'pickup_time' => 'getPickupTime',
        'dropoff_location_latitude' => 'getDropoffLocationLatitude',
        'dropoff_location_longitude' => 'getDropoffLocationLongitude',
        'dropoff_date' => 'getDropoffDate',
        'dropoff_time' => 'getDropoffTime',
        'filter_by_keyword' => 'getFilterByKeyword',
        'filter_by_price_min' => 'getFilterByPriceMin',
        'filter_by_price_max' => 'getFilterByPriceMax',
        'filter_by_distance_min' => 'getFilterByDistanceMin',
        'filter_by_distance_max' => 'getFilterByDistanceMax',
        'filter_by_rating_min' => 'getFilterByRatingMin',
        'filter_by_rating_max' => 'getFilterByRatingMax',
        'filter_by_passengers_min' => 'getFilterByPassengersMin',
        'filter_by_passengers_max' => 'getFilterByPassengersMax',
        'filter_by_type' => 'getFilterByType',
        'filter_by_company' => 'getFilterByCompany',
        'sort_by' => 'getSortBy',
        'sort_order' => 'getSortOrder',
        'page' => 'getPage',
        'limit' => 'getLimit',
        'language' => 'getLanguage',
        'currency' => 'getCurrency',
        'metric' => 'getMetric'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pickup_location_latitude'] = isset($data['pickup_location_latitude']) ? $data['pickup_location_latitude'] : null;
        $this->container['pickup_location_longitude'] = isset($data['pickup_location_longitude']) ? $data['pickup_location_longitude'] : null;
        $this->container['pickup_date'] = isset($data['pickup_date']) ? $data['pickup_date'] : null;
        $this->container['pickup_time'] = isset($data['pickup_time']) ? $data['pickup_time'] : null;
        $this->container['dropoff_location_latitude'] = isset($data['dropoff_location_latitude']) ? $data['dropoff_location_latitude'] : null;
        $this->container['dropoff_location_longitude'] = isset($data['dropoff_location_longitude']) ? $data['dropoff_location_longitude'] : null;
        $this->container['dropoff_date'] = isset($data['dropoff_date']) ? $data['dropoff_date'] : null;
        $this->container['dropoff_time'] = isset($data['dropoff_time']) ? $data['dropoff_time'] : null;
        $this->container['filter_by_keyword'] = isset($data['filter_by_keyword']) ? $data['filter_by_keyword'] : null;
        $this->container['filter_by_price_min'] = isset($data['filter_by_price_min']) ? $data['filter_by_price_min'] : null;
        $this->container['filter_by_price_max'] = isset($data['filter_by_price_max']) ? $data['filter_by_price_max'] : null;
        $this->container['filter_by_distance_min'] = isset($data['filter_by_distance_min']) ? $data['filter_by_distance_min'] : null;
        $this->container['filter_by_distance_max'] = isset($data['filter_by_distance_max']) ? $data['filter_by_distance_max'] : null;
        $this->container['filter_by_rating_min'] = isset($data['filter_by_rating_min']) ? $data['filter_by_rating_min'] : null;
        $this->container['filter_by_rating_max'] = isset($data['filter_by_rating_max']) ? $data['filter_by_rating_max'] : null;
        $this->container['filter_by_passengers_min'] = isset($data['filter_by_passengers_min']) ? $data['filter_by_passengers_min'] : null;
        $this->container['filter_by_passengers_max'] = isset($data['filter_by_passengers_max']) ? $data['filter_by_passengers_max'] : null;
        $this->container['filter_by_type'] = isset($data['filter_by_type']) ? $data['filter_by_type'] : null;
        $this->container['filter_by_company'] = isset($data['filter_by_company']) ? $data['filter_by_company'] : null;
        $this->container['sort_by'] = isset($data['sort_by']) ? $data['sort_by'] : null;
        $this->container['sort_order'] = isset($data['sort_order']) ? $data['sort_order'] : null;
        $this->container['page'] = isset($data['page']) ? $data['page'] : null;
        $this->container['limit'] = isset($data['limit']) ? $data['limit'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['metric'] = isset($data['metric']) ? $data['metric'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pickup_location_latitude
     *
     * @return float
     */
    public function getPickupLocationLatitude()
    {
        return $this->container['pickup_location_latitude'];
    }

    /**
     * Sets pickup_location_latitude
     *
     * @param float $pickup_location_latitude Latitude for car pickup location.
     *
     * @return $this
     */
    public function setPickupLocationLatitude($pickup_location_latitude)
    {
        $this->container['pickup_location_latitude'] = $pickup_location_latitude;

        return $this;
    }

    /**
     * Gets pickup_location_longitude
     *
     * @return float
     */
    public function getPickupLocationLongitude()
    {
        return $this->container['pickup_location_longitude'];
    }

    /**
     * Sets pickup_location_longitude
     *
     * @param float $pickup_location_longitude Longitude for car pickup location.
     *
     * @return $this
     */
    public function setPickupLocationLongitude($pickup_location_longitude)
    {
        $this->container['pickup_location_longitude'] = $pickup_location_longitude;

        return $this;
    }

    /**
     * Gets pickup_date
     *
     * @return \DateTime
     */
    public function getPickupDate()
    {
        return $this->container['pickup_date'];
    }

    /**
     * Sets pickup_date
     *
     * @param \DateTime $pickup_date Scheduled date for car pickup.
     *
     * @return $this
     */
    public function setPickupDate($pickup_date)
    {
        $this->container['pickup_date'] = $pickup_date;

        return $this;
    }

    /**
     * Gets pickup_time
     *
     * @return string
     */
    public function getPickupTime()
    {
        return $this->container['pickup_time'];
    }

    /**
     * Sets pickup_time
     *
     * @param string $pickup_time Scheduled time for car pickup.
     *
     * @return $this
     */
    public function setPickupTime($pickup_time)
    {
        $this->container['pickup_time'] = $pickup_time;

        return $this;
    }

    /**
     * Gets dropoff_location_latitude
     *
     * @return float
     */
    public function getDropoffLocationLatitude()
    {
        return $this->container['dropoff_location_latitude'];
    }

    /**
     * Sets dropoff_location_latitude
     *
     * @param float $dropoff_location_latitude Latitude for car dropoff location.
     *
     * @return $this
     */
    public function setDropoffLocationLatitude($dropoff_location_latitude)
    {
        $this->container['dropoff_location_latitude'] = $dropoff_location_latitude;

        return $this;
    }

    /**
     * Gets dropoff_location_longitude
     *
     * @return float
     */
    public function getDropoffLocationLongitude()
    {
        return $this->container['dropoff_location_longitude'];
    }

    /**
     * Sets dropoff_location_longitude
     *
     * @param float $dropoff_location_longitude Longitude for car dropoff location.
     *
     * @return $this
     */
    public function setDropoffLocationLongitude($dropoff_location_longitude)
    {
        $this->container['dropoff_location_longitude'] = $dropoff_location_longitude;

        return $this;
    }

    /**
     * Gets dropoff_date
     *
     * @return \DateTime
     */
    public function getDropoffDate()
    {
        return $this->container['dropoff_date'];
    }

    /**
     * Sets dropoff_date
     *
     * @param \DateTime $dropoff_date Scheduled date for car dropoff.
     *
     * @return $this
     */
    public function setDropoffDate($dropoff_date)
    {
        $this->container['dropoff_date'] = $dropoff_date;

        return $this;
    }

    /**
     * Gets dropoff_time
     *
     * @return string
     */
    public function getDropoffTime()
    {
        return $this->container['dropoff_time'];
    }

    /**
     * Sets dropoff_time
     *
     * @param string $dropoff_time Scheduled time for car dropoff.
     *
     * @return $this
     */
    public function setDropoffTime($dropoff_time)
    {
        $this->container['dropoff_time'] = $dropoff_time;

        return $this;
    }

    /**
     * Gets filter_by_keyword
     *
     * @return string
     */
    public function getFilterByKeyword()
    {
        return $this->container['filter_by_keyword'];
    }

    /**
     * Sets filter_by_keyword
     *
     * @param string $filter_by_keyword Keyword to filter car offers.
     *
     * @return $this
     */
    public function setFilterByKeyword($filter_by_keyword)
    {
        $this->container['filter_by_keyword'] = $filter_by_keyword;

        return $this;
    }

    /**
     * Gets filter_by_price_min
     *
     * @return float
     */
    public function getFilterByPriceMin()
    {
        return $this->container['filter_by_price_min'];
    }

    /**
     * Sets filter_by_price_min
     *
     * @param float $filter_by_price_min Minimum price to filter car offers.
     *
     * @return $this
     */
    public function setFilterByPriceMin($filter_by_price_min)
    {
        $this->container['filter_by_price_min'] = $filter_by_price_min;

        return $this;
    }

    /**
     * Gets filter_by_price_max
     *
     * @return float
     */
    public function getFilterByPriceMax()
    {
        return $this->container['filter_by_price_max'];
    }

    /**
     * Sets filter_by_price_max
     *
     * @param float $filter_by_price_max Maximum price to filter car offers.
     *
     * @return $this
     */
    public function setFilterByPriceMax($filter_by_price_max)
    {
        $this->container['filter_by_price_max'] = $filter_by_price_max;

        return $this;
    }

    /**
     * Gets filter_by_distance_min
     *
     * @return int
     */
    public function getFilterByDistanceMin()
    {
        return $this->container['filter_by_distance_min'];
    }

    /**
     * Sets filter_by_distance_min
     *
     * @param int $filter_by_distance_min Minimum distance filter for car offers.
     *
     * @return $this
     */
    public function setFilterByDistanceMin($filter_by_distance_min)
    {
        $this->container['filter_by_distance_min'] = $filter_by_distance_min;

        return $this;
    }

    /**
     * Gets filter_by_distance_max
     *
     * @return int
     */
    public function getFilterByDistanceMax()
    {
        return $this->container['filter_by_distance_max'];
    }

    /**
     * Sets filter_by_distance_max
     *
     * @param int $filter_by_distance_max Maximum distance filter for car offers.
     *
     * @return $this
     */
    public function setFilterByDistanceMax($filter_by_distance_max)
    {
        $this->container['filter_by_distance_max'] = $filter_by_distance_max;

        return $this;
    }

    /**
     * Gets filter_by_rating_min
     *
     * @return int
     */
    public function getFilterByRatingMin()
    {
        return $this->container['filter_by_rating_min'];
    }

    /**
     * Sets filter_by_rating_min
     *
     * @param int $filter_by_rating_min Minimum rating filter for car offers.
     *
     * @return $this
     */
    public function setFilterByRatingMin($filter_by_rating_min)
    {
        $this->container['filter_by_rating_min'] = $filter_by_rating_min;

        return $this;
    }

    /**
     * Gets filter_by_rating_max
     *
     * @return int
     */
    public function getFilterByRatingMax()
    {
        return $this->container['filter_by_rating_max'];
    }

    /**
     * Sets filter_by_rating_max
     *
     * @param int $filter_by_rating_max Maximum rating filter for car offers.
     *
     * @return $this
     */
    public function setFilterByRatingMax($filter_by_rating_max)
    {
        $this->container['filter_by_rating_max'] = $filter_by_rating_max;

        return $this;
    }

    /**
     * Gets filter_by_passengers_min
     *
     * @return int
     */
    public function getFilterByPassengersMin()
    {
        return $this->container['filter_by_passengers_min'];
    }

    /**
     * Sets filter_by_passengers_min
     *
     * @param int $filter_by_passengers_min Minimum passengers capacity filter for car offers.
     *
     * @return $this
     */
    public function setFilterByPassengersMin($filter_by_passengers_min)
    {
        $this->container['filter_by_passengers_min'] = $filter_by_passengers_min;

        return $this;
    }

    /**
     * Gets filter_by_passengers_max
     *
     * @return int
     */
    public function getFilterByPassengersMax()
    {
        return $this->container['filter_by_passengers_max'];
    }

    /**
     * Sets filter_by_passengers_max
     *
     * @param int $filter_by_passengers_max Maximum passengers capacity filter for car offers.
     *
     * @return $this
     */
    public function setFilterByPassengersMax($filter_by_passengers_max)
    {
        $this->container['filter_by_passengers_max'] = $filter_by_passengers_max;

        return $this;
    }

    /**
     * Gets filter_by_type
     *
     * @return string[]
     */
    public function getFilterByType()
    {
        return $this->container['filter_by_type'];
    }

    /**
     * Sets filter_by_type
     *
     * @param string[] $filter_by_type Types of cars to filter by.
     *
     * @return $this
     */
    public function setFilterByType($filter_by_type)
    {
        $this->container['filter_by_type'] = $filter_by_type;

        return $this;
    }

    /**
     * Gets filter_by_company
     *
     * @return string[]
     */
    public function getFilterByCompany()
    {
        return $this->container['filter_by_company'];
    }

    /**
     * Sets filter_by_company
     *
     * @param string[] $filter_by_company Car rental companies to filter by.
     *
     * @return $this
     */
    public function setFilterByCompany($filter_by_company)
    {
        $this->container['filter_by_company'] = $filter_by_company;

        return $this;
    }

    /**
     * Gets sort_by
     *
     * @return string
     */
    public function getSortBy()
    {
        return $this->container['sort_by'];
    }

    /**
     * Sets sort_by
     *
     * @param string $sort_by Field to sort car offers by.
     *
     * @return $this
     */
    public function setSortBy($sort_by)
    {
        $this->container['sort_by'] = $sort_by;

        return $this;
    }

    /**
     * Gets sort_order
     *
     * @return string
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     *
     * @param string $sort_order Order to sort car offers (asc, desc).
     *
     * @return $this
     */
    public function setSortOrder($sort_order)
    {
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets page
     *
     * @return int
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     *
     * @param int $page Page number for pagination.
     *
     * @return $this
     */
    public function setPage($page)
    {
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int $limit Number of offers per page.
     *
     * @return $this
     */
    public function setLimit($limit)
    {
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language Language for the offers.
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Currency for the offers.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets metric
     *
     * @return string
     */
    public function getMetric()
    {
        return $this->container['metric'];
    }

    /**
     * Sets metric
     *
     * @param string $metric Distance metric (mi/km) used in filters.
     *
     * @return $this
     */
    public function setMetric($metric)
    {
        $this->container['metric'] = $metric;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
