<?php
/**
 * EventOfferResponseItemSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Federated Content API
 *
 * Welcome to the Federated Content API following Open API Specification (Version 3.0.0)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.57
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EventOfferResponseItemSchema Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EventOfferResponseItemSchema implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EventOfferResponseItemSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'offer_id' => 'string',
        'supplier_offer_id' => 'string',
        'offer_index' => 'float',
        'offer_tax' => 'float',
        'offer_price' => 'float',
        'offer_currency' => 'string',
        'offer_cancelation_policies' => 'string',
        'date' => '\DateTime',
        'adults' => 'float',
        'children' => 'float',
        'event_name' => 'string',
        'event_description' => 'string',
        'event_address' => 'string',
        'event_latitude' => 'float',
        'event_longitude' => 'float',
        'event_distance' => 'float',
        'event_distance_metric' => 'string',
        'event_images' => 'string[]',
        'event_rating' => 'float',
        'event_reviews' => 'string[]',
        'event_venue' => 'string',
        'event_venue_capacity' => 'float',
        'event_performers' => 'string[]',
        'event_subcategories' => 'string[]',
        'booking_questions' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'offer_id' => 'uuid',
        'supplier_offer_id' => 'uuid',
        'offer_index' => 'integer',
        'offer_tax' => 'decimal',
        'offer_price' => 'decimal',
        'offer_currency' => null,
        'offer_cancelation_policies' => null,
        'date' => 'date',
        'adults' => 'integer',
        'children' => 'integer',
        'event_name' => null,
        'event_description' => null,
        'event_address' => null,
        'event_latitude' => 'float',
        'event_longitude' => 'float',
        'event_distance' => 'integer',
        'event_distance_metric' => null,
        'event_images' => null,
        'event_rating' => 'decimal',
        'event_reviews' => null,
        'event_venue' => null,
        'event_venue_capacity' => 'integer',
        'event_performers' => null,
        'event_subcategories' => null,
        'booking_questions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'offer_id' => 'offer_id',
        'supplier_offer_id' => 'supplier_offer_id',
        'offer_index' => 'offer_index',
        'offer_tax' => 'offer_tax',
        'offer_price' => 'offer_price',
        'offer_currency' => 'offer_currency',
        'offer_cancelation_policies' => 'offer_cancelation_policies',
        'date' => 'date',
        'adults' => 'adults',
        'children' => 'children',
        'event_name' => 'event_name',
        'event_description' => 'event_description',
        'event_address' => 'event_address',
        'event_latitude' => 'event_latitude',
        'event_longitude' => 'event_longitude',
        'event_distance' => 'event_distance',
        'event_distance_metric' => 'event_distance_metric',
        'event_images' => 'event_images',
        'event_rating' => 'event_rating',
        'event_reviews' => 'event_reviews',
        'event_venue' => 'event_venue',
        'event_venue_capacity' => 'event_venue_capacity',
        'event_performers' => 'event_performers',
        'event_subcategories' => 'event_subcategories',
        'booking_questions' => 'booking_questions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'offer_id' => 'setOfferId',
        'supplier_offer_id' => 'setSupplierOfferId',
        'offer_index' => 'setOfferIndex',
        'offer_tax' => 'setOfferTax',
        'offer_price' => 'setOfferPrice',
        'offer_currency' => 'setOfferCurrency',
        'offer_cancelation_policies' => 'setOfferCancelationPolicies',
        'date' => 'setDate',
        'adults' => 'setAdults',
        'children' => 'setChildren',
        'event_name' => 'setEventName',
        'event_description' => 'setEventDescription',
        'event_address' => 'setEventAddress',
        'event_latitude' => 'setEventLatitude',
        'event_longitude' => 'setEventLongitude',
        'event_distance' => 'setEventDistance',
        'event_distance_metric' => 'setEventDistanceMetric',
        'event_images' => 'setEventImages',
        'event_rating' => 'setEventRating',
        'event_reviews' => 'setEventReviews',
        'event_venue' => 'setEventVenue',
        'event_venue_capacity' => 'setEventVenueCapacity',
        'event_performers' => 'setEventPerformers',
        'event_subcategories' => 'setEventSubcategories',
        'booking_questions' => 'setBookingQuestions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'offer_id' => 'getOfferId',
        'supplier_offer_id' => 'getSupplierOfferId',
        'offer_index' => 'getOfferIndex',
        'offer_tax' => 'getOfferTax',
        'offer_price' => 'getOfferPrice',
        'offer_currency' => 'getOfferCurrency',
        'offer_cancelation_policies' => 'getOfferCancelationPolicies',
        'date' => 'getDate',
        'adults' => 'getAdults',
        'children' => 'getChildren',
        'event_name' => 'getEventName',
        'event_description' => 'getEventDescription',
        'event_address' => 'getEventAddress',
        'event_latitude' => 'getEventLatitude',
        'event_longitude' => 'getEventLongitude',
        'event_distance' => 'getEventDistance',
        'event_distance_metric' => 'getEventDistanceMetric',
        'event_images' => 'getEventImages',
        'event_rating' => 'getEventRating',
        'event_reviews' => 'getEventReviews',
        'event_venue' => 'getEventVenue',
        'event_venue_capacity' => 'getEventVenueCapacity',
        'event_performers' => 'getEventPerformers',
        'event_subcategories' => 'getEventSubcategories',
        'booking_questions' => 'getBookingQuestions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['offer_id'] = isset($data['offer_id']) ? $data['offer_id'] : null;
        $this->container['supplier_offer_id'] = isset($data['supplier_offer_id']) ? $data['supplier_offer_id'] : null;
        $this->container['offer_index'] = isset($data['offer_index']) ? $data['offer_index'] : null;
        $this->container['offer_tax'] = isset($data['offer_tax']) ? $data['offer_tax'] : null;
        $this->container['offer_price'] = isset($data['offer_price']) ? $data['offer_price'] : null;
        $this->container['offer_currency'] = isset($data['offer_currency']) ? $data['offer_currency'] : null;
        $this->container['offer_cancelation_policies'] = isset($data['offer_cancelation_policies']) ? $data['offer_cancelation_policies'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['adults'] = isset($data['adults']) ? $data['adults'] : null;
        $this->container['children'] = isset($data['children']) ? $data['children'] : null;
        $this->container['event_name'] = isset($data['event_name']) ? $data['event_name'] : null;
        $this->container['event_description'] = isset($data['event_description']) ? $data['event_description'] : null;
        $this->container['event_address'] = isset($data['event_address']) ? $data['event_address'] : null;
        $this->container['event_latitude'] = isset($data['event_latitude']) ? $data['event_latitude'] : null;
        $this->container['event_longitude'] = isset($data['event_longitude']) ? $data['event_longitude'] : null;
        $this->container['event_distance'] = isset($data['event_distance']) ? $data['event_distance'] : null;
        $this->container['event_distance_metric'] = isset($data['event_distance_metric']) ? $data['event_distance_metric'] : null;
        $this->container['event_images'] = isset($data['event_images']) ? $data['event_images'] : null;
        $this->container['event_rating'] = isset($data['event_rating']) ? $data['event_rating'] : null;
        $this->container['event_reviews'] = isset($data['event_reviews']) ? $data['event_reviews'] : null;
        $this->container['event_venue'] = isset($data['event_venue']) ? $data['event_venue'] : null;
        $this->container['event_venue_capacity'] = isset($data['event_venue_capacity']) ? $data['event_venue_capacity'] : null;
        $this->container['event_performers'] = isset($data['event_performers']) ? $data['event_performers'] : null;
        $this->container['event_subcategories'] = isset($data['event_subcategories']) ? $data['event_subcategories'] : null;
        $this->container['booking_questions'] = isset($data['booking_questions']) ? $data['booking_questions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets offer_id
     *
     * @return string
     */
    public function getOfferId()
    {
        return $this->container['offer_id'];
    }

    /**
     * Sets offer_id
     *
     * @param string $offer_id Unique identifier for the offer.
     *
     * @return $this
     */
    public function setOfferId($offer_id)
    {
        $this->container['offer_id'] = $offer_id;

        return $this;
    }

    /**
     * Gets supplier_offer_id
     *
     * @return string
     */
    public function getSupplierOfferId()
    {
        return $this->container['supplier_offer_id'];
    }

    /**
     * Sets supplier_offer_id
     *
     * @param string $supplier_offer_id Unique identifier for the supplier’s offer.
     *
     * @return $this
     */
    public function setSupplierOfferId($supplier_offer_id)
    {
        $this->container['supplier_offer_id'] = $supplier_offer_id;

        return $this;
    }

    /**
     * Gets offer_index
     *
     * @return float
     */
    public function getOfferIndex()
    {
        return $this->container['offer_index'];
    }

    /**
     * Sets offer_index
     *
     * @param float $offer_index Index of the offer for sorting purposes.
     *
     * @return $this
     */
    public function setOfferIndex($offer_index)
    {
        $this->container['offer_index'] = $offer_index;

        return $this;
    }

    /**
     * Gets offer_tax
     *
     * @return float
     */
    public function getOfferTax()
    {
        return $this->container['offer_tax'];
    }

    /**
     * Sets offer_tax
     *
     * @param float $offer_tax Tax applied to the offer.
     *
     * @return $this
     */
    public function setOfferTax($offer_tax)
    {
        $this->container['offer_tax'] = $offer_tax;

        return $this;
    }

    /**
     * Gets offer_price
     *
     * @return float
     */
    public function getOfferPrice()
    {
        return $this->container['offer_price'];
    }

    /**
     * Sets offer_price
     *
     * @param float $offer_price Price of the offer.
     *
     * @return $this
     */
    public function setOfferPrice($offer_price)
    {
        $this->container['offer_price'] = $offer_price;

        return $this;
    }

    /**
     * Gets offer_currency
     *
     * @return string
     */
    public function getOfferCurrency()
    {
        return $this->container['offer_currency'];
    }

    /**
     * Sets offer_currency
     *
     * @param string $offer_currency Currency of the offer price.
     *
     * @return $this
     */
    public function setOfferCurrency($offer_currency)
    {
        $this->container['offer_currency'] = $offer_currency;

        return $this;
    }

    /**
     * Gets offer_cancelation_policies
     *
     * @return string
     */
    public function getOfferCancelationPolicies()
    {
        return $this->container['offer_cancelation_policies'];
    }

    /**
     * Sets offer_cancelation_policies
     *
     * @param string $offer_cancelation_policies Cancellation policies applicable to the offer.
     *
     * @return $this
     */
    public function setOfferCancelationPolicies($offer_cancelation_policies)
    {
        $this->container['offer_cancelation_policies'] = $offer_cancelation_policies;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Date of the event.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets adults
     *
     * @return float
     */
    public function getAdults()
    {
        return $this->container['adults'];
    }

    /**
     * Sets adults
     *
     * @param float $adults Number of adults involved in the event.
     *
     * @return $this
     */
    public function setAdults($adults)
    {
        $this->container['adults'] = $adults;

        return $this;
    }

    /**
     * Gets children
     *
     * @return float
     */
    public function getChildren()
    {
        return $this->container['children'];
    }

    /**
     * Sets children
     *
     * @param float $children Number of children involved in the event.
     *
     * @return $this
     */
    public function setChildren($children)
    {
        $this->container['children'] = $children;

        return $this;
    }

    /**
     * Gets event_name
     *
     * @return string
     */
    public function getEventName()
    {
        return $this->container['event_name'];
    }

    /**
     * Sets event_name
     *
     * @param string $event_name Name of the event.
     *
     * @return $this
     */
    public function setEventName($event_name)
    {
        $this->container['event_name'] = $event_name;

        return $this;
    }

    /**
     * Gets event_description
     *
     * @return string
     */
    public function getEventDescription()
    {
        return $this->container['event_description'];
    }

    /**
     * Sets event_description
     *
     * @param string $event_description Description of the event.
     *
     * @return $this
     */
    public function setEventDescription($event_description)
    {
        $this->container['event_description'] = $event_description;

        return $this;
    }

    /**
     * Gets event_address
     *
     * @return string
     */
    public function getEventAddress()
    {
        return $this->container['event_address'];
    }

    /**
     * Sets event_address
     *
     * @param string $event_address Address where the event will take place.
     *
     * @return $this
     */
    public function setEventAddress($event_address)
    {
        $this->container['event_address'] = $event_address;

        return $this;
    }

    /**
     * Gets event_latitude
     *
     * @return float
     */
    public function getEventLatitude()
    {
        return $this->container['event_latitude'];
    }

    /**
     * Sets event_latitude
     *
     * @param float $event_latitude Latitude of the event location.
     *
     * @return $this
     */
    public function setEventLatitude($event_latitude)
    {
        $this->container['event_latitude'] = $event_latitude;

        return $this;
    }

    /**
     * Gets event_longitude
     *
     * @return float
     */
    public function getEventLongitude()
    {
        return $this->container['event_longitude'];
    }

    /**
     * Sets event_longitude
     *
     * @param float $event_longitude Longitude of the event location.
     *
     * @return $this
     */
    public function setEventLongitude($event_longitude)
    {
        $this->container['event_longitude'] = $event_longitude;

        return $this;
    }

    /**
     * Gets event_distance
     *
     * @return float
     */
    public function getEventDistance()
    {
        return $this->container['event_distance'];
    }

    /**
     * Sets event_distance
     *
     * @param float $event_distance Distance to the event from a reference point.
     *
     * @return $this
     */
    public function setEventDistance($event_distance)
    {
        $this->container['event_distance'] = $event_distance;

        return $this;
    }

    /**
     * Gets event_distance_metric
     *
     * @return string
     */
    public function getEventDistanceMetric()
    {
        return $this->container['event_distance_metric'];
    }

    /**
     * Sets event_distance_metric
     *
     * @param string $event_distance_metric Metric used to measure the distance to the event.
     *
     * @return $this
     */
    public function setEventDistanceMetric($event_distance_metric)
    {
        $this->container['event_distance_metric'] = $event_distance_metric;

        return $this;
    }

    /**
     * Gets event_images
     *
     * @return string[]
     */
    public function getEventImages()
    {
        return $this->container['event_images'];
    }

    /**
     * Sets event_images
     *
     * @param string[] $event_images Images of the event.
     *
     * @return $this
     */
    public function setEventImages($event_images)
    {
        $this->container['event_images'] = $event_images;

        return $this;
    }

    /**
     * Gets event_rating
     *
     * @return float
     */
    public function getEventRating()
    {
        return $this->container['event_rating'];
    }

    /**
     * Sets event_rating
     *
     * @param float $event_rating Rating of the event.
     *
     * @return $this
     */
    public function setEventRating($event_rating)
    {
        $this->container['event_rating'] = $event_rating;

        return $this;
    }

    /**
     * Gets event_reviews
     *
     * @return string[]
     */
    public function getEventReviews()
    {
        return $this->container['event_reviews'];
    }

    /**
     * Sets event_reviews
     *
     * @param string[] $event_reviews Reviews of the event.
     *
     * @return $this
     */
    public function setEventReviews($event_reviews)
    {
        $this->container['event_reviews'] = $event_reviews;

        return $this;
    }

    /**
     * Gets event_venue
     *
     * @return string
     */
    public function getEventVenue()
    {
        return $this->container['event_venue'];
    }

    /**
     * Sets event_venue
     *
     * @param string $event_venue Venue where the event will take place.
     *
     * @return $this
     */
    public function setEventVenue($event_venue)
    {
        $this->container['event_venue'] = $event_venue;

        return $this;
    }

    /**
     * Gets event_venue_capacity
     *
     * @return float
     */
    public function getEventVenueCapacity()
    {
        return $this->container['event_venue_capacity'];
    }

    /**
     * Sets event_venue_capacity
     *
     * @param float $event_venue_capacity Capacity of the venue.
     *
     * @return $this
     */
    public function setEventVenueCapacity($event_venue_capacity)
    {
        $this->container['event_venue_capacity'] = $event_venue_capacity;

        return $this;
    }

    /**
     * Gets event_performers
     *
     * @return string[]
     */
    public function getEventPerformers()
    {
        return $this->container['event_performers'];
    }

    /**
     * Sets event_performers
     *
     * @param string[] $event_performers Performers at the event.
     *
     * @return $this
     */
    public function setEventPerformers($event_performers)
    {
        $this->container['event_performers'] = $event_performers;

        return $this;
    }

    /**
     * Gets event_subcategories
     *
     * @return string[]
     */
    public function getEventSubcategories()
    {
        return $this->container['event_subcategories'];
    }

    /**
     * Sets event_subcategories
     *
     * @param string[] $event_subcategories Subcategories of the event.
     *
     * @return $this
     */
    public function setEventSubcategories($event_subcategories)
    {
        $this->container['event_subcategories'] = $event_subcategories;

        return $this;
    }

    /**
     * Gets booking_questions
     *
     * @return string[]
     */
    public function getBookingQuestions()
    {
        return $this->container['booking_questions'];
    }

    /**
     * Sets booking_questions
     *
     * @param string[] $booking_questions Questions related to booking the event.
     *
     * @return $this
     */
    public function setBookingQuestions($booking_questions)
    {
        $this->container['booking_questions'] = $booking_questions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
