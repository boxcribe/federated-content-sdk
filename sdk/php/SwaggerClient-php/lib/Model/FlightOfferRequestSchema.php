<?php
/**
 * FlightOfferRequestSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Federated Content API
 *
 * Welcome to the Federated Content API following Open API Specification (Version 3.0.0)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.57
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FlightOfferRequestSchema Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FlightOfferRequestSchema implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FlightOfferRequestSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cabin' => 'array',
        'legs' => 'array',
        'passengers' => 'array',
        'private_fare_codes' => 'array',
        'filter_by_keyword' => 'string',
        'filter_by_price_min' => 'float',
        'filter_by_price_max' => 'float',
        'filter_by_duration_min' => 'int',
        'filter_by_duration_max' => 'int',
        'filter_by_departure_time_min' => 'string',
        'filter_by_departure_time_max' => 'string',
        'filter_by_arrival_time_min' => 'string',
        'filter_by_arrival_time_max' => 'string',
        'filter_by_stops_min' => 'int',
        'filter_by_stops_max' => 'int',
        'filter_by_airlines' => 'array',
        'filter_by_airports' => 'array',
        'sort_by' => 'string',
        'sort_order' => 'string',
        'page' => 'int',
        'limit' => 'int',
        'language' => 'string',
        'currency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cabin' => null,
        'legs' => null,
        'passengers' => null,
        'private_fare_codes' => null,
        'filter_by_keyword' => null,
        'filter_by_price_min' => 'float',
        'filter_by_price_max' => 'float',
        'filter_by_duration_min' => null,
        'filter_by_duration_max' => null,
        'filter_by_departure_time_min' => 'time',
        'filter_by_departure_time_max' => 'time',
        'filter_by_arrival_time_min' => 'time',
        'filter_by_arrival_time_max' => 'time',
        'filter_by_stops_min' => null,
        'filter_by_stops_max' => null,
        'filter_by_airlines' => null,
        'filter_by_airports' => null,
        'sort_by' => null,
        'sort_order' => null,
        'page' => null,
        'limit' => null,
        'language' => null,
        'currency' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cabin' => 'cabin',
        'legs' => 'legs',
        'passengers' => 'passengers',
        'private_fare_codes' => 'private_fare_codes',
        'filter_by_keyword' => 'filter_by_keyword',
        'filter_by_price_min' => 'filter_by_price_min',
        'filter_by_price_max' => 'filter_by_price_max',
        'filter_by_duration_min' => 'filter_by_duration_min',
        'filter_by_duration_max' => 'filter_by_duration_max',
        'filter_by_departure_time_min' => 'filter_by_departure_time_min',
        'filter_by_departure_time_max' => 'filter_by_departure_time_max',
        'filter_by_arrival_time_min' => 'filter_by_arrival_time_min',
        'filter_by_arrival_time_max' => 'filter_by_arrival_time_max',
        'filter_by_stops_min' => 'filter_by_stops_min',
        'filter_by_stops_max' => 'filter_by_stops_max',
        'filter_by_airlines' => 'filter_by_airlines',
        'filter_by_airports' => 'filter_by_airports',
        'sort_by' => 'sort_by',
        'sort_order' => 'sort_order',
        'page' => 'page',
        'limit' => 'limit',
        'language' => 'language',
        'currency' => 'currency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cabin' => 'setCabin',
        'legs' => 'setLegs',
        'passengers' => 'setPassengers',
        'private_fare_codes' => 'setPrivateFareCodes',
        'filter_by_keyword' => 'setFilterByKeyword',
        'filter_by_price_min' => 'setFilterByPriceMin',
        'filter_by_price_max' => 'setFilterByPriceMax',
        'filter_by_duration_min' => 'setFilterByDurationMin',
        'filter_by_duration_max' => 'setFilterByDurationMax',
        'filter_by_departure_time_min' => 'setFilterByDepartureTimeMin',
        'filter_by_departure_time_max' => 'setFilterByDepartureTimeMax',
        'filter_by_arrival_time_min' => 'setFilterByArrivalTimeMin',
        'filter_by_arrival_time_max' => 'setFilterByArrivalTimeMax',
        'filter_by_stops_min' => 'setFilterByStopsMin',
        'filter_by_stops_max' => 'setFilterByStopsMax',
        'filter_by_airlines' => 'setFilterByAirlines',
        'filter_by_airports' => 'setFilterByAirports',
        'sort_by' => 'setSortBy',
        'sort_order' => 'setSortOrder',
        'page' => 'setPage',
        'limit' => 'setLimit',
        'language' => 'setLanguage',
        'currency' => 'setCurrency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cabin' => 'getCabin',
        'legs' => 'getLegs',
        'passengers' => 'getPassengers',
        'private_fare_codes' => 'getPrivateFareCodes',
        'filter_by_keyword' => 'getFilterByKeyword',
        'filter_by_price_min' => 'getFilterByPriceMin',
        'filter_by_price_max' => 'getFilterByPriceMax',
        'filter_by_duration_min' => 'getFilterByDurationMin',
        'filter_by_duration_max' => 'getFilterByDurationMax',
        'filter_by_departure_time_min' => 'getFilterByDepartureTimeMin',
        'filter_by_departure_time_max' => 'getFilterByDepartureTimeMax',
        'filter_by_arrival_time_min' => 'getFilterByArrivalTimeMin',
        'filter_by_arrival_time_max' => 'getFilterByArrivalTimeMax',
        'filter_by_stops_min' => 'getFilterByStopsMin',
        'filter_by_stops_max' => 'getFilterByStopsMax',
        'filter_by_airlines' => 'getFilterByAirlines',
        'filter_by_airports' => 'getFilterByAirports',
        'sort_by' => 'getSortBy',
        'sort_order' => 'getSortOrder',
        'page' => 'getPage',
        'limit' => 'getLimit',
        'language' => 'getLanguage',
        'currency' => 'getCurrency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cabin'] = isset($data['cabin']) ? $data['cabin'] : null;
        $this->container['legs'] = isset($data['legs']) ? $data['legs'] : null;
        $this->container['passengers'] = isset($data['passengers']) ? $data['passengers'] : null;
        $this->container['private_fare_codes'] = isset($data['private_fare_codes']) ? $data['private_fare_codes'] : null;
        $this->container['filter_by_keyword'] = isset($data['filter_by_keyword']) ? $data['filter_by_keyword'] : null;
        $this->container['filter_by_price_min'] = isset($data['filter_by_price_min']) ? $data['filter_by_price_min'] : null;
        $this->container['filter_by_price_max'] = isset($data['filter_by_price_max']) ? $data['filter_by_price_max'] : null;
        $this->container['filter_by_duration_min'] = isset($data['filter_by_duration_min']) ? $data['filter_by_duration_min'] : null;
        $this->container['filter_by_duration_max'] = isset($data['filter_by_duration_max']) ? $data['filter_by_duration_max'] : null;
        $this->container['filter_by_departure_time_min'] = isset($data['filter_by_departure_time_min']) ? $data['filter_by_departure_time_min'] : null;
        $this->container['filter_by_departure_time_max'] = isset($data['filter_by_departure_time_max']) ? $data['filter_by_departure_time_max'] : null;
        $this->container['filter_by_arrival_time_min'] = isset($data['filter_by_arrival_time_min']) ? $data['filter_by_arrival_time_min'] : null;
        $this->container['filter_by_arrival_time_max'] = isset($data['filter_by_arrival_time_max']) ? $data['filter_by_arrival_time_max'] : null;
        $this->container['filter_by_stops_min'] = isset($data['filter_by_stops_min']) ? $data['filter_by_stops_min'] : null;
        $this->container['filter_by_stops_max'] = isset($data['filter_by_stops_max']) ? $data['filter_by_stops_max'] : null;
        $this->container['filter_by_airlines'] = isset($data['filter_by_airlines']) ? $data['filter_by_airlines'] : null;
        $this->container['filter_by_airports'] = isset($data['filter_by_airports']) ? $data['filter_by_airports'] : null;
        $this->container['sort_by'] = isset($data['sort_by']) ? $data['sort_by'] : null;
        $this->container['sort_order'] = isset($data['sort_order']) ? $data['sort_order'] : null;
        $this->container['page'] = isset($data['page']) ? $data['page'] : null;
        $this->container['limit'] = isset($data['limit']) ? $data['limit'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cabin
     *
     * @return array
     */
    public function getCabin()
    {
        return $this->container['cabin'];
    }

    /**
     * Sets cabin
     *
     * @param array $cabin Class options: first, business, premium economy, economy.
     *
     * @return $this
     */
    public function setCabin($cabin)
    {
        $this->container['cabin'] = $cabin;

        return $this;
    }

    /**
     * Gets legs
     *
     * @return array
     */
    public function getLegs()
    {
        return $this->container['legs'];
    }

    /**
     * Sets legs
     *
     * @param array $legs Array of flight legs, each described in FlightLegOfferRequestSchema.
     *
     * @return $this
     */
    public function setLegs($legs)
    {
        $this->container['legs'] = $legs;

        return $this;
    }

    /**
     * Gets passengers
     *
     * @return array
     */
    public function getPassengers()
    {
        return $this->container['passengers'];
    }

    /**
     * Sets passengers
     *
     * @param array $passengers Array of passengers, each described in FlightPassengerOfferRequestSchema.
     *
     * @return $this
     */
    public function setPassengers($passengers)
    {
        $this->container['passengers'] = $passengers;

        return $this;
    }

    /**
     * Gets private_fare_codes
     *
     * @return array
     */
    public function getPrivateFareCodes()
    {
        return $this->container['private_fare_codes'];
    }

    /**
     * Sets private_fare_codes
     *
     * @param array $private_fare_codes Array of codes for accessing special negotiated fares.
     *
     * @return $this
     */
    public function setPrivateFareCodes($private_fare_codes)
    {
        $this->container['private_fare_codes'] = $private_fare_codes;

        return $this;
    }

    /**
     * Gets filter_by_keyword
     *
     * @return string
     */
    public function getFilterByKeyword()
    {
        return $this->container['filter_by_keyword'];
    }

    /**
     * Sets filter_by_keyword
     *
     * @param string $filter_by_keyword Keyword to filter offers.
     *
     * @return $this
     */
    public function setFilterByKeyword($filter_by_keyword)
    {
        $this->container['filter_by_keyword'] = $filter_by_keyword;

        return $this;
    }

    /**
     * Gets filter_by_price_min
     *
     * @return float
     */
    public function getFilterByPriceMin()
    {
        return $this->container['filter_by_price_min'];
    }

    /**
     * Sets filter_by_price_min
     *
     * @param float $filter_by_price_min Minimum price filter.
     *
     * @return $this
     */
    public function setFilterByPriceMin($filter_by_price_min)
    {
        $this->container['filter_by_price_min'] = $filter_by_price_min;

        return $this;
    }

    /**
     * Gets filter_by_price_max
     *
     * @return float
     */
    public function getFilterByPriceMax()
    {
        return $this->container['filter_by_price_max'];
    }

    /**
     * Sets filter_by_price_max
     *
     * @param float $filter_by_price_max Maximum price filter.
     *
     * @return $this
     */
    public function setFilterByPriceMax($filter_by_price_max)
    {
        $this->container['filter_by_price_max'] = $filter_by_price_max;

        return $this;
    }

    /**
     * Gets filter_by_duration_min
     *
     * @return int
     */
    public function getFilterByDurationMin()
    {
        return $this->container['filter_by_duration_min'];
    }

    /**
     * Sets filter_by_duration_min
     *
     * @param int $filter_by_duration_min Minimum flight duration filter.
     *
     * @return $this
     */
    public function setFilterByDurationMin($filter_by_duration_min)
    {
        $this->container['filter_by_duration_min'] = $filter_by_duration_min;

        return $this;
    }

    /**
     * Gets filter_by_duration_max
     *
     * @return int
     */
    public function getFilterByDurationMax()
    {
        return $this->container['filter_by_duration_max'];
    }

    /**
     * Sets filter_by_duration_max
     *
     * @param int $filter_by_duration_max Maximum flight duration filter.
     *
     * @return $this
     */
    public function setFilterByDurationMax($filter_by_duration_max)
    {
        $this->container['filter_by_duration_max'] = $filter_by_duration_max;

        return $this;
    }

    /**
     * Gets filter_by_departure_time_min
     *
     * @return string
     */
    public function getFilterByDepartureTimeMin()
    {
        return $this->container['filter_by_departure_time_min'];
    }

    /**
     * Sets filter_by_departure_time_min
     *
     * @param string $filter_by_departure_time_min Earliest departure time filter.
     *
     * @return $this
     */
    public function setFilterByDepartureTimeMin($filter_by_departure_time_min)
    {
        $this->container['filter_by_departure_time_min'] = $filter_by_departure_time_min;

        return $this;
    }

    /**
     * Gets filter_by_departure_time_max
     *
     * @return string
     */
    public function getFilterByDepartureTimeMax()
    {
        return $this->container['filter_by_departure_time_max'];
    }

    /**
     * Sets filter_by_departure_time_max
     *
     * @param string $filter_by_departure_time_max Latest departure time filter.
     *
     * @return $this
     */
    public function setFilterByDepartureTimeMax($filter_by_departure_time_max)
    {
        $this->container['filter_by_departure_time_max'] = $filter_by_departure_time_max;

        return $this;
    }

    /**
     * Gets filter_by_arrival_time_min
     *
     * @return string
     */
    public function getFilterByArrivalTimeMin()
    {
        return $this->container['filter_by_arrival_time_min'];
    }

    /**
     * Sets filter_by_arrival_time_min
     *
     * @param string $filter_by_arrival_time_min Earliest arrival time filter.
     *
     * @return $this
     */
    public function setFilterByArrivalTimeMin($filter_by_arrival_time_min)
    {
        $this->container['filter_by_arrival_time_min'] = $filter_by_arrival_time_min;

        return $this;
    }

    /**
     * Gets filter_by_arrival_time_max
     *
     * @return string
     */
    public function getFilterByArrivalTimeMax()
    {
        return $this->container['filter_by_arrival_time_max'];
    }

    /**
     * Sets filter_by_arrival_time_max
     *
     * @param string $filter_by_arrival_time_max Latest arrival time filter.
     *
     * @return $this
     */
    public function setFilterByArrivalTimeMax($filter_by_arrival_time_max)
    {
        $this->container['filter_by_arrival_time_max'] = $filter_by_arrival_time_max;

        return $this;
    }

    /**
     * Gets filter_by_stops_min
     *
     * @return int
     */
    public function getFilterByStopsMin()
    {
        return $this->container['filter_by_stops_min'];
    }

    /**
     * Sets filter_by_stops_min
     *
     * @param int $filter_by_stops_min Minimum number of stops filter.
     *
     * @return $this
     */
    public function setFilterByStopsMin($filter_by_stops_min)
    {
        $this->container['filter_by_stops_min'] = $filter_by_stops_min;

        return $this;
    }

    /**
     * Gets filter_by_stops_max
     *
     * @return int
     */
    public function getFilterByStopsMax()
    {
        return $this->container['filter_by_stops_max'];
    }

    /**
     * Sets filter_by_stops_max
     *
     * @param int $filter_by_stops_max Maximum number of stops filter.
     *
     * @return $this
     */
    public function setFilterByStopsMax($filter_by_stops_max)
    {
        $this->container['filter_by_stops_max'] = $filter_by_stops_max;

        return $this;
    }

    /**
     * Gets filter_by_airlines
     *
     * @return array
     */
    public function getFilterByAirlines()
    {
        return $this->container['filter_by_airlines'];
    }

    /**
     * Sets filter_by_airlines
     *
     * @param array $filter_by_airlines List of airline filters.
     *
     * @return $this
     */
    public function setFilterByAirlines($filter_by_airlines)
    {
        $this->container['filter_by_airlines'] = $filter_by_airlines;

        return $this;
    }

    /**
     * Gets filter_by_airports
     *
     * @return array
     */
    public function getFilterByAirports()
    {
        return $this->container['filter_by_airports'];
    }

    /**
     * Sets filter_by_airports
     *
     * @param array $filter_by_airports List of airport filters.
     *
     * @return $this
     */
    public function setFilterByAirports($filter_by_airports)
    {
        $this->container['filter_by_airports'] = $filter_by_airports;

        return $this;
    }

    /**
     * Gets sort_by
     *
     * @return string
     */
    public function getSortBy()
    {
        return $this->container['sort_by'];
    }

    /**
     * Sets sort_by
     *
     * @param string $sort_by Sorting criteria.
     *
     * @return $this
     */
    public function setSortBy($sort_by)
    {
        $this->container['sort_by'] = $sort_by;

        return $this;
    }

    /**
     * Gets sort_order
     *
     * @return string
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     *
     * @param string $sort_order Sorting order, asc or desc.
     *
     * @return $this
     */
    public function setSortOrder($sort_order)
    {
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets page
     *
     * @return int
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     *
     * @param int $page Pagination: page number.
     *
     * @return $this
     */
    public function setPage($page)
    {
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int $limit Pagination: maximum items per page.
     *
     * @return $this
     */
    public function setLimit($limit)
    {
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language Language selection for offer details.
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Currency in which prices should be provided.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
