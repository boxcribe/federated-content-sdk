<?php
/**
 * OfferResultNormalizedResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Federated Content API
 *
 * Welcome to the Federated Content API following Open API Specification (Version 3.0.0)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.57
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OfferResultNormalizedResponse Class Doc Comment
 *
 * @category Class
 * @description Offer Request Normalized Boxcribe API Response
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OfferResultNormalizedResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OfferResult_normalized_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ids' => 'string',
        'category' => 'string',
        'index' => 'int',
        'name' => 'string',
        'description' => 'string',
        'address' => 'string',
        'latitude' => 'float',
        'longitude' => 'float',
        'distance' => 'float',
        'distance_unit_of_measure' => 'string',
        'pictures' => 'string[]',
        'tax' => 'float',
        'price' => 'float',
        'currency' => 'string',
        'price_description' => 'string',
        'free_cancellation' => 'bool',
        'rating' => 'float',
        'status' => 'string',
        'ohter_attributes' => 'object',
        'offer_rooms' => 'array',
        'offer_variants' => 'array'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ids' => null,
        'category' => null,
        'index' => null,
        'name' => null,
        'description' => null,
        'address' => null,
        'latitude' => null,
        'longitude' => null,
        'distance' => null,
        'distance_unit_of_measure' => null,
        'pictures' => null,
        'tax' => null,
        'price' => null,
        'currency' => null,
        'price_description' => null,
        'free_cancellation' => null,
        'rating' => null,
        'status' => null,
        'ohter_attributes' => null,
        'offer_rooms' => null,
        'offer_variants' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ids' => 'ids',
        'category' => 'category',
        'index' => 'index',
        'name' => 'name',
        'description' => 'description',
        'address' => 'address',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'distance' => 'distance',
        'distance_unit_of_measure' => 'distanceUnitOfMeasure',
        'pictures' => 'pictures',
        'tax' => 'tax',
        'price' => 'price',
        'currency' => 'currency',
        'price_description' => 'priceDescription',
        'free_cancellation' => 'freeCancellation',
        'rating' => 'rating',
        'status' => 'status',
        'ohter_attributes' => 'ohter_attributes',
        'offer_rooms' => 'offer_rooms',
        'offer_variants' => 'offer_variants'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ids' => 'setIds',
        'category' => 'setCategory',
        'index' => 'setIndex',
        'name' => 'setName',
        'description' => 'setDescription',
        'address' => 'setAddress',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'distance' => 'setDistance',
        'distance_unit_of_measure' => 'setDistanceUnitOfMeasure',
        'pictures' => 'setPictures',
        'tax' => 'setTax',
        'price' => 'setPrice',
        'currency' => 'setCurrency',
        'price_description' => 'setPriceDescription',
        'free_cancellation' => 'setFreeCancellation',
        'rating' => 'setRating',
        'status' => 'setStatus',
        'ohter_attributes' => 'setOhterAttributes',
        'offer_rooms' => 'setOfferRooms',
        'offer_variants' => 'setOfferVariants'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ids' => 'getIds',
        'category' => 'getCategory',
        'index' => 'getIndex',
        'name' => 'getName',
        'description' => 'getDescription',
        'address' => 'getAddress',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'distance' => 'getDistance',
        'distance_unit_of_measure' => 'getDistanceUnitOfMeasure',
        'pictures' => 'getPictures',
        'tax' => 'getTax',
        'price' => 'getPrice',
        'currency' => 'getCurrency',
        'price_description' => 'getPriceDescription',
        'free_cancellation' => 'getFreeCancellation',
        'rating' => 'getRating',
        'status' => 'getStatus',
        'ohter_attributes' => 'getOhterAttributes',
        'offer_rooms' => 'getOfferRooms',
        'offer_variants' => 'getOfferVariants'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ids'] = isset($data['ids']) ? $data['ids'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['index'] = isset($data['index']) ? $data['index'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['latitude'] = isset($data['latitude']) ? $data['latitude'] : null;
        $this->container['longitude'] = isset($data['longitude']) ? $data['longitude'] : null;
        $this->container['distance'] = isset($data['distance']) ? $data['distance'] : null;
        $this->container['distance_unit_of_measure'] = isset($data['distance_unit_of_measure']) ? $data['distance_unit_of_measure'] : null;
        $this->container['pictures'] = isset($data['pictures']) ? $data['pictures'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['price_description'] = isset($data['price_description']) ? $data['price_description'] : null;
        $this->container['free_cancellation'] = isset($data['free_cancellation']) ? $data['free_cancellation'] : null;
        $this->container['rating'] = isset($data['rating']) ? $data['rating'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['ohter_attributes'] = isset($data['ohter_attributes']) ? $data['ohter_attributes'] : null;
        $this->container['offer_rooms'] = isset($data['offer_rooms']) ? $data['offer_rooms'] : null;
        $this->container['offer_variants'] = isset($data['offer_variants']) ? $data['offer_variants'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ids
     *
     * @return string
     */
    public function getIds()
    {
        return $this->container['ids'];
    }

    /**
     * Sets ids
     *
     * @param string $ids ids
     *
     * @return $this
     */
    public function setIds($ids)
    {
        $this->container['ids'] = $ids;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets index
     *
     * @return int
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param int $index index
     *
     * @return $this
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return float
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param float $latitude latitude
     *
     * @return $this
     */
    public function setLatitude($latitude)
    {
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return float
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param float $longitude longitude
     *
     * @return $this
     */
    public function setLongitude($longitude)
    {
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return float
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param float $distance distance
     *
     * @return $this
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets distance_unit_of_measure
     *
     * @return string
     */
    public function getDistanceUnitOfMeasure()
    {
        return $this->container['distance_unit_of_measure'];
    }

    /**
     * Sets distance_unit_of_measure
     *
     * @param string $distance_unit_of_measure distance_unit_of_measure
     *
     * @return $this
     */
    public function setDistanceUnitOfMeasure($distance_unit_of_measure)
    {
        $this->container['distance_unit_of_measure'] = $distance_unit_of_measure;

        return $this;
    }

    /**
     * Gets pictures
     *
     * @return string[]
     */
    public function getPictures()
    {
        return $this->container['pictures'];
    }

    /**
     * Sets pictures
     *
     * @param string[] $pictures pictures
     *
     * @return $this
     */
    public function setPictures($pictures)
    {
        $this->container['pictures'] = $pictures;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return float
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param float $tax tax
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets price_description
     *
     * @return string
     */
    public function getPriceDescription()
    {
        return $this->container['price_description'];
    }

    /**
     * Sets price_description
     *
     * @param string $price_description price_description
     *
     * @return $this
     */
    public function setPriceDescription($price_description)
    {
        $this->container['price_description'] = $price_description;

        return $this;
    }

    /**
     * Gets free_cancellation
     *
     * @return bool
     */
    public function getFreeCancellation()
    {
        return $this->container['free_cancellation'];
    }

    /**
     * Sets free_cancellation
     *
     * @param bool $free_cancellation free_cancellation
     *
     * @return $this
     */
    public function setFreeCancellation($free_cancellation)
    {
        $this->container['free_cancellation'] = $free_cancellation;

        return $this;
    }

    /**
     * Gets rating
     *
     * @return float
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     *
     * @param float $rating rating
     *
     * @return $this
     */
    public function setRating($rating)
    {
        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets ohter_attributes
     *
     * @return object
     */
    public function getOhterAttributes()
    {
        return $this->container['ohter_attributes'];
    }

    /**
     * Sets ohter_attributes
     *
     * @param object $ohter_attributes ohter_attributes
     *
     * @return $this
     */
    public function setOhterAttributes($ohter_attributes)
    {
        $this->container['ohter_attributes'] = $ohter_attributes;

        return $this;
    }

    /**
     * Gets offer_rooms
     *
     * @return array
     */
    public function getOfferRooms()
    {
        return $this->container['offer_rooms'];
    }

    /**
     * Sets offer_rooms
     *
     * @param array $offer_rooms offer_rooms
     *
     * @return $this
     */
    public function setOfferRooms($offer_rooms)
    {
        $this->container['offer_rooms'] = $offer_rooms;

        return $this;
    }

    /**
     * Gets offer_variants
     *
     * @return array
     */
    public function getOfferVariants()
    {
        return $this->container['offer_variants'];
    }

    /**
     * Sets offer_variants
     *
     * @param array $offer_variants offer_variants
     *
     * @return $this
     */
    public function setOfferVariants($offer_variants)
    {
        $this->container['offer_variants'] = $offer_variants;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
