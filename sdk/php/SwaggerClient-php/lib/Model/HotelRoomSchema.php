<?php
/**
 * HotelRoomSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Federated Content API
 *
 * Welcome to the Federated Content API following Open API Specification (Version 3.0.0)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.57
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * HotelRoomSchema Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HotelRoomSchema implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HotelRoomSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'room_id' => 'string',
        'supplier_room_id' => 'string',
        'room_index' => 'int',
        'checkin_date' => '\DateTime',
        'checkout_date' => '\DateTime',
        'adults' => 'int',
        'children' => 'int',
        'room_tax' => 'double',
        'room_price' => 'double',
        'room_currency' => 'string',
        'room_cancellation_policies' => 'object',
        'room_name' => 'string',
        'room_description' => 'string',
        'room_images' => 'string[]',
        'room_quantity_max' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'room_id' => 'uuid',
        'supplier_room_id' => null,
        'room_index' => null,
        'checkin_date' => 'date',
        'checkout_date' => 'date',
        'adults' => null,
        'children' => null,
        'room_tax' => 'double',
        'room_price' => 'double',
        'room_currency' => null,
        'room_cancellation_policies' => null,
        'room_name' => null,
        'room_description' => null,
        'room_images' => null,
        'room_quantity_max' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'room_id' => 'room_id',
        'supplier_room_id' => 'supplier_room_id',
        'room_index' => 'room_index',
        'checkin_date' => 'checkin_date',
        'checkout_date' => 'checkout_date',
        'adults' => 'adults',
        'children' => 'children',
        'room_tax' => 'room_tax',
        'room_price' => 'room_price',
        'room_currency' => 'room_currency',
        'room_cancellation_policies' => 'room_cancellation_policies',
        'room_name' => 'room_name',
        'room_description' => 'room_description',
        'room_images' => 'room_images',
        'room_quantity_max' => 'room_quantity_max'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'room_id' => 'setRoomId',
        'supplier_room_id' => 'setSupplierRoomId',
        'room_index' => 'setRoomIndex',
        'checkin_date' => 'setCheckinDate',
        'checkout_date' => 'setCheckoutDate',
        'adults' => 'setAdults',
        'children' => 'setChildren',
        'room_tax' => 'setRoomTax',
        'room_price' => 'setRoomPrice',
        'room_currency' => 'setRoomCurrency',
        'room_cancellation_policies' => 'setRoomCancellationPolicies',
        'room_name' => 'setRoomName',
        'room_description' => 'setRoomDescription',
        'room_images' => 'setRoomImages',
        'room_quantity_max' => 'setRoomQuantityMax'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'room_id' => 'getRoomId',
        'supplier_room_id' => 'getSupplierRoomId',
        'room_index' => 'getRoomIndex',
        'checkin_date' => 'getCheckinDate',
        'checkout_date' => 'getCheckoutDate',
        'adults' => 'getAdults',
        'children' => 'getChildren',
        'room_tax' => 'getRoomTax',
        'room_price' => 'getRoomPrice',
        'room_currency' => 'getRoomCurrency',
        'room_cancellation_policies' => 'getRoomCancellationPolicies',
        'room_name' => 'getRoomName',
        'room_description' => 'getRoomDescription',
        'room_images' => 'getRoomImages',
        'room_quantity_max' => 'getRoomQuantityMax'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['room_id'] = isset($data['room_id']) ? $data['room_id'] : null;
        $this->container['supplier_room_id'] = isset($data['supplier_room_id']) ? $data['supplier_room_id'] : null;
        $this->container['room_index'] = isset($data['room_index']) ? $data['room_index'] : null;
        $this->container['checkin_date'] = isset($data['checkin_date']) ? $data['checkin_date'] : null;
        $this->container['checkout_date'] = isset($data['checkout_date']) ? $data['checkout_date'] : null;
        $this->container['adults'] = isset($data['adults']) ? $data['adults'] : null;
        $this->container['children'] = isset($data['children']) ? $data['children'] : null;
        $this->container['room_tax'] = isset($data['room_tax']) ? $data['room_tax'] : null;
        $this->container['room_price'] = isset($data['room_price']) ? $data['room_price'] : null;
        $this->container['room_currency'] = isset($data['room_currency']) ? $data['room_currency'] : null;
        $this->container['room_cancellation_policies'] = isset($data['room_cancellation_policies']) ? $data['room_cancellation_policies'] : null;
        $this->container['room_name'] = isset($data['room_name']) ? $data['room_name'] : null;
        $this->container['room_description'] = isset($data['room_description']) ? $data['room_description'] : null;
        $this->container['room_images'] = isset($data['room_images']) ? $data['room_images'] : null;
        $this->container['room_quantity_max'] = isset($data['room_quantity_max']) ? $data['room_quantity_max'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets room_id
     *
     * @return string
     */
    public function getRoomId()
    {
        return $this->container['room_id'];
    }

    /**
     * Sets room_id
     *
     * @param string $room_id Unique identifier for each room.
     *
     * @return $this
     */
    public function setRoomId($room_id)
    {
        $this->container['room_id'] = $room_id;

        return $this;
    }

    /**
     * Gets supplier_room_id
     *
     * @return string
     */
    public function getSupplierRoomId()
    {
        return $this->container['supplier_room_id'];
    }

    /**
     * Sets supplier_room_id
     *
     * @param string $supplier_room_id Supplier specific identifier for the room.
     *
     * @return $this
     */
    public function setSupplierRoomId($supplier_room_id)
    {
        $this->container['supplier_room_id'] = $supplier_room_id;

        return $this;
    }

    /**
     * Gets room_index
     *
     * @return int
     */
    public function getRoomIndex()
    {
        return $this->container['room_index'];
    }

    /**
     * Sets room_index
     *
     * @param int $room_index Position of the room in the list.
     *
     * @return $this
     */
    public function setRoomIndex($room_index)
    {
        $this->container['room_index'] = $room_index;

        return $this;
    }

    /**
     * Gets checkin_date
     *
     * @return \DateTime
     */
    public function getCheckinDate()
    {
        return $this->container['checkin_date'];
    }

    /**
     * Sets checkin_date
     *
     * @param \DateTime $checkin_date Start date of the hotel reservation.
     *
     * @return $this
     */
    public function setCheckinDate($checkin_date)
    {
        $this->container['checkin_date'] = $checkin_date;

        return $this;
    }

    /**
     * Gets checkout_date
     *
     * @return \DateTime
     */
    public function getCheckoutDate()
    {
        return $this->container['checkout_date'];
    }

    /**
     * Sets checkout_date
     *
     * @param \DateTime $checkout_date End date of the hotel reservation.
     *
     * @return $this
     */
    public function setCheckoutDate($checkout_date)
    {
        $this->container['checkout_date'] = $checkout_date;

        return $this;
    }

    /**
     * Gets adults
     *
     * @return int
     */
    public function getAdults()
    {
        return $this->container['adults'];
    }

    /**
     * Sets adults
     *
     * @param int $adults Number of adults that can be accommodated in the room.
     *
     * @return $this
     */
    public function setAdults($adults)
    {
        $this->container['adults'] = $adults;

        return $this;
    }

    /**
     * Gets children
     *
     * @return int
     */
    public function getChildren()
    {
        return $this->container['children'];
    }

    /**
     * Sets children
     *
     * @param int $children Number of children that can be accommodated in the room.
     *
     * @return $this
     */
    public function setChildren($children)
    {
        $this->container['children'] = $children;

        return $this;
    }

    /**
     * Gets room_tax
     *
     * @return double
     */
    public function getRoomTax()
    {
        return $this->container['room_tax'];
    }

    /**
     * Sets room_tax
     *
     * @param double $room_tax Tax rate applicable to the room price.
     *
     * @return $this
     */
    public function setRoomTax($room_tax)
    {
        $this->container['room_tax'] = $room_tax;

        return $this;
    }

    /**
     * Gets room_price
     *
     * @return double
     */
    public function getRoomPrice()
    {
        return $this->container['room_price'];
    }

    /**
     * Sets room_price
     *
     * @param double $room_price Nightly rate for the room.
     *
     * @return $this
     */
    public function setRoomPrice($room_price)
    {
        $this->container['room_price'] = $room_price;

        return $this;
    }

    /**
     * Gets room_currency
     *
     * @return string
     */
    public function getRoomCurrency()
    {
        return $this->container['room_currency'];
    }

    /**
     * Sets room_currency
     *
     * @param string $room_currency Currency used for the room pricing.
     *
     * @return $this
     */
    public function setRoomCurrency($room_currency)
    {
        $this->container['room_currency'] = $room_currency;

        return $this;
    }

    /**
     * Gets room_cancellation_policies
     *
     * @return object
     */
    public function getRoomCancellationPolicies()
    {
        return $this->container['room_cancellation_policies'];
    }

    /**
     * Sets room_cancellation_policies
     *
     * @param object $room_cancellation_policies Details about the cancellation policy for the room.
     *
     * @return $this
     */
    public function setRoomCancellationPolicies($room_cancellation_policies)
    {
        $this->container['room_cancellation_policies'] = $room_cancellation_policies;

        return $this;
    }

    /**
     * Gets room_name
     *
     * @return string
     */
    public function getRoomName()
    {
        return $this->container['room_name'];
    }

    /**
     * Sets room_name
     *
     * @param string $room_name Type or name of the room.
     *
     * @return $this
     */
    public function setRoomName($room_name)
    {
        $this->container['room_name'] = $room_name;

        return $this;
    }

    /**
     * Gets room_description
     *
     * @return string
     */
    public function getRoomDescription()
    {
        return $this->container['room_description'];
    }

    /**
     * Sets room_description
     *
     * @param string $room_description Description of the room including amenities and features.
     *
     * @return $this
     */
    public function setRoomDescription($room_description)
    {
        $this->container['room_description'] = $room_description;

        return $this;
    }

    /**
     * Gets room_images
     *
     * @return string[]
     */
    public function getRoomImages()
    {
        return $this->container['room_images'];
    }

    /**
     * Sets room_images
     *
     * @param string[] $room_images Images showcasing the room.
     *
     * @return $this
     */
    public function setRoomImages($room_images)
    {
        $this->container['room_images'] = $room_images;

        return $this;
    }

    /**
     * Gets room_quantity_max
     *
     * @return int
     */
    public function getRoomQuantityMax()
    {
        return $this->container['room_quantity_max'];
    }

    /**
     * Sets room_quantity_max
     *
     * @param int $room_quantity_max Maximum quantity of this room type available.
     *
     * @return $this
     */
    public function setRoomQuantityMax($room_quantity_max)
    {
        $this->container['room_quantity_max'] = $room_quantity_max;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
