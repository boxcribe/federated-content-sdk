<?php
/**
 * EventTicketSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Federated Content API
 *
 * Welcome to the Federated Content API following Open API Specification (Version 3.0.0)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.57
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EventTicketSchema Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EventTicketSchema implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EventTicketSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ticket_id' => 'string',
        'supplier_ticket_id' => 'string',
        'ticket_index' => 'float',
        'ticket_tax' => 'float',
        'ticket_price' => 'float',
        'ticket_currency' => 'string',
        'ticket_cancellation_policies' => 'string',
        'ticket_section' => 'string',
        'ticket_row' => 'string',
        'ticket_seat' => 'string',
        'ticket_description' => 'string',
        'ticket_delivery_options' => 'string[]',
        'ticket_quantities' => 'int[]',
        'booking_questions' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ticket_id' => 'uuid',
        'supplier_ticket_id' => 'uuid',
        'ticket_index' => 'integer',
        'ticket_tax' => 'decimal',
        'ticket_price' => 'decimal',
        'ticket_currency' => null,
        'ticket_cancellation_policies' => null,
        'ticket_section' => null,
        'ticket_row' => null,
        'ticket_seat' => null,
        'ticket_description' => null,
        'ticket_delivery_options' => null,
        'ticket_quantities' => null,
        'booking_questions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ticket_id' => 'ticket_id',
        'supplier_ticket_id' => 'supplier_ticket_id',
        'ticket_index' => 'ticket_index',
        'ticket_tax' => 'ticket_tax',
        'ticket_price' => 'ticket_price',
        'ticket_currency' => 'ticket_currency',
        'ticket_cancellation_policies' => 'ticket_cancellation_policies',
        'ticket_section' => 'ticket_section',
        'ticket_row' => 'ticket_row',
        'ticket_seat' => 'ticket_seat',
        'ticket_description' => 'ticket_description',
        'ticket_delivery_options' => 'ticket_delivery_options',
        'ticket_quantities' => 'ticket_quantities',
        'booking_questions' => 'booking_questions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ticket_id' => 'setTicketId',
        'supplier_ticket_id' => 'setSupplierTicketId',
        'ticket_index' => 'setTicketIndex',
        'ticket_tax' => 'setTicketTax',
        'ticket_price' => 'setTicketPrice',
        'ticket_currency' => 'setTicketCurrency',
        'ticket_cancellation_policies' => 'setTicketCancellationPolicies',
        'ticket_section' => 'setTicketSection',
        'ticket_row' => 'setTicketRow',
        'ticket_seat' => 'setTicketSeat',
        'ticket_description' => 'setTicketDescription',
        'ticket_delivery_options' => 'setTicketDeliveryOptions',
        'ticket_quantities' => 'setTicketQuantities',
        'booking_questions' => 'setBookingQuestions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ticket_id' => 'getTicketId',
        'supplier_ticket_id' => 'getSupplierTicketId',
        'ticket_index' => 'getTicketIndex',
        'ticket_tax' => 'getTicketTax',
        'ticket_price' => 'getTicketPrice',
        'ticket_currency' => 'getTicketCurrency',
        'ticket_cancellation_policies' => 'getTicketCancellationPolicies',
        'ticket_section' => 'getTicketSection',
        'ticket_row' => 'getTicketRow',
        'ticket_seat' => 'getTicketSeat',
        'ticket_description' => 'getTicketDescription',
        'ticket_delivery_options' => 'getTicketDeliveryOptions',
        'ticket_quantities' => 'getTicketQuantities',
        'booking_questions' => 'getBookingQuestions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ticket_id'] = isset($data['ticket_id']) ? $data['ticket_id'] : null;
        $this->container['supplier_ticket_id'] = isset($data['supplier_ticket_id']) ? $data['supplier_ticket_id'] : null;
        $this->container['ticket_index'] = isset($data['ticket_index']) ? $data['ticket_index'] : null;
        $this->container['ticket_tax'] = isset($data['ticket_tax']) ? $data['ticket_tax'] : null;
        $this->container['ticket_price'] = isset($data['ticket_price']) ? $data['ticket_price'] : null;
        $this->container['ticket_currency'] = isset($data['ticket_currency']) ? $data['ticket_currency'] : null;
        $this->container['ticket_cancellation_policies'] = isset($data['ticket_cancellation_policies']) ? $data['ticket_cancellation_policies'] : null;
        $this->container['ticket_section'] = isset($data['ticket_section']) ? $data['ticket_section'] : null;
        $this->container['ticket_row'] = isset($data['ticket_row']) ? $data['ticket_row'] : null;
        $this->container['ticket_seat'] = isset($data['ticket_seat']) ? $data['ticket_seat'] : null;
        $this->container['ticket_description'] = isset($data['ticket_description']) ? $data['ticket_description'] : null;
        $this->container['ticket_delivery_options'] = isset($data['ticket_delivery_options']) ? $data['ticket_delivery_options'] : null;
        $this->container['ticket_quantities'] = isset($data['ticket_quantities']) ? $data['ticket_quantities'] : null;
        $this->container['booking_questions'] = isset($data['booking_questions']) ? $data['booking_questions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ticket_id
     *
     * @return string
     */
    public function getTicketId()
    {
        return $this->container['ticket_id'];
    }

    /**
     * Sets ticket_id
     *
     * @param string $ticket_id Unique identifier for the ticket.
     *
     * @return $this
     */
    public function setTicketId($ticket_id)
    {
        $this->container['ticket_id'] = $ticket_id;

        return $this;
    }

    /**
     * Gets supplier_ticket_id
     *
     * @return string
     */
    public function getSupplierTicketId()
    {
        return $this->container['supplier_ticket_id'];
    }

    /**
     * Sets supplier_ticket_id
     *
     * @param string $supplier_ticket_id Identifier for the ticket provided by the supplier.
     *
     * @return $this
     */
    public function setSupplierTicketId($supplier_ticket_id)
    {
        $this->container['supplier_ticket_id'] = $supplier_ticket_id;

        return $this;
    }

    /**
     * Gets ticket_index
     *
     * @return float
     */
    public function getTicketIndex()
    {
        return $this->container['ticket_index'];
    }

    /**
     * Sets ticket_index
     *
     * @param float $ticket_index Index number of the ticket for ordering.
     *
     * @return $this
     */
    public function setTicketIndex($ticket_index)
    {
        $this->container['ticket_index'] = $ticket_index;

        return $this;
    }

    /**
     * Gets ticket_tax
     *
     * @return float
     */
    public function getTicketTax()
    {
        return $this->container['ticket_tax'];
    }

    /**
     * Sets ticket_tax
     *
     * @param float $ticket_tax Applicable tax on the ticket price.
     *
     * @return $this
     */
    public function setTicketTax($ticket_tax)
    {
        $this->container['ticket_tax'] = $ticket_tax;

        return $this;
    }

    /**
     * Gets ticket_price
     *
     * @return float
     */
    public function getTicketPrice()
    {
        return $this->container['ticket_price'];
    }

    /**
     * Sets ticket_price
     *
     * @param float $ticket_price Price of the ticket.
     *
     * @return $this
     */
    public function setTicketPrice($ticket_price)
    {
        $this->container['ticket_price'] = $ticket_price;

        return $this;
    }

    /**
     * Gets ticket_currency
     *
     * @return string
     */
    public function getTicketCurrency()
    {
        return $this->container['ticket_currency'];
    }

    /**
     * Sets ticket_currency
     *
     * @param string $ticket_currency Currency in which the ticket is priced.
     *
     * @return $this
     */
    public function setTicketCurrency($ticket_currency)
    {
        $this->container['ticket_currency'] = $ticket_currency;

        return $this;
    }

    /**
     * Gets ticket_cancellation_policies
     *
     * @return string
     */
    public function getTicketCancellationPolicies()
    {
        return $this->container['ticket_cancellation_policies'];
    }

    /**
     * Sets ticket_cancellation_policies
     *
     * @param string $ticket_cancellation_policies Policies regarding ticket cancellation.
     *
     * @return $this
     */
    public function setTicketCancellationPolicies($ticket_cancellation_policies)
    {
        $this->container['ticket_cancellation_policies'] = $ticket_cancellation_policies;

        return $this;
    }

    /**
     * Gets ticket_section
     *
     * @return string
     */
    public function getTicketSection()
    {
        return $this->container['ticket_section'];
    }

    /**
     * Sets ticket_section
     *
     * @param string $ticket_section Section of the venue where the seat is located.
     *
     * @return $this
     */
    public function setTicketSection($ticket_section)
    {
        $this->container['ticket_section'] = $ticket_section;

        return $this;
    }

    /**
     * Gets ticket_row
     *
     * @return string
     */
    public function getTicketRow()
    {
        return $this->container['ticket_row'];
    }

    /**
     * Sets ticket_row
     *
     * @param string $ticket_row Row of the section where the seat is located.
     *
     * @return $this
     */
    public function setTicketRow($ticket_row)
    {
        $this->container['ticket_row'] = $ticket_row;

        return $this;
    }

    /**
     * Gets ticket_seat
     *
     * @return string
     */
    public function getTicketSeat()
    {
        return $this->container['ticket_seat'];
    }

    /**
     * Sets ticket_seat
     *
     * @param string $ticket_seat Specific seat number.
     *
     * @return $this
     */
    public function setTicketSeat($ticket_seat)
    {
        $this->container['ticket_seat'] = $ticket_seat;

        return $this;
    }

    /**
     * Gets ticket_description
     *
     * @return string
     */
    public function getTicketDescription()
    {
        return $this->container['ticket_description'];
    }

    /**
     * Sets ticket_description
     *
     * @param string $ticket_description Description of the ticket.
     *
     * @return $this
     */
    public function setTicketDescription($ticket_description)
    {
        $this->container['ticket_description'] = $ticket_description;

        return $this;
    }

    /**
     * Gets ticket_delivery_options
     *
     * @return string[]
     */
    public function getTicketDeliveryOptions()
    {
        return $this->container['ticket_delivery_options'];
    }

    /**
     * Sets ticket_delivery_options
     *
     * @param string[] $ticket_delivery_options Available options for ticket delivery.
     *
     * @return $this
     */
    public function setTicketDeliveryOptions($ticket_delivery_options)
    {
        $this->container['ticket_delivery_options'] = $ticket_delivery_options;

        return $this;
    }

    /**
     * Gets ticket_quantities
     *
     * @return int[]
     */
    public function getTicketQuantities()
    {
        return $this->container['ticket_quantities'];
    }

    /**
     * Sets ticket_quantities
     *
     * @param int[] $ticket_quantities Quantities of tickets available for purchase.
     *
     * @return $this
     */
    public function setTicketQuantities($ticket_quantities)
    {
        $this->container['ticket_quantities'] = $ticket_quantities;

        return $this;
    }

    /**
     * Gets booking_questions
     *
     * @return string[]
     */
    public function getBookingQuestions()
    {
        return $this->container['booking_questions'];
    }

    /**
     * Sets booking_questions
     *
     * @param string[] $booking_questions Questions related to booking the event.
     *
     * @return $this
     */
    public function setBookingQuestions($booking_questions)
    {
        $this->container['booking_questions'] = $booking_questions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
