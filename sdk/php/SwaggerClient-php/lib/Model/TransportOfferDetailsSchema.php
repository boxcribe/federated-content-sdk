<?php
/**
 * TransportOfferDetailsSchema
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Federated Content API
 *
 * Welcome to the Federated Content API following Open API Specification (Version 3.0.0)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.57
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TransportOfferDetailsSchema Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransportOfferDetailsSchema implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransportOfferDetailsSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'offer_id' => 'string',
        'supplier_offer_id' => 'string',
        'offer_index' => 'int',
        'offer_tax' => 'float',
        'offer_price' => 'float',
        'offer_currency' => 'string',
        'offer_cancelation_policies' => 'string',
        'pickup_date' => '\DateTime',
        'pickup_time' => 'string',
        'adults' => 'int',
        'children' => 'int',
        'return_date' => '\DateTime',
        'return_time' => 'string',
        'transport_name' => 'string',
        'transport_description' => 'string',
        'transport_address' => 'string',
        'transport_latitude' => 'float',
        'transport_longitude' => 'float',
        'transport_distance' => 'float',
        'transport_distance_metric' => 'string',
        'transport_images' => 'string[]',
        'transport_rating' => 'float',
        'transport_reviews' => 'string[]',
        'transport_type' => 'string',
        'transport_class' => 'string',
        'transport_company' => 'string',
        'transport_company_logo' => 'string',
        'transport_passengers_number' => 'int',
        'transport_bags_number' => 'int',
        'transport_amenities' => 'string[]',
        'booking_questions' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'offer_id' => 'uuid',
        'supplier_offer_id' => 'uuid',
        'offer_index' => null,
        'offer_tax' => 'decimal',
        'offer_price' => 'decimal',
        'offer_currency' => null,
        'offer_cancelation_policies' => null,
        'pickup_date' => 'date',
        'pickup_time' => 'time',
        'adults' => null,
        'children' => null,
        'return_date' => 'date',
        'return_time' => 'time',
        'transport_name' => null,
        'transport_description' => null,
        'transport_address' => null,
        'transport_latitude' => 'float',
        'transport_longitude' => 'float',
        'transport_distance' => 'decimal',
        'transport_distance_metric' => null,
        'transport_images' => null,
        'transport_rating' => 'decimal',
        'transport_reviews' => null,
        'transport_type' => null,
        'transport_class' => null,
        'transport_company' => null,
        'transport_company_logo' => null,
        'transport_passengers_number' => null,
        'transport_bags_number' => null,
        'transport_amenities' => null,
        'booking_questions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'offer_id' => 'offer_id',
        'supplier_offer_id' => 'supplier_offer_id',
        'offer_index' => 'offer_index',
        'offer_tax' => 'offer_tax',
        'offer_price' => 'offer_price',
        'offer_currency' => 'offer_currency',
        'offer_cancelation_policies' => 'offer_cancelation_policies',
        'pickup_date' => 'pickup_date',
        'pickup_time' => 'pickup_time',
        'adults' => 'adults',
        'children' => 'children',
        'return_date' => 'return_date',
        'return_time' => 'return_time',
        'transport_name' => 'transport_name',
        'transport_description' => 'transport_description',
        'transport_address' => 'transport_address',
        'transport_latitude' => 'transport_latitude',
        'transport_longitude' => 'transport_longitude',
        'transport_distance' => 'transport_distance',
        'transport_distance_metric' => 'transport_distance_metric',
        'transport_images' => 'transport_images',
        'transport_rating' => 'transport_rating',
        'transport_reviews' => 'transport_reviews',
        'transport_type' => 'transport_type',
        'transport_class' => 'transport_class',
        'transport_company' => 'transport_company',
        'transport_company_logo' => 'transport_company_logo',
        'transport_passengers_number' => 'transport_passengers_number',
        'transport_bags_number' => 'transport_bags_number',
        'transport_amenities' => 'transport_amenities',
        'booking_questions' => 'booking_questions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'offer_id' => 'setOfferId',
        'supplier_offer_id' => 'setSupplierOfferId',
        'offer_index' => 'setOfferIndex',
        'offer_tax' => 'setOfferTax',
        'offer_price' => 'setOfferPrice',
        'offer_currency' => 'setOfferCurrency',
        'offer_cancelation_policies' => 'setOfferCancelationPolicies',
        'pickup_date' => 'setPickupDate',
        'pickup_time' => 'setPickupTime',
        'adults' => 'setAdults',
        'children' => 'setChildren',
        'return_date' => 'setReturnDate',
        'return_time' => 'setReturnTime',
        'transport_name' => 'setTransportName',
        'transport_description' => 'setTransportDescription',
        'transport_address' => 'setTransportAddress',
        'transport_latitude' => 'setTransportLatitude',
        'transport_longitude' => 'setTransportLongitude',
        'transport_distance' => 'setTransportDistance',
        'transport_distance_metric' => 'setTransportDistanceMetric',
        'transport_images' => 'setTransportImages',
        'transport_rating' => 'setTransportRating',
        'transport_reviews' => 'setTransportReviews',
        'transport_type' => 'setTransportType',
        'transport_class' => 'setTransportClass',
        'transport_company' => 'setTransportCompany',
        'transport_company_logo' => 'setTransportCompanyLogo',
        'transport_passengers_number' => 'setTransportPassengersNumber',
        'transport_bags_number' => 'setTransportBagsNumber',
        'transport_amenities' => 'setTransportAmenities',
        'booking_questions' => 'setBookingQuestions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'offer_id' => 'getOfferId',
        'supplier_offer_id' => 'getSupplierOfferId',
        'offer_index' => 'getOfferIndex',
        'offer_tax' => 'getOfferTax',
        'offer_price' => 'getOfferPrice',
        'offer_currency' => 'getOfferCurrency',
        'offer_cancelation_policies' => 'getOfferCancelationPolicies',
        'pickup_date' => 'getPickupDate',
        'pickup_time' => 'getPickupTime',
        'adults' => 'getAdults',
        'children' => 'getChildren',
        'return_date' => 'getReturnDate',
        'return_time' => 'getReturnTime',
        'transport_name' => 'getTransportName',
        'transport_description' => 'getTransportDescription',
        'transport_address' => 'getTransportAddress',
        'transport_latitude' => 'getTransportLatitude',
        'transport_longitude' => 'getTransportLongitude',
        'transport_distance' => 'getTransportDistance',
        'transport_distance_metric' => 'getTransportDistanceMetric',
        'transport_images' => 'getTransportImages',
        'transport_rating' => 'getTransportRating',
        'transport_reviews' => 'getTransportReviews',
        'transport_type' => 'getTransportType',
        'transport_class' => 'getTransportClass',
        'transport_company' => 'getTransportCompany',
        'transport_company_logo' => 'getTransportCompanyLogo',
        'transport_passengers_number' => 'getTransportPassengersNumber',
        'transport_bags_number' => 'getTransportBagsNumber',
        'transport_amenities' => 'getTransportAmenities',
        'booking_questions' => 'getBookingQuestions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['offer_id'] = isset($data['offer_id']) ? $data['offer_id'] : null;
        $this->container['supplier_offer_id'] = isset($data['supplier_offer_id']) ? $data['supplier_offer_id'] : null;
        $this->container['offer_index'] = isset($data['offer_index']) ? $data['offer_index'] : null;
        $this->container['offer_tax'] = isset($data['offer_tax']) ? $data['offer_tax'] : null;
        $this->container['offer_price'] = isset($data['offer_price']) ? $data['offer_price'] : null;
        $this->container['offer_currency'] = isset($data['offer_currency']) ? $data['offer_currency'] : null;
        $this->container['offer_cancelation_policies'] = isset($data['offer_cancelation_policies']) ? $data['offer_cancelation_policies'] : null;
        $this->container['pickup_date'] = isset($data['pickup_date']) ? $data['pickup_date'] : null;
        $this->container['pickup_time'] = isset($data['pickup_time']) ? $data['pickup_time'] : null;
        $this->container['adults'] = isset($data['adults']) ? $data['adults'] : null;
        $this->container['children'] = isset($data['children']) ? $data['children'] : null;
        $this->container['return_date'] = isset($data['return_date']) ? $data['return_date'] : null;
        $this->container['return_time'] = isset($data['return_time']) ? $data['return_time'] : null;
        $this->container['transport_name'] = isset($data['transport_name']) ? $data['transport_name'] : null;
        $this->container['transport_description'] = isset($data['transport_description']) ? $data['transport_description'] : null;
        $this->container['transport_address'] = isset($data['transport_address']) ? $data['transport_address'] : null;
        $this->container['transport_latitude'] = isset($data['transport_latitude']) ? $data['transport_latitude'] : null;
        $this->container['transport_longitude'] = isset($data['transport_longitude']) ? $data['transport_longitude'] : null;
        $this->container['transport_distance'] = isset($data['transport_distance']) ? $data['transport_distance'] : null;
        $this->container['transport_distance_metric'] = isset($data['transport_distance_metric']) ? $data['transport_distance_metric'] : null;
        $this->container['transport_images'] = isset($data['transport_images']) ? $data['transport_images'] : null;
        $this->container['transport_rating'] = isset($data['transport_rating']) ? $data['transport_rating'] : null;
        $this->container['transport_reviews'] = isset($data['transport_reviews']) ? $data['transport_reviews'] : null;
        $this->container['transport_type'] = isset($data['transport_type']) ? $data['transport_type'] : null;
        $this->container['transport_class'] = isset($data['transport_class']) ? $data['transport_class'] : null;
        $this->container['transport_company'] = isset($data['transport_company']) ? $data['transport_company'] : null;
        $this->container['transport_company_logo'] = isset($data['transport_company_logo']) ? $data['transport_company_logo'] : null;
        $this->container['transport_passengers_number'] = isset($data['transport_passengers_number']) ? $data['transport_passengers_number'] : null;
        $this->container['transport_bags_number'] = isset($data['transport_bags_number']) ? $data['transport_bags_number'] : null;
        $this->container['transport_amenities'] = isset($data['transport_amenities']) ? $data['transport_amenities'] : null;
        $this->container['booking_questions'] = isset($data['booking_questions']) ? $data['booking_questions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets offer_id
     *
     * @return string
     */
    public function getOfferId()
    {
        return $this->container['offer_id'];
    }

    /**
     * Sets offer_id
     *
     * @param string $offer_id Unique identifier of the offer.
     *
     * @return $this
     */
    public function setOfferId($offer_id)
    {
        $this->container['offer_id'] = $offer_id;

        return $this;
    }

    /**
     * Gets supplier_offer_id
     *
     * @return string
     */
    public function getSupplierOfferId()
    {
        return $this->container['supplier_offer_id'];
    }

    /**
     * Sets supplier_offer_id
     *
     * @param string $supplier_offer_id Unique identifier for the supplier’s offer.
     *
     * @return $this
     */
    public function setSupplierOfferId($supplier_offer_id)
    {
        $this->container['supplier_offer_id'] = $supplier_offer_id;

        return $this;
    }

    /**
     * Gets offer_index
     *
     * @return int
     */
    public function getOfferIndex()
    {
        return $this->container['offer_index'];
    }

    /**
     * Sets offer_index
     *
     * @param int $offer_index Index number of the offer.
     *
     * @return $this
     */
    public function setOfferIndex($offer_index)
    {
        $this->container['offer_index'] = $offer_index;

        return $this;
    }

    /**
     * Gets offer_tax
     *
     * @return float
     */
    public function getOfferTax()
    {
        return $this->container['offer_tax'];
    }

    /**
     * Sets offer_tax
     *
     * @param float $offer_tax Applicable taxes on the offer.
     *
     * @return $this
     */
    public function setOfferTax($offer_tax)
    {
        $this->container['offer_tax'] = $offer_tax;

        return $this;
    }

    /**
     * Gets offer_price
     *
     * @return float
     */
    public function getOfferPrice()
    {
        return $this->container['offer_price'];
    }

    /**
     * Sets offer_price
     *
     * @param float $offer_price Total price of the offer.
     *
     * @return $this
     */
    public function setOfferPrice($offer_price)
    {
        $this->container['offer_price'] = $offer_price;

        return $this;
    }

    /**
     * Gets offer_currency
     *
     * @return string
     */
    public function getOfferCurrency()
    {
        return $this->container['offer_currency'];
    }

    /**
     * Sets offer_currency
     *
     * @param string $offer_currency Currency of the offer.
     *
     * @return $this
     */
    public function setOfferCurrency($offer_currency)
    {
        $this->container['offer_currency'] = $offer_currency;

        return $this;
    }

    /**
     * Gets offer_cancelation_policies
     *
     * @return string
     */
    public function getOfferCancelationPolicies()
    {
        return $this->container['offer_cancelation_policies'];
    }

    /**
     * Sets offer_cancelation_policies
     *
     * @param string $offer_cancelation_policies Cancellation policies of the offer.
     *
     * @return $this
     */
    public function setOfferCancelationPolicies($offer_cancelation_policies)
    {
        $this->container['offer_cancelation_policies'] = $offer_cancelation_policies;

        return $this;
    }

    /**
     * Gets pickup_date
     *
     * @return \DateTime
     */
    public function getPickupDate()
    {
        return $this->container['pickup_date'];
    }

    /**
     * Sets pickup_date
     *
     * @param \DateTime $pickup_date Date when the transport is scheduled to be picked up.
     *
     * @return $this
     */
    public function setPickupDate($pickup_date)
    {
        $this->container['pickup_date'] = $pickup_date;

        return $this;
    }

    /**
     * Gets pickup_time
     *
     * @return string
     */
    public function getPickupTime()
    {
        return $this->container['pickup_time'];
    }

    /**
     * Sets pickup_time
     *
     * @param string $pickup_time Time when the transport is scheduled to be picked up.
     *
     * @return $this
     */
    public function setPickupTime($pickup_time)
    {
        $this->container['pickup_time'] = $pickup_time;

        return $this;
    }

    /**
     * Gets adults
     *
     * @return int
     */
    public function getAdults()
    {
        return $this->container['adults'];
    }

    /**
     * Sets adults
     *
     * @param int $adults Number of adults included in the transport offer.
     *
     * @return $this
     */
    public function setAdults($adults)
    {
        $this->container['adults'] = $adults;

        return $this;
    }

    /**
     * Gets children
     *
     * @return int
     */
    public function getChildren()
    {
        return $this->container['children'];
    }

    /**
     * Sets children
     *
     * @param int $children Number of children included in the transport offer.
     *
     * @return $this
     */
    public function setChildren($children)
    {
        $this->container['children'] = $children;

        return $this;
    }

    /**
     * Gets return_date
     *
     * @return \DateTime
     */
    public function getReturnDate()
    {
        return $this->container['return_date'];
    }

    /**
     * Sets return_date
     *
     * @param \DateTime $return_date Date when the transport is scheduled to be returned.
     *
     * @return $this
     */
    public function setReturnDate($return_date)
    {
        $this->container['return_date'] = $return_date;

        return $this;
    }

    /**
     * Gets return_time
     *
     * @return string
     */
    public function getReturnTime()
    {
        return $this->container['return_time'];
    }

    /**
     * Sets return_time
     *
     * @param string $return_time Time when the transport is scheduled to be returned.
     *
     * @return $this
     */
    public function setReturnTime($return_time)
    {
        $this->container['return_time'] = $return_time;

        return $this;
    }

    /**
     * Gets transport_name
     *
     * @return string
     */
    public function getTransportName()
    {
        return $this->container['transport_name'];
    }

    /**
     * Sets transport_name
     *
     * @param string $transport_name Name of the transport provider or vehicle.
     *
     * @return $this
     */
    public function setTransportName($transport_name)
    {
        $this->container['transport_name'] = $transport_name;

        return $this;
    }

    /**
     * Gets transport_description
     *
     * @return string
     */
    public function getTransportDescription()
    {
        return $this->container['transport_description'];
    }

    /**
     * Sets transport_description
     *
     * @param string $transport_description Description of the transport.
     *
     * @return $this
     */
    public function setTransportDescription($transport_description)
    {
        $this->container['transport_description'] = $transport_description;

        return $this;
    }

    /**
     * Gets transport_address
     *
     * @return string
     */
    public function getTransportAddress()
    {
        return $this->container['transport_address'];
    }

    /**
     * Sets transport_address
     *
     * @param string $transport_address Address where the transport is located or where it operates.
     *
     * @return $this
     */
    public function setTransportAddress($transport_address)
    {
        $this->container['transport_address'] = $transport_address;

        return $this;
    }

    /**
     * Gets transport_latitude
     *
     * @return float
     */
    public function getTransportLatitude()
    {
        return $this->container['transport_latitude'];
    }

    /**
     * Sets transport_latitude
     *
     * @param float $transport_latitude Latitude coordinate of the transport location.
     *
     * @return $this
     */
    public function setTransportLatitude($transport_latitude)
    {
        $this->container['transport_latitude'] = $transport_latitude;

        return $this;
    }

    /**
     * Gets transport_longitude
     *
     * @return float
     */
    public function getTransportLongitude()
    {
        return $this->container['transport_longitude'];
    }

    /**
     * Sets transport_longitude
     *
     * @param float $transport_longitude Longitude coordinate of the transport location.
     *
     * @return $this
     */
    public function setTransportLongitude($transport_longitude)
    {
        $this->container['transport_longitude'] = $transport_longitude;

        return $this;
    }

    /**
     * Gets transport_distance
     *
     * @return float
     */
    public function getTransportDistance()
    {
        return $this->container['transport_distance'];
    }

    /**
     * Sets transport_distance
     *
     * @param float $transport_distance Distance covered by the transport offer.
     *
     * @return $this
     */
    public function setTransportDistance($transport_distance)
    {
        $this->container['transport_distance'] = $transport_distance;

        return $this;
    }

    /**
     * Gets transport_distance_metric
     *
     * @return string
     */
    public function getTransportDistanceMetric()
    {
        return $this->container['transport_distance_metric'];
    }

    /**
     * Sets transport_distance_metric
     *
     * @param string $transport_distance_metric Metric unit for transport distance (e.g., kilometers, miles).
     *
     * @return $this
     */
    public function setTransportDistanceMetric($transport_distance_metric)
    {
        $this->container['transport_distance_metric'] = $transport_distance_metric;

        return $this;
    }

    /**
     * Gets transport_images
     *
     * @return string[]
     */
    public function getTransportImages()
    {
        return $this->container['transport_images'];
    }

    /**
     * Sets transport_images
     *
     * @param string[] $transport_images Collection of images of the transport.
     *
     * @return $this
     */
    public function setTransportImages($transport_images)
    {
        $this->container['transport_images'] = $transport_images;

        return $this;
    }

    /**
     * Gets transport_rating
     *
     * @return float
     */
    public function getTransportRating()
    {
        return $this->container['transport_rating'];
    }

    /**
     * Sets transport_rating
     *
     * @param float $transport_rating Rating of the transport.
     *
     * @return $this
     */
    public function setTransportRating($transport_rating)
    {
        $this->container['transport_rating'] = $transport_rating;

        return $this;
    }

    /**
     * Gets transport_reviews
     *
     * @return string[]
     */
    public function getTransportReviews()
    {
        return $this->container['transport_reviews'];
    }

    /**
     * Sets transport_reviews
     *
     * @param string[] $transport_reviews Reviews for the transport.
     *
     * @return $this
     */
    public function setTransportReviews($transport_reviews)
    {
        $this->container['transport_reviews'] = $transport_reviews;

        return $this;
    }

    /**
     * Gets transport_type
     *
     * @return string
     */
    public function getTransportType()
    {
        return $this->container['transport_type'];
    }

    /**
     * Sets transport_type
     *
     * @param string $transport_type Type of transport (e.g., car, van, scooter).
     *
     * @return $this
     */
    public function setTransportType($transport_type)
    {
        $this->container['transport_type'] = $transport_type;

        return $this;
    }

    /**
     * Gets transport_class
     *
     * @return string
     */
    public function getTransportClass()
    {
        return $this->container['transport_class'];
    }

    /**
     * Sets transport_class
     *
     * @param string $transport_class Class of the transport (e.g., economy, luxury).
     *
     * @return $this
     */
    public function setTransportClass($transport_class)
    {
        $this->container['transport_class'] = $transport_class;

        return $this;
    }

    /**
     * Gets transport_company
     *
     * @return string
     */
    public function getTransportCompany()
    {
        return $this->container['transport_company'];
    }

    /**
     * Sets transport_company
     *
     * @param string $transport_company Company providing the transport.
     *
     * @return $this
     */
    public function setTransportCompany($transport_company)
    {
        $this->container['transport_company'] = $transport_company;

        return $this;
    }

    /**
     * Gets transport_company_logo
     *
     * @return string
     */
    public function getTransportCompanyLogo()
    {
        return $this->container['transport_company_logo'];
    }

    /**
     * Sets transport_company_logo
     *
     * @param string $transport_company_logo Logo of the company providing the transport.
     *
     * @return $this
     */
    public function setTransportCompanyLogo($transport_company_logo)
    {
        $this->container['transport_company_logo'] = $transport_company_logo;

        return $this;
    }

    /**
     * Gets transport_passengers_number
     *
     * @return int
     */
    public function getTransportPassengersNumber()
    {
        return $this->container['transport_passengers_number'];
    }

    /**
     * Sets transport_passengers_number
     *
     * @param int $transport_passengers_number Number of passengers the transport can accommodate.
     *
     * @return $this
     */
    public function setTransportPassengersNumber($transport_passengers_number)
    {
        $this->container['transport_passengers_number'] = $transport_passengers_number;

        return $this;
    }

    /**
     * Gets transport_bags_number
     *
     * @return int
     */
    public function getTransportBagsNumber()
    {
        return $this->container['transport_bags_number'];
    }

    /**
     * Sets transport_bags_number
     *
     * @param int $transport_bags_number Number of bags the transport can accommodate.
     *
     * @return $this
     */
    public function setTransportBagsNumber($transport_bags_number)
    {
        $this->container['transport_bags_number'] = $transport_bags_number;

        return $this;
    }

    /**
     * Gets transport_amenities
     *
     * @return string[]
     */
    public function getTransportAmenities()
    {
        return $this->container['transport_amenities'];
    }

    /**
     * Sets transport_amenities
     *
     * @param string[] $transport_amenities List of amenities provided with the transport.
     *
     * @return $this
     */
    public function setTransportAmenities($transport_amenities)
    {
        $this->container['transport_amenities'] = $transport_amenities;

        return $this;
    }

    /**
     * Gets booking_questions
     *
     * @return string[]
     */
    public function getBookingQuestions()
    {
        return $this->container['booking_questions'];
    }

    /**
     * Sets booking_questions
     *
     * @param string[] $booking_questions Questions related to booking the transport.
     *
     * @return $this
     */
    public function setBookingQuestions($booking_questions)
    {
        $this->container['booking_questions'] = $booking_questions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
