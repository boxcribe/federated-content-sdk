/*
 * Federated Content API
 * Welcome to the Federated Content API following Open API Specification (Version 3.0.0)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * SchemasIdBody
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-06-24T14:14:21.689997473Z[GMT]")

public class SchemasIdBody {
  @SerializedName("tenant_id")
  private String tenantId = null;

  @SerializedName("category_id")
  private String categoryId = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("slug")
  private String slug = null;

  /**
   * Status of the schema
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    @SerializedName("Active")
    ACTIVE("Active"),
    @SerializedName("Inactive")
    INACTIVE("Inactive");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String input) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("system")
  private Boolean system = null;

  @SerializedName("endpoint")
  private String endpoint = null;

  @SerializedName("endpoint_name")
  private String endpointName = null;

  /**
   * Type of the schema (Request or Response)
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    @SerializedName("Request")
    REQUEST("Request"),
    @SerializedName("Response")
    RESPONSE("Response");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  /**
   * HTTP method for Request types
   */
  @JsonAdapter(MethodEnum.Adapter.class)
  public enum MethodEnum {
    @SerializedName("GET")
    GET("GET"),
    @SerializedName("POST")
    POST("POST"),
    @SerializedName("PATCH")
    PATCH("PATCH"),
    @SerializedName("DELETE")
    DELETE("DELETE");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static MethodEnum fromValue(String input) {
      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<MethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MethodEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public MethodEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return MethodEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("method")
  private MethodEnum method = null;

  @SerializedName("headers")
  private Map<String, String> headers = null;

  @SerializedName("query")
  private Map<String, String> query = null;

  public SchemasIdBody tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

   /**
   * The unique identifier of the tenant
   * @return tenantId
  **/
  @Schema(description = "The unique identifier of the tenant")
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }

  public SchemasIdBody categoryId(String categoryId) {
    this.categoryId = categoryId;
    return this;
  }

   /**
   * The unique identifier of the category
   * @return categoryId
  **/
  @Schema(description = "The unique identifier of the category")
  public String getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(String categoryId) {
    this.categoryId = categoryId;
  }

  public SchemasIdBody name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the schema
   * @return name
  **/
  @Schema(description = "Name of the schema")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public SchemasIdBody slug(String slug) {
    this.slug = slug;
    return this;
  }

   /**
   * Slug for the schema
   * @return slug
  **/
  @Schema(description = "Slug for the schema")
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }

  public SchemasIdBody status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Status of the schema
   * @return status
  **/
  @Schema(description = "Status of the schema")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public SchemasIdBody system(Boolean system) {
    this.system = system;
    return this;
  }

   /**
   * Whether the schema is a system schema
   * @return system
  **/
  @Schema(description = "Whether the schema is a system schema")
  public Boolean isSystem() {
    return system;
  }

  public void setSystem(Boolean system) {
    this.system = system;
  }

  public SchemasIdBody endpoint(String endpoint) {
    this.endpoint = endpoint;
    return this;
  }

   /**
   * Endpoint URL
   * @return endpoint
  **/
  @Schema(description = "Endpoint URL")
  public String getEndpoint() {
    return endpoint;
  }

  public void setEndpoint(String endpoint) {
    this.endpoint = endpoint;
  }

  public SchemasIdBody endpointName(String endpointName) {
    this.endpointName = endpointName;
    return this;
  }

   /**
   * Endpoint name (Group name)
   * @return endpointName
  **/
  @Schema(description = "Endpoint name (Group name)")
  public String getEndpointName() {
    return endpointName;
  }

  public void setEndpointName(String endpointName) {
    this.endpointName = endpointName;
  }

  public SchemasIdBody type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Type of the schema (Request or Response)
   * @return type
  **/
  @Schema(description = "Type of the schema (Request or Response)")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public SchemasIdBody method(MethodEnum method) {
    this.method = method;
    return this;
  }

   /**
   * HTTP method for Request types
   * @return method
  **/
  @Schema(description = "HTTP method for Request types")
  public MethodEnum getMethod() {
    return method;
  }

  public void setMethod(MethodEnum method) {
    this.method = method;
  }

  public SchemasIdBody headers(Map<String, String> headers) {
    this.headers = headers;
    return this;
  }

  public SchemasIdBody putHeadersItem(String key, String headersItem) {
    if (this.headers == null) {
      this.headers = new HashMap<String, String>();
    }
    this.headers.put(key, headersItem);
    return this;
  }

   /**
   * Headers for Request type, stored in JSON format
   * @return headers
  **/
  @Schema(description = "Headers for Request type, stored in JSON format")
  public Map<String, String> getHeaders() {
    return headers;
  }

  public void setHeaders(Map<String, String> headers) {
    this.headers = headers;
  }

  public SchemasIdBody query(Map<String, String> query) {
    this.query = query;
    return this;
  }

  public SchemasIdBody putQueryItem(String key, String queryItem) {
    if (this.query == null) {
      this.query = new HashMap<String, String>();
    }
    this.query.put(key, queryItem);
    return this;
  }

   /**
   * Query parameters for Request type, stored in JSON format
   * @return query
  **/
  @Schema(description = "Query parameters for Request type, stored in JSON format")
  public Map<String, String> getQuery() {
    return query;
  }

  public void setQuery(Map<String, String> query) {
    this.query = query;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchemasIdBody schemasIdBody = (SchemasIdBody) o;
    return Objects.equals(this.tenantId, schemasIdBody.tenantId) &&
        Objects.equals(this.categoryId, schemasIdBody.categoryId) &&
        Objects.equals(this.name, schemasIdBody.name) &&
        Objects.equals(this.slug, schemasIdBody.slug) &&
        Objects.equals(this.status, schemasIdBody.status) &&
        Objects.equals(this.system, schemasIdBody.system) &&
        Objects.equals(this.endpoint, schemasIdBody.endpoint) &&
        Objects.equals(this.endpointName, schemasIdBody.endpointName) &&
        Objects.equals(this.type, schemasIdBody.type) &&
        Objects.equals(this.method, schemasIdBody.method) &&
        Objects.equals(this.headers, schemasIdBody.headers) &&
        Objects.equals(this.query, schemasIdBody.query);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tenantId, categoryId, name, slug, status, system, endpoint, endpointName, type, method, headers, query);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchemasIdBody {\n");
    
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    system: ").append(toIndentedString(system)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    endpointName: ").append(toIndentedString(endpointName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
