/* tslint:disable */
/* eslint-disable */
/**
 * Federated Content API
 * Welcome to the Federated Content API following Open API Specification (Version 3.0.0)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { EventBookingDetailsResponseSchema } from '../models';
import { EventBookingResponseSchema } from '../models';
import { EventCancelBookingRequestSchema } from '../models';
import { EventCancelBookingResponseSchema } from '../models';
import { EventCreateBookingRequestSchema } from '../models';
import { EventGetOfferAvailabilityRequest } from '../models';
import { EventGetOfferAvailabilityResponse } from '../models';
import { EventOfferDetailsSchema } from '../models';
import { EventOfferRequestSchema } from '../models';
import { EventOfferResponseSchema } from '../models';
/**
 * EventsApi - axios parameter creator
 * @export
 */
export const EventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Cancel Booking
         * @param {EventCancelBookingRequestSchema} body 
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsBookingsBookingIdCancelPost: async (body: EventCancelBookingRequestSchema, bookingId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventsBookingsBookingIdCancelPost.');
            }
            // verify required parameter 'bookingId' is not null or undefined
            if (bookingId === null || bookingId === undefined) {
                throw new RequiredError('bookingId','Required parameter bookingId was null or undefined when calling eventsBookingsBookingIdCancelPost.');
            }
            const localVarPath = `/events/bookings/{bookingId}/cancel`
                .replace(`{${"bookingId"}}`, encodeURIComponent(String(bookingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Booking Details
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsBookingsBookingIdGet: async (bookingId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookingId' is not null or undefined
            if (bookingId === null || bookingId === undefined) {
                throw new RequiredError('bookingId','Required parameter bookingId was null or undefined when calling eventsBookingsBookingIdGet.');
            }
            const localVarPath = `/events/bookings/{bookingId}`
                .replace(`{${"bookingId"}}`, encodeURIComponent(String(bookingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Booking
         * @param {EventCreateBookingRequestSchema} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsBookingsPost: async (body: EventCreateBookingRequestSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventsBookingsPost.');
            }
            const localVarPath = `/events/bookings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Offer Availability
         * @param {EventGetOfferAvailabilityRequest} body 
         * @param {string} offerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsOfferAvailabilityOfferIdGet: async (body: EventGetOfferAvailabilityRequest, offerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventsOfferAvailabilityOfferIdGet.');
            }
            // verify required parameter 'offerId' is not null or undefined
            if (offerId === null || offerId === undefined) {
                throw new RequiredError('offerId','Required parameter offerId was null or undefined when calling eventsOfferAvailabilityOfferIdGet.');
            }
            const localVarPath = `/events/offer_availability/{offerId}`
                .replace(`{${"offerId"}}`, encodeURIComponent(String(offerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Offer Details
         * @param {string} offerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsOffersOfferIdGet: async (offerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'offerId' is not null or undefined
            if (offerId === null || offerId === undefined) {
                throw new RequiredError('offerId','Required parameter offerId was null or undefined when calling eventsOffersOfferIdGet.');
            }
            const localVarPath = `/events/offers/{offerId}`
                .replace(`{${"offerId"}}`, encodeURIComponent(String(offerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search Offers
         * @param {EventOfferRequestSchema} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsOffersSearchPost: async (body: EventOfferRequestSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling eventsOffersSearchPost.');
            }
            const localVarPath = `/events/offers/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventsApi - functional programming interface
 * @export
 */
export const EventsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Cancel Booking
         * @param {EventCancelBookingRequestSchema} body 
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsBookingsBookingIdCancelPost(body: EventCancelBookingRequestSchema, bookingId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<EventCancelBookingResponseSchema>>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).eventsBookingsBookingIdCancelPost(body, bookingId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Booking Details
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsBookingsBookingIdGet(bookingId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<EventBookingDetailsResponseSchema>>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).eventsBookingsBookingIdGet(bookingId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create Booking
         * @param {EventCreateBookingRequestSchema} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsBookingsPost(body: EventCreateBookingRequestSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<EventBookingResponseSchema>>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).eventsBookingsPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Offer Availability
         * @param {EventGetOfferAvailabilityRequest} body 
         * @param {string} offerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsOfferAvailabilityOfferIdGet(body: EventGetOfferAvailabilityRequest, offerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<EventGetOfferAvailabilityResponse>>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).eventsOfferAvailabilityOfferIdGet(body, offerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Offer Details
         * @param {string} offerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsOffersOfferIdGet(offerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<EventOfferDetailsSchema>>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).eventsOffersOfferIdGet(offerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Search Offers
         * @param {EventOfferRequestSchema} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsOffersSearchPost(body: EventOfferRequestSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<EventOfferResponseSchema>>> {
            const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).eventsOffersSearchPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EventsApi - factory interface
 * @export
 */
export const EventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Cancel Booking
         * @param {EventCancelBookingRequestSchema} body 
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsBookingsBookingIdCancelPost(body: EventCancelBookingRequestSchema, bookingId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<EventCancelBookingResponseSchema>> {
            return EventsApiFp(configuration).eventsBookingsBookingIdCancelPost(body, bookingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Booking Details
         * @param {string} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsBookingsBookingIdGet(bookingId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<EventBookingDetailsResponseSchema>> {
            return EventsApiFp(configuration).eventsBookingsBookingIdGet(bookingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Booking
         * @param {EventCreateBookingRequestSchema} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsBookingsPost(body: EventCreateBookingRequestSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<EventBookingResponseSchema>> {
            return EventsApiFp(configuration).eventsBookingsPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Offer Availability
         * @param {EventGetOfferAvailabilityRequest} body 
         * @param {string} offerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsOfferAvailabilityOfferIdGet(body: EventGetOfferAvailabilityRequest, offerId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<EventGetOfferAvailabilityResponse>> {
            return EventsApiFp(configuration).eventsOfferAvailabilityOfferIdGet(body, offerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Offer Details
         * @param {string} offerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsOffersOfferIdGet(offerId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<EventOfferDetailsSchema>> {
            return EventsApiFp(configuration).eventsOffersOfferIdGet(offerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search Offers
         * @param {EventOfferRequestSchema} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsOffersSearchPost(body: EventOfferRequestSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<EventOfferResponseSchema>> {
            return EventsApiFp(configuration).eventsOffersSearchPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export class EventsApi extends BaseAPI {
    /**
     * 
     * @summary Cancel Booking
     * @param {EventCancelBookingRequestSchema} body 
     * @param {string} bookingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public async eventsBookingsBookingIdCancelPost(body: EventCancelBookingRequestSchema, bookingId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<EventCancelBookingResponseSchema>> {
        return EventsApiFp(this.configuration).eventsBookingsBookingIdCancelPost(body, bookingId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get Booking Details
     * @param {string} bookingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public async eventsBookingsBookingIdGet(bookingId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<EventBookingDetailsResponseSchema>> {
        return EventsApiFp(this.configuration).eventsBookingsBookingIdGet(bookingId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Create Booking
     * @param {EventCreateBookingRequestSchema} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public async eventsBookingsPost(body: EventCreateBookingRequestSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<EventBookingResponseSchema>> {
        return EventsApiFp(this.configuration).eventsBookingsPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get Offer Availability
     * @param {EventGetOfferAvailabilityRequest} body 
     * @param {string} offerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public async eventsOfferAvailabilityOfferIdGet(body: EventGetOfferAvailabilityRequest, offerId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<EventGetOfferAvailabilityResponse>> {
        return EventsApiFp(this.configuration).eventsOfferAvailabilityOfferIdGet(body, offerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get Offer Details
     * @param {string} offerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public async eventsOffersOfferIdGet(offerId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<EventOfferDetailsSchema>> {
        return EventsApiFp(this.configuration).eventsOffersOfferIdGet(offerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Search Offers
     * @param {EventOfferRequestSchema} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public async eventsOffersSearchPost(body: EventOfferRequestSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<EventOfferResponseSchema>> {
        return EventsApiFp(this.configuration).eventsOffersSearchPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
