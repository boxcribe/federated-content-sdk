/* tslint:disable */
/* eslint-disable */
/**
 * Federated Content API
 * Welcome to the Federated Content API following Open API Specification (Version 3.0.0)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse2009 } from '../models';
import { Mapping } from '../models';
import { MappingsBody } from '../models';
import { MappingsIdBody } from '../models';
/**
 * MappingsApi - axios parameter creator
 * @export
 */
export const MappingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of mappings with the ability to filter by tenant, category, schema, integration, field, sort, limit or page.
         * @summary Get mappings
         * @param {string} [tenant] Get all mappings for a Tenant ID
         * @param {string} [schema] Get all mappings for a Schema ID
         * @param {string} [field] Get all mappings for a Field ID
         * @param {string} [integration] Get all mappings for an Integration ID
         * @param {string} [sort] sort by query in the form of mapping:desc/asc (ex. name:asc)
         * @param {number} [limit] Maximum number of mappings
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mappingsGet: async (tenant?: string, schema?: string, field?: string, integration?: string, sort?: string, limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mappings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (tenant !== undefined) {
                localVarQueryParameter['tenant'] = tenant;
            }

            if (schema !== undefined) {
                localVarQueryParameter['schema'] = schema;
            }

            if (field !== undefined) {
                localVarQueryParameter['field'] = field;
            }

            if (integration !== undefined) {
                localVarQueryParameter['integration'] = integration;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete mapping
         * @param {string} id Mapping id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mappingsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling mappingsIdDelete.');
            }
            const localVarPath = `/mappings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get mapping
         * @param {string} id Mapping id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mappingsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling mappingsIdGet.');
            }
            const localVarPath = `/mappings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update mapping
         * @param {MappingsIdBody} body 
         * @param {string} id Mapping id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mappingsIdPatch: async (body: MappingsIdBody, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling mappingsIdPatch.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling mappingsIdPatch.');
            }
            const localVarPath = `/mappings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create mapping
         * @param {MappingsBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mappingsPost: async (body: MappingsBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling mappingsPost.');
            }
            const localVarPath = `/mappings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MappingsApi - functional programming interface
 * @export
 */
export const MappingsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of mappings with the ability to filter by tenant, category, schema, integration, field, sort, limit or page.
         * @summary Get mappings
         * @param {string} [tenant] Get all mappings for a Tenant ID
         * @param {string} [schema] Get all mappings for a Schema ID
         * @param {string} [field] Get all mappings for a Field ID
         * @param {string} [integration] Get all mappings for an Integration ID
         * @param {string} [sort] sort by query in the form of mapping:desc/asc (ex. name:asc)
         * @param {number} [limit] Maximum number of mappings
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mappingsGet(tenant?: string, schema?: string, field?: string, integration?: string, sort?: string, limit?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2009>>> {
            const localVarAxiosArgs = await MappingsApiAxiosParamCreator(configuration).mappingsGet(tenant, schema, field, integration, sort, limit, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete mapping
         * @param {string} id Mapping id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mappingsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await MappingsApiAxiosParamCreator(configuration).mappingsIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get mapping
         * @param {string} id Mapping id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mappingsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Mapping>>> {
            const localVarAxiosArgs = await MappingsApiAxiosParamCreator(configuration).mappingsIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update mapping
         * @param {MappingsIdBody} body 
         * @param {string} id Mapping id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mappingsIdPatch(body: MappingsIdBody, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Mapping>>> {
            const localVarAxiosArgs = await MappingsApiAxiosParamCreator(configuration).mappingsIdPatch(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create mapping
         * @param {MappingsBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mappingsPost(body: MappingsBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Mapping>>> {
            const localVarAxiosArgs = await MappingsApiAxiosParamCreator(configuration).mappingsPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MappingsApi - factory interface
 * @export
 */
export const MappingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Retrieve a list of mappings with the ability to filter by tenant, category, schema, integration, field, sort, limit or page.
         * @summary Get mappings
         * @param {string} [tenant] Get all mappings for a Tenant ID
         * @param {string} [schema] Get all mappings for a Schema ID
         * @param {string} [field] Get all mappings for a Field ID
         * @param {string} [integration] Get all mappings for an Integration ID
         * @param {string} [sort] sort by query in the form of mapping:desc/asc (ex. name:asc)
         * @param {number} [limit] Maximum number of mappings
         * @param {number} [page] Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mappingsGet(tenant?: string, schema?: string, field?: string, integration?: string, sort?: string, limit?: number, page?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2009>> {
            return MappingsApiFp(configuration).mappingsGet(tenant, schema, field, integration, sort, limit, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete mapping
         * @param {string} id Mapping id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mappingsIdDelete(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return MappingsApiFp(configuration).mappingsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get mapping
         * @param {string} id Mapping id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mappingsIdGet(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Mapping>> {
            return MappingsApiFp(configuration).mappingsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update mapping
         * @param {MappingsIdBody} body 
         * @param {string} id Mapping id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mappingsIdPatch(body: MappingsIdBody, id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Mapping>> {
            return MappingsApiFp(configuration).mappingsIdPatch(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create mapping
         * @param {MappingsBody} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mappingsPost(body: MappingsBody, options?: AxiosRequestConfig): Promise<AxiosResponse<Mapping>> {
            return MappingsApiFp(configuration).mappingsPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MappingsApi - object-oriented interface
 * @export
 * @class MappingsApi
 * @extends {BaseAPI}
 */
export class MappingsApi extends BaseAPI {
    /**
     * Retrieve a list of mappings with the ability to filter by tenant, category, schema, integration, field, sort, limit or page.
     * @summary Get mappings
     * @param {string} [tenant] Get all mappings for a Tenant ID
     * @param {string} [schema] Get all mappings for a Schema ID
     * @param {string} [field] Get all mappings for a Field ID
     * @param {string} [integration] Get all mappings for an Integration ID
     * @param {string} [sort] sort by query in the form of mapping:desc/asc (ex. name:asc)
     * @param {number} [limit] Maximum number of mappings
     * @param {number} [page] Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MappingsApi
     */
    public async mappingsGet(tenant?: string, schema?: string, field?: string, integration?: string, sort?: string, limit?: number, page?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2009>> {
        return MappingsApiFp(this.configuration).mappingsGet(tenant, schema, field, integration, sort, limit, page, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete mapping
     * @param {string} id Mapping id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MappingsApi
     */
    public async mappingsIdDelete(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return MappingsApiFp(this.configuration).mappingsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get mapping
     * @param {string} id Mapping id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MappingsApi
     */
    public async mappingsIdGet(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Mapping>> {
        return MappingsApiFp(this.configuration).mappingsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update mapping
     * @param {MappingsIdBody} body 
     * @param {string} id Mapping id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MappingsApi
     */
    public async mappingsIdPatch(body: MappingsIdBody, id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Mapping>> {
        return MappingsApiFp(this.configuration).mappingsIdPatch(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Create mapping
     * @param {MappingsBody} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MappingsApi
     */
    public async mappingsPost(body: MappingsBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<Mapping>> {
        return MappingsApiFp(this.configuration).mappingsPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
