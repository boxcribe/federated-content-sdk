/* tslint:disable */
/* eslint-disable */
/**
 * Federated Content API
 * Welcome to the Federated Content API following Open API Specification (Version 3.0.0)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { FlightBookingDetailsRequestSchema } from '../models';
import { FlightBookingResponseSchema } from '../models';
import { FlightCancelBookingRequestSchema } from '../models';
import { FlightCancelBookingResponseSchema } from '../models';
import { FlightCreateBookingRequestSchema } from '../models';
import { FlightGetBookingDetailsResponseSchema } from '../models';
import { FlightOfferDetailsRequestSchema } from '../models';
import { FlightOfferDetailsResponseSchema } from '../models';
import { FlightOfferRequestSchema } from '../models';
import { FlightOfferResponseSchema } from '../models';
import { FlightOfferSeatmapsRequestSchema } from '../models';
import { FlightOfferSeatmapsResponseSchema } from '../models';
/**
 * FlightsApi - axios parameter creator
 * @export
 */
export const FlightsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Cancel Booking
         * @param {FlightCancelBookingRequestSchema} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flightsBookingsBookingIdCancelPost: async (body: FlightCancelBookingRequestSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling flightsBookingsBookingIdCancelPost.');
            }
            const localVarPath = `/flights/bookings/{bookingId}/cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Booking Details
         * @param {FlightBookingDetailsRequestSchema} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flightsBookingsBookingIdGet: async (body: FlightBookingDetailsRequestSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling flightsBookingsBookingIdGet.');
            }
            const localVarPath = `/flights/bookings/{bookingId}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Booking
         * @param {FlightCreateBookingRequestSchema} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flightsBookingsPost: async (body: FlightCreateBookingRequestSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling flightsBookingsPost.');
            }
            const localVarPath = `/flights/bookings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Offer Details
         * @param {FlightOfferDetailsRequestSchema} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flightsOffersOfferIdGet: async (body: FlightOfferDetailsRequestSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling flightsOffersOfferIdGet.');
            }
            const localVarPath = `/flights/offers/{offerId}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Offer Seatmaps
         * @param {FlightOfferSeatmapsRequestSchema} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flightsOffersOfferIdSeatmapsGet: async (body: FlightOfferSeatmapsRequestSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling flightsOffersOfferIdSeatmapsGet.');
            }
            const localVarPath = `/flights/offers/{offerId}/seatmaps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search Offers
         * @param {FlightOfferRequestSchema} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flightsOffersSearchPost: async (body: FlightOfferRequestSchema, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling flightsOffersSearchPost.');
            }
            const localVarPath = `/flights/offers/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FlightsApi - functional programming interface
 * @export
 */
export const FlightsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Cancel Booking
         * @param {FlightCancelBookingRequestSchema} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flightsBookingsBookingIdCancelPost(body: FlightCancelBookingRequestSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FlightCancelBookingResponseSchema>>> {
            const localVarAxiosArgs = await FlightsApiAxiosParamCreator(configuration).flightsBookingsBookingIdCancelPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Booking Details
         * @param {FlightBookingDetailsRequestSchema} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flightsBookingsBookingIdGet(body: FlightBookingDetailsRequestSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FlightGetBookingDetailsResponseSchema>>> {
            const localVarAxiosArgs = await FlightsApiAxiosParamCreator(configuration).flightsBookingsBookingIdGet(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create Booking
         * @param {FlightCreateBookingRequestSchema} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flightsBookingsPost(body: FlightCreateBookingRequestSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FlightBookingResponseSchema>>> {
            const localVarAxiosArgs = await FlightsApiAxiosParamCreator(configuration).flightsBookingsPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Offer Details
         * @param {FlightOfferDetailsRequestSchema} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flightsOffersOfferIdGet(body: FlightOfferDetailsRequestSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FlightOfferDetailsResponseSchema>>> {
            const localVarAxiosArgs = await FlightsApiAxiosParamCreator(configuration).flightsOffersOfferIdGet(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get Offer Seatmaps
         * @param {FlightOfferSeatmapsRequestSchema} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flightsOffersOfferIdSeatmapsGet(body: FlightOfferSeatmapsRequestSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FlightOfferSeatmapsResponseSchema>>> {
            const localVarAxiosArgs = await FlightsApiAxiosParamCreator(configuration).flightsOffersOfferIdSeatmapsGet(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Search Offers
         * @param {FlightOfferRequestSchema} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flightsOffersSearchPost(body: FlightOfferRequestSchema, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<FlightOfferResponseSchema>>> {
            const localVarAxiosArgs = await FlightsApiAxiosParamCreator(configuration).flightsOffersSearchPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FlightsApi - factory interface
 * @export
 */
export const FlightsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Cancel Booking
         * @param {FlightCancelBookingRequestSchema} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flightsBookingsBookingIdCancelPost(body: FlightCancelBookingRequestSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<FlightCancelBookingResponseSchema>> {
            return FlightsApiFp(configuration).flightsBookingsBookingIdCancelPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Booking Details
         * @param {FlightBookingDetailsRequestSchema} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flightsBookingsBookingIdGet(body: FlightBookingDetailsRequestSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<FlightGetBookingDetailsResponseSchema>> {
            return FlightsApiFp(configuration).flightsBookingsBookingIdGet(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Booking
         * @param {FlightCreateBookingRequestSchema} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flightsBookingsPost(body: FlightCreateBookingRequestSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<FlightBookingResponseSchema>> {
            return FlightsApiFp(configuration).flightsBookingsPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Offer Details
         * @param {FlightOfferDetailsRequestSchema} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flightsOffersOfferIdGet(body: FlightOfferDetailsRequestSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<FlightOfferDetailsResponseSchema>> {
            return FlightsApiFp(configuration).flightsOffersOfferIdGet(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Offer Seatmaps
         * @param {FlightOfferSeatmapsRequestSchema} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flightsOffersOfferIdSeatmapsGet(body: FlightOfferSeatmapsRequestSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<FlightOfferSeatmapsResponseSchema>> {
            return FlightsApiFp(configuration).flightsOffersOfferIdSeatmapsGet(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search Offers
         * @param {FlightOfferRequestSchema} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async flightsOffersSearchPost(body: FlightOfferRequestSchema, options?: AxiosRequestConfig): Promise<AxiosResponse<FlightOfferResponseSchema>> {
            return FlightsApiFp(configuration).flightsOffersSearchPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FlightsApi - object-oriented interface
 * @export
 * @class FlightsApi
 * @extends {BaseAPI}
 */
export class FlightsApi extends BaseAPI {
    /**
     * 
     * @summary Cancel Booking
     * @param {FlightCancelBookingRequestSchema} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightsApi
     */
    public async flightsBookingsBookingIdCancelPost(body: FlightCancelBookingRequestSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<FlightCancelBookingResponseSchema>> {
        return FlightsApiFp(this.configuration).flightsBookingsBookingIdCancelPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get Booking Details
     * @param {FlightBookingDetailsRequestSchema} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightsApi
     */
    public async flightsBookingsBookingIdGet(body: FlightBookingDetailsRequestSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<FlightGetBookingDetailsResponseSchema>> {
        return FlightsApiFp(this.configuration).flightsBookingsBookingIdGet(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Create Booking
     * @param {FlightCreateBookingRequestSchema} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightsApi
     */
    public async flightsBookingsPost(body: FlightCreateBookingRequestSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<FlightBookingResponseSchema>> {
        return FlightsApiFp(this.configuration).flightsBookingsPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get Offer Details
     * @param {FlightOfferDetailsRequestSchema} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightsApi
     */
    public async flightsOffersOfferIdGet(body: FlightOfferDetailsRequestSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<FlightOfferDetailsResponseSchema>> {
        return FlightsApiFp(this.configuration).flightsOffersOfferIdGet(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get Offer Seatmaps
     * @param {FlightOfferSeatmapsRequestSchema} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightsApi
     */
    public async flightsOffersOfferIdSeatmapsGet(body: FlightOfferSeatmapsRequestSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<FlightOfferSeatmapsResponseSchema>> {
        return FlightsApiFp(this.configuration).flightsOffersOfferIdSeatmapsGet(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Search Offers
     * @param {FlightOfferRequestSchema} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightsApi
     */
    public async flightsOffersSearchPost(body: FlightOfferRequestSchema, options?: AxiosRequestConfig) : Promise<AxiosResponse<FlightOfferResponseSchema>> {
        return FlightsApiFp(this.configuration).flightsOffersSearchPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
